/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Ball2D.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/04/12
 *
 * Implementation of inline methods defined in Ball2D.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

#define BALL2D_2_PI (2. * M_PI)

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename T>
inline
DGtal::Ball2D<T>::Ball2D(const double x0, const double y0, const double radius):
  myRadius(radius), myCenter(x0,y0) 
{}


template <typename T>
inline
DGtal::Ball2D<T>::Ball2D(const RealPoint &aPoint, const double radius):
  myRadius(radius), myCenter(aPoint) 
{}

template <typename T>
inline
DGtal::Ball2D<T>::Ball2D(const Ball2D &other):
  myCenter(other.myCenter), myRadius(other.myRadius)
{}

/////////////////////////////////////////////////////////////////////////////
// ------------- Implementation of 'StarShaped' services ------------------

/**
 * @param p any point in the plane.
 *
 * @return the angle parameter between 0 and 2*Pi corresponding to
 * this point for the shape.
 */
template <typename T>
inline
double
DGtal::Ball2D<T>::parameter( const RealPoint & p ) const
{
  const double angle = atan2(p[1]-myCenter[1], p[0]-myCenter[0]);
  return angle < 0. ? angle + BALL2D_2_PI : angle;
}

/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x(t),y(t)) which is the position on the
 * shape boundary.
 */
template <typename T>
inline
typename DGtal::Ball2D<T>::RealPoint 
DGtal::Ball2D<T>::x( const double t ) const
{
  return RealPoint( myRadius*cos(t)+myCenter[0], myRadius*sin(t)+myCenter[1] );
}


/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x'(t),y'(t)) which is the tangent to the
 * shape boundary.
 */
template <typename T>
inline
typename DGtal::Ball2D<T>::RealVector 
DGtal::Ball2D<T>::xp( const double t ) const
{
  return RealVector( -myRadius*sin(t), myRadius*cos(t) );
}

/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x''(t),y''(t)).
 */
template <typename T>
inline
typename DGtal::Ball2D<T>::RealVector
DGtal::Ball2D<T>::xpp( const double t ) const
{
  return RealVector( -myRadius*cos(t), -myRadius*sin(t) );
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::Ball2D<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[Ball2D] center= " << myCenter
      << " radius=" << myRadius;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::Ball2D<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const Ball2D<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


