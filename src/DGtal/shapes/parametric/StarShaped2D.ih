/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file StarShaped2D.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/04/12
 *
 * Implementation of inline methods defined in StarShaped2D.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


/////////////////////////////////////////////////////////////////////////////
// ------------------------- star-shaped services -------------------------

/**
 * @param p any point in the plane.
 *
 * @return 'true' if the point is inside the shape, 'false' if it
 * is strictly outside.
 */
template<typename TSpace>
inline
DGtal::Orientation
DGtal::StarShaped2D<TSpace>::orientation( const RealPoint & p ) const
{
    RealPoint x_rel = x( parameter( p ));
    x_rel -= center();
    RealPoint p_rel( p );
    p_rel -= center();

    double d_x = x_rel.norm();
    double d_p = p_rel.norm();
    double diff = d_p - d_x;

    if ( diff > 0.0 )
        return OUTSIDE;
    else if ( diff < 0.0 )
        return INSIDE;
    else
        return ON;
}


/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x'(t),y'(t)) made unitary which is the unit
 * tangent to the shape boundary.  
 */
template<typename TSpace>
inline
typename DGtal::StarShaped2D<TSpace>::RealPoint
DGtal::StarShaped2D<TSpace>::tangent( double t ) const
{
  RealPoint tgt( xp( t ) );
  double norm = tgt.norm();
  tgt /= norm;
  return tgt;
}


/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x''(t),y''(t)) made unitary which is the unit
 * normal to the shape boundary looking inside the shape.  
b */
template<typename TSpace>
inline
typename DGtal::StarShaped2D<TSpace>::RealPoint
DGtal::StarShaped2D<TSpace>::normal( double t ) const
{
  RealPoint tgt( tangent( t ) );
  return RealPoint( -tgt[1], tgt[0]);
}


/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the algebraic curvature at point (x(t),y(t)), positive
 * is convex, negative is concave when shape is to the left and
 * the shape boundary is followed counterclockwise.
 */
template<typename TSpace>
inline
double 
DGtal::StarShaped2D<TSpace>::curvature( double t ) const
{
  RealPoint tgt( xp( t ) );
  RealPoint dt( xpp( t ) );
  double norm = tgt.norm();
  double curv = ( dt[0] * tgt[1] - dt[1] * tgt[0] ) / ( norm * norm * norm );
  return - curv;
}
  

/**
 * @param t1 any angle between 0 and 2*Pi.
 * @param t2 any angle between 0 and 2*Pi, further from [t1].
 * @param nb the number of points used to estimate the arclength between x(t1) and x(t2).
 * @return the estimated arclength.
 */
template<typename TSpace>
inline
double
DGtal::StarShaped2D<TSpace>::arclength( double t1, double t2, unsigned int nb ) const
{
  while ( t2 < t1 ) t2 += 2.0*M_PI;

  RealPoint x0( x( t1 ) );
  double l = 0.0;
  // JOL 2008/08/28
  for ( unsigned int i = 1; i <= nb; ++i )
    {
      double t = ( ( t2 - t1 ) * i ) / nb;
      RealPoint x1( x( t1 + t ) );
      l += sqrt( ( x1[0] - x0[0] )*( x1[0] - x0[0] )
         + ( x1[1] - x0[1] )*( x1[1] - x0[1] ) );
      x0 = x1;
    }
  return l;
}



/**
 * Destructor.
 */
template <typename T>
inline
DGtal::StarShaped2D<T>::~StarShaped2D()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::StarShaped2D<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[StarShaped2D]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::StarShaped2D<T>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
        const StarShaped2D<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


