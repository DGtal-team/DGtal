/**
 * @file moduleMeshVoxelization.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2016/11/12
 *
 * Documentation file for feature MeshVoxelization
 *
 * This file is part of the DGtal library.
 */

/*
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page moduleMeshVoxelization Mesh Voxelization
@writers David Coeurjolly, Monir Hadji

[TOC]

@see DGtalTools MeshVoxelizer


\section sectVoxelization1 Introduction

This documentation describes a voxelization approach of a triangulated structure.
The proposed approach follows the method described by Laine @cite Laine13.

@note The digitization is not a @e solid voxelization in the sense
that if the input mesh is a closed surface, interior voxels are not
exported. Only the triangles are digitized.

The approach is rather simple: Given a triangulated mesh, the
MeshVoxlizer processes each triangle independently. If the triangle
intersects a given @a template centered at a given grid point, then
the grid point belongs to the digitization of the triangle.

The geometry of the template is used to control the topology of the
resulting digital set. We provide two templates to obtain 6- and
26-separable digital sets (see \ref sectVoxelization3 for discussion).

@image html 6-sep.png "Template for 6-separating digitization"
@image html 26-sep.png "Template for 26-separating digitization"


\section sectVoxelization2 Basic Usage

Given a Mesh @a aMesh, the MeshVoxelizer class is templated by a
type of digital set (model of concepts::CDigitalSet) to store the
voxels, and an integer specifying the expected separability of the
surface (either 6 or 26).

Let us first create a simple unit cube (see exampleMeshVoxelizer)

@snippet examples/shapes/exampleMeshVoxelizer.cpp MeshVoxelizerCreatingMesh

We first include the class:
@snippet examples/shapes/exampleMeshVoxelizer.cpp MeshVoxelizerInc

We then create a voxelization of a scaled version of the cube onto a
@f$ 128^3@f$ domain:

@snippet examples/shapes/exampleMeshVoxelizer.cpp MeshVoxelizerDig


\section sectVoxelization3 Limitations

At this point intersection tests are performed using arithmetics on @e
double as an approximation of @f$ \mathbb{R}^3@f$. The digitization
may not be exact when the mesh are integer or rational vertices for
instance.


*/

}
