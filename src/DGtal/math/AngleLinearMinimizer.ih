/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file AngleLinearMinimizer.ih
 
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @author (backported from ImaGene by) Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/08/31
 *
 * Implementation of inline methods defined in AngleLinearMinimizer.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
 * Sum of all the absolute displacements of the last optimisation step.
 */
inline
double
DGtal::AngleLinearMinimizer::sum() const
{
  return mySum;
}

/**
 * Max of all the absolute displacements of the last optimisation step.
 */
inline
double 
DGtal::AngleLinearMinimizer::max() const
{
  return myMax;
}


/**
 * Default constructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByRelaxation::AngleLinearMinimizerByRelaxation()
{}


/**
 * Destructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByRelaxation::~AngleLinearMinimizerByRelaxation()
{}


/**
 * Default constructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByGradientDescent::AngleLinearMinimizerByGradientDescent
( double aStep )
  : myStep( aStep )
{}


/**
 * Destructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByGradientDescent::~AngleLinearMinimizerByGradientDescent()
{}


/**
 * Default constructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByAdaptiveStepGradientDescent::AngleLinearMinimizerByAdaptiveStepGradientDescent
( double aStep )
  : myStep( aStep )
{}

/**
 * Destructor. Does nothing.
 */
inline
DGtal::AngleLinearMinimizerByAdaptiveStepGradientDescent::~AngleLinearMinimizerByAdaptiveStepGradientDescent()
{}


  
/**
 * @return a reference on the information structure of the [i]th value.
 */
inline
DGtal::AngleLinearMinimizer::ValueInfo & 
DGtal::AngleLinearMinimizer::rw( unsigned int i )
{
  ASSERT( ( myValues != 0 ) && ( i < maxSize() ) );
  return myValues[ i ];
}


/**
 * @return a const reference on the information structure of the [i]th value.
 */
inline
const DGtal::AngleLinearMinimizer::ValueInfo & 
DGtal::AngleLinearMinimizer::ro( unsigned int i ) const
{
  ASSERT( ( myValues != 0 ) && ( i < maxSize() ) );
  return myValues[ i ];
}


/**
 * @return the maximum number of values stored in the object.
 */
inline
unsigned int
DGtal::AngleLinearMinimizer::maxSize() const
{
  return myMaxSize;
}


/**
 * @return the number of values stored in the object.
 */
inline
unsigned int
DGtal::AngleLinearMinimizer::size() const
{
  return mySize;
}


/**
 * Specifies the exact number of valid values.
 * @param nb any number below 'maxSize()'.
 */
inline
void
DGtal::AngleLinearMinimizer::setSize( unsigned int nb )
{
  ASSERT( nb <= maxSize() );
  mySize = nb;
}


/**
 * Specifies if the curve is open or not.
 * @param is_curve_open when 'true' the curve is open and the last
 * value does not depend on the first one, otherwise the curve is
 * closed and the last value is linked to the first one.
 */
inline
void
DGtal::AngleLinearMinimizer::setIsCurveOpen( bool isCurveOpen)
{
  myIsCurveOpen = isCurveOpen;
}




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

inline
std::string
DGtal::AngleLinearMinimizer::className() const
{
  return "AngleLinearMinimizer";
}

/**
 * Overloads 'operator<<' for displaying objects of class 'AngleLinearMinimizer'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'AngleLinearMinimizer' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const AngleLinearMinimizer & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


