/**
 * @file
 * @author Baptiste GENEST (\c baptistegenest@gmail.com )
 * intership at Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2022/06/16
 *
 * Documentation file for feature PolygonalCalculus
 *
 * This file is part of the DGtal library.
 */

/*
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page moduleVectorsInHeat Vector Heat Method using discrete polygonal calculus
@writers Baptiste GENEST

[TOC]

@since 1.3

  Part of package \ref packageDEC.

In this documentation page, we focus on an implementation of the
"Vector Heat method" (\cite Sharp:2019:VHM). The main objective is to
highlight the use of  differential operators from \ref
modulePolygonalCalculus to solve elementary PDEs on intrinsic vector fields.

Use example can be find at \ref exampleVectorHeatMethod.cpp example file.


@warning The implementation heavily relies on implicit operators with many Eigen
based small matrix constructions, which has a huge overhead in Debug mode.
Please consider to build the examples in Release
(*e.g.* `CMAKE_BUILD_TYPE` variable) for high performance on large geometrical
objects.


\section sectVHMIntro The main algorithm

The algorithm consists in solving three linear systems
(see @cite Sharp:2019:VHM for details):
- Given vectors sources @f$ \phi @f$ at a mesh vertices, we first solve a vector
heat diffusion problem: Integrate the heat flow @f$ u @f$ such that
@f$\Delta^{\nabla} u = \frac{\partial u}{\partial t}@f$ using a single step
backward Euler step: @f$(Id - t\Delta^{\nabla}) u_t = \phi@f$. That step
diffuses vector directions correctly using Levi-Civita connection but not
vector magnitudes hence we then solve the two following (scalar) diffusion
systems:
  - @f$(Id - t\Delta) m_t = ||\phi||@f$
  - @f$(Id - t\Delta) \delta_t = 1_{\phi \neq 0}@f$
- To finally evaluate the vector field : @f$ X_t = \frac{u_t}{||u_t||}\frac{m_t}{\delta_t} @f$

The computation involves discrete differential operator definitions
(Connection Laplace and standard Laplace-Beltrami) as well as linear solvers
on sparse matrices. We do not go into the details of the
discretization, please have a look to the paper if interested.


\section sectVHM2 The interface

The class VectorsInHeat contains the implementation of the Vector
Heat method. It relies on the PolygonalCalculus class for the
differential operators (@ref modulePolygonalCalculus).

First, we need to instantiate the VectorsInHeat class from an
instance of  PolygonalCalculus:

@code
typedef PolygonalCalculus<SurfaceMesh<RealPoint,RealPoint>> Calculus;
Calculus aCalculus( mesh );
VectorsInHeat<Calculus> heat( aCalculus );
@endcode

Then, we can prefactorized the solvers for a given a timestep @f$
dt@f$:

@code
heat.init(dt);
@endcode

@note For a discussion on the timestep please refer to @cite Sharp:2019:VHM. For short,
the authors suggest a timestep in @f$ dt=m\cdot h^2@f$ for some constant @f$m@f$ and @f$h@f$
being the mean spacing between adjacent vertices.

Once prefactorized, we can add as many sources as we want using the method:
@code
heat.addSource( aVertexIndex, 3Dvector ) //the vector will be projected on the vertex tangent plane
heat.addSource( anotherVertexIndex, another3Dvector )
...
@endcode

@note the vertex index corresponds to  the indexing system of the
underlying SurfaceMesh instance.

The resulting interpolating vector field is obtained by:
@code
auto u = heat.compute();
@endcode

\section sectVHM3 Examples

From \ref exampleVectorHeatMethod.cpp code on a digital surface and a generic polygonal one.

Input   | Result | Multiple Inputs | Result
--|--|--|--
 @image html images/poly/VHM_1_source.png "" | @image html images/poly/VHM_1_source_solve.png "" | @image html images/poly/VHM_multiple_sources.png "" | @image html images/poly/VHM_multiple_sources_solve.png ""
 @image html images/poly/bimba-1source.png "" | @image html images/poly/bimba-1vf.png "" | @image html images/poly/bimba-nsources.png "" | @image html images/poly/bimba-nvf.png ""


*/

}
