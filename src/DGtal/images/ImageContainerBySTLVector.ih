/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageContainerBySTLVector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * @author Guillaume Damiand
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/06/15
 *
 * Implementation of inline methods defined in ImageContainerBySTLVector.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

template <typename Domain, typename T>
inline
ImageContainerBySTLVector<Domain, T>::
ImageContainerBySTLVector(const Point &aPointA, const Point &aPointB ) :
  myLowerBound(std::min(aPointA,aPointB)),
  myUpperBound(std::max(aPointA,aPointB))
{
  Point dec = myUpperBound - myLowerBound;
  Size ext = 1;
  for (Dimension k = 0;k <  Domain::dimension; k++)
    ext = ext* (dec[k] + 1);
  this->resize(ext);
}

template <typename Domain, typename T>
inline
ImageContainerBySTLVector<Domain, T>::~ImageContainerBySTLVector( )
{
}


template <typename Domain, typename T>
inline
T
ImageContainerBySTLVector<Domain, T>::operator()(const Point &aPoint) const
{
  return this->at( linearized( aPoint ) );

}

template <typename Domain, typename T>
inline
void
ImageContainerBySTLVector<Domain, T>::setValue(const Point &aPoint, const T &V)
{
  this->at( linearized( aPoint ) ) = V;
}

template <typename Domain, typename T>
inline
typename ImageContainerBySTLVector<Domain, T>::Vector
ImageContainerBySTLVector<Domain, T>::extent() const
{
  Vector one;
  for (Dimension i = 0; i < Domain::dimension; i++)
    one[i] = myUpperBound[i] - myLowerBound[i] + 1;

  return one;
}

///////////////////////////////////////////////////////////////////////////////
// libBoard export

template <typename D, typename V>
template<typename Colormap>
inline
void
DGtal::ImageContainerBySTLVector<D, V>::selfDraw(Board2D & board,
						 const V &minV,
						 const V &maxV ) const
{
  ASSERT(D::dimension == 2);

  Colormap colormap(minV, maxV);
  Color c;
  V val;
  D ldomain(myLowerBound, myUpperBound);

  for (typename D::ConstIterator it =  ldomain.begin();
       it != ldomain.end(); ++it)
  {
    val = this->operator()( (*it) );
    c = colormap( val );
    board.setFillColorRGBi( c.red(), c.green(), c.blue());
    board.drawRectangle( NumberTraits<typename D::Integer>::
			 castToInt64_t((*it)[0]) - 0.5, 
			 NumberTraits<typename D::Integer>::
			 castToInt64_t((*it)[1]) + 0.5, 1, 1);
  }
}
//------------------------------------------------------------------------------
template <typename D, typename V>
inline
DGtal::DrawableWithBoard2D*
DGtal::ImageContainerBySTLVector<D, V>::defaultStyle() const
{
  return new DefaultDrawStyle;
}
//------------------------------------------------------------------------------
template <typename D, typename V>
inline
std::string
DGtal::ImageContainerBySTLVector<D, V>::styleName() const
{
	return "ImageContainerBySTLVector";
}

///////////////////////////////////////////////////////////////////////////////
// Helper classes defined in the compilation unit (anonymous namespace)

namespace
{

  /**
   * Class template for linearization of the coordinates of a Point.
   * This class template is to be specialized for efficiency for dimensions 1,
   * 2 and 3 to prevent the use of a loop in these cases.
   *
   */
  template < typename Domain, int dimension, typename Size >
  struct linearizer
  {

    typedef typename Domain::Point Point;

    /**
     * Compute the linearized offset of a point in a vector container.
     *
     * @param aPoint A point
     * @param lowerBound The lower bound of the image domain.
     * @param upperBound The upper bound of the image domain.
     *
     * @return
     */
    static Size apply( const Point & aPoint,
        const Point & lowerBound,
        const Point & upperBound )
    {
      Size pos = aPoint[ 0 ] - lowerBound[ 0 ] ;
      Size multiplier = 1;
      for (typename Domain::Dimension k = 1 ; k < dimension ; ++k)
      {
        multiplier *= 1 + ( upperBound[ k-1  ] - lowerBound[ k-1 ] );
        pos += multiplier * ( aPoint[ k ] - lowerBound[ k ] );
      }
      return pos;
    }
  };

  /**
   * Specialization of the linearizer class for dimension 1.
   *
   */
  template < typename Domain, typename Size >
  struct linearizer< Domain, 1, Size >
  {
    typedef typename Domain::Point Point;

    static Size apply( const Point & aPoint,
        const Point & lowerBound,
        const Point & upperBound )
    {
      return aPoint[ 0 ] - lowerBound[ 0 ];
    }
  };

  /**
   * Specialization of the linearizer class for dimension 2.
   *
   */
  template < typename Domain, typename Size >
  struct linearizer< Domain, 2, Size >
  {
    typedef typename Domain::Point Point;

    static Size apply( const Point & aPoint,
        const Point & lowerBound,
        const Point & upperBound )
    {
      Size multiplier = 1 + upperBound[ 0 ] - lowerBound[ 0 ];
      return ( aPoint[ 0 ] - lowerBound[ 0 ] ) + multiplier * (aPoint[ 1 ] - lowerBound[ 1 ] );
    }
  };

  /**
   * Specialization of the linearizer class for dimension 3.
   *
   */
  template < typename Domain, typename Size >
  struct linearizer< Domain, 3, Size >
  {
    typedef typename Domain::Point Point;

    static Size apply( const Point & aPoint,
        const Point & lowerBound,
        const Point & upperBound )
    {
      Size res = aPoint[ 0 ] - lowerBound[ 0 ];
      Size multiplier = 1 + upperBound[ 0 ] - lowerBound[ 0 ];
      res += multiplier * ( aPoint[ 1 ] - lowerBound[ 1 ] );
      multiplier *= 1 + upperBound[ 1 ] - lowerBound[ 1 ];
      res += multiplier * ( aPoint[ 2 ] - lowerBound[ 2 ] );
      return res;
    }
  };
}



///////////////////////////////////////////////////////////////////////////////
// Internals - private :
template<typename Domain, typename T>
inline
typename ImageContainerBySTLVector<Domain, T>::Size
ImageContainerBySTLVector<Domain, T>::linearized(const Point &aPoint) const
{
  return linearizer<Domain, Point::dimension, Size >::apply( aPoint, myLowerBound, myUpperBound );
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TDomain, typename V>
inline
void
ImageContainerBySTLVector<TDomain, V>::selfDisplay ( std::ostream & out ) const
{
  out << "[Image - STLVector] size=" << this->size() << " valuetype=" << sizeof(V) << "bytes lower=" << myLowerBound << " upper=" << myUpperBound;
}

