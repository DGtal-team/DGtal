/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageContainerByITKImage.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * @author Pierre Gueth (\c pierre.gueth@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/10/23
 *
 * Implementation of inline methods defined in ImageContainerByITKImage.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

namespace DGtal
{
    template<typename TDomain, typename TValue>
    ImageContainerByITKImage<TDomain, TValue>::~ImageContainerByITKImage()
    {
    }

    template <typename TDomain, typename TValue>
    ImageContainerByITKImage<TDomain, TValue>::ImageContainerByITKImage(const ImageContainerByITKImage& other)
        : myITKImagePointer(ITKImage::New()), myDomain()
    {
        myITKImagePointer = other.getITKImagePointer();
        updateDomain();
    }

    template <typename TDomain, typename TValue>
    ImageContainerByITKImage<TDomain, TValue>::ImageContainerByITKImage(const TDomain& aDomain)
        : myITKImagePointer(ITKImage::New()), myDomain(aDomain)
    {
      typename ITKImage::IndexType start;
      typename ITKImage::SizeType size;

      const Point lowerBound = aDomain.lowerBound();
      const Point upperBound = aDomain.upperBound();
      const Point dec = upperBound-lowerBound;

      for (Dimension k = 0; k < dimension; k++)
      {
        start[k] = lowerBound[k];
        size[k]  = dec[k]+1;
      }

      const typename ITKImage::RegionType region(start,size);

      myITKImagePointer->SetRegions(region);
      myITKImagePointer->Allocate();
      myITKImagePointer->FillBuffer(0);
    }

    template <typename TDomain, typename TValue>
    ImageContainerByITKImage<TDomain, TValue>::ImageContainerByITKImage(const ITKImagePointer &aRef)
        :  myITKImagePointer(aRef)
    {
        updateDomain();
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Interface - public :

    template <typename TDomain, typename TValue>
    void
    ImageContainerByITKImage<TDomain, TValue>::updateDomain(const Point & inputDomainShift)
    {
        myDomainShift = inputDomainShift;
        const typename ITKImage::RegionType region = myITKImagePointer->GetLargestPossibleRegion();
        const typename ITKImage::IndexType start = region.GetIndex();
        const typename ITKImage::SizeType size = region.GetSize();

        Point lowerBound;
        Point upperBound;
        for (Dimension k = 0; k < dimension; k++)
        {
            lowerBound[k] = start[k]+myDomainShift[k];
            upperBound[k] = start[k]+size[k]+myDomainShift[k]-1;
        }

        myDomain = TDomain(lowerBound, upperBound);
    }

    /**
     * Get the value of an image at a given position.
     *
     * @param aPoint  position in the image.
     * @return the value at aPoint.
     */
    template <typename TDomain, typename TValue>
    inline
    TValue
    ImageContainerByITKImage<TDomain, TValue>::operator()(const Point &indexPoint) const
    {
      typename ITKImage::IndexType p;
      for (Dimension k = 0; k < dimension; k++)
        p[k] = indexPoint[k];
      return myITKImagePointer->GetPixel(p);
    }

    /**
     * Get the value of an image at a given position.
     *
     * @param aPoint  position in the image.
     * @return the value at aPoint.
     */
    template <typename TDomain, typename TValue>
    inline
    TValue
    ImageContainerByITKImage<TDomain, TValue>::operator()(const ConstIterator &it) const
    {
      return it.Get();
    }

    /**
     * Get the value of an image at a given position.
     *
     * @param aPoint  position in the image.
     * @return the value at aPoint.
     */
    template <typename TDomain, typename TValue>
    inline
    TValue
    ImageContainerByITKImage<TDomain, TValue>::operator()(const Iterator &it) const
    {
      return it.Get();
    }

    template <typename TDomain, typename TValue>
    inline
    DGtal::ImageContainerByITKImage<TDomain,TValue>&
    DGtal::ImageContainerByITKImage<TDomain,TValue>
    ::operator=(const ImageContainerByITKImage& other)
    {
      if (this != &other)
        {
          myITKImagePointer = other.myITKImagePointer;
          updateDomain();
        }
      return *this;
    }

    template <typename Domain, typename T>
    inline
    void
    ImageContainerByITKImage<Domain, T>::setValue(const Point &indexPoint, const T &V)
    {
      typename ITKImage::IndexType p;
      for (Dimension k = 0; k < dimension; k++)
        p[k] = indexPoint[k];
      myITKImagePointer->SetPixel(p, V);
    }

    template <typename Domain, typename T>
    inline
    void
    ImageContainerByITKImage<Domain, T>::setValue(Iterator &it, const T &V)
    {
      it.Set(V);
    }

    /**
     * Writes/Displays the object on an output stream.
     * @param out the output stream where the object is written.
     */
    template<typename TDomain, typename TValue>
    inline
    void
    ImageContainerByITKImage<TDomain, TValue>::selfDisplay ( std::ostream & out ) const
    {
      typename ITKImage::RegionType region = myITKImagePointer->GetLargestPossibleRegion();

      out << "[ImageContainerByITKImage] valuetype=" << sizeof(TValue) << "bytes "
          << "domain=" << this->domain() << " "
          << "domainShift=" << this->getDomainShift() << " "
          << "refcount=" << myITKImagePointer->GetReferenceCount() << " "
          << "region=" << region.GetIndex() << "/" << region.GetSize();
    }

    // ----------------- DomainPoint to/from IndexPoint interface -------------
    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::Point
    ImageContainerByITKImage<TDomain, TValue>::getDomainPointFromIndex ( const Point & indexPoint ) const
    {
      return indexPoint + myDomainShift;
    }

    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::Point
    ImageContainerByITKImage<TDomain, TValue>::getIndexFromDomainPoint ( const Point &  domainPoint ) const
    {
      return domainPoint - myDomainShift;
    }

    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::Point
    ImageContainerByITKImage<TDomain, TValue>::getDomainPointFromItkIndex (
          const typename ITKImage::IndexType &itkIndexPoint) const
    {
      Point dgtal_domain_point;
      for (Dimension k = 0; k < dimension; k++)
        dgtal_domain_point[k] = itkIndexPoint[k] + myDomainShift[k];

      return dgtal_domain_point;
    }


    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::ITKImage::IndexType
    ImageContainerByITKImage<TDomain, TValue>::getItkIndexFromDomainPoint(
        const Point &domainPoint) const
    {
      typename ITKImage::IndexType itk_index;
      for (Dimension k = 0; k < dimension; k++)
        itk_index[k] = domainPoint[k] - myDomainShift[k];

      return itk_index;
    }

    // ------------------------- PhysicalPoint interface ----------------------
    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::PhysicalPoint
    ImageContainerByITKImage<TDomain, TValue>::getPhysicalPointFromIndex(const Point &indexPoint) const
    {
      // Transform input Point to itk Index
      typename ITKImage::IndexType itk_index;
      for (Dimension k = 0; k < dimension; k++)
        itk_index[k] = indexPoint[k];

      // ITK performs the transform between index and physical spaces.
      const typename ITKImage::PointType itk_point =
        myITKImagePointer->template TransformIndexToPhysicalPoint<typename RealPoint::Component>(itk_index);

      // Transform itk physical point to dgtal
      PhysicalPoint dgtal_real_point;
      for (Dimension k = 0; k < dimension; k++)
        dgtal_real_point[k] = itk_point[k];

      return dgtal_real_point;
    }

    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::Point
    ImageContainerByITKImage<TDomain, TValue>::getIndexFromPhysicalPoint(const PhysicalPoint &physicalPoint) const
    {
      // Transform input dgtal point to itk point (real points)
      typename ITKImage::PointType itk_point;
      for (Dimension k = 0; k < dimension; k++)
        itk_point[k] = physicalPoint[k];

      // ITK performs the transform between index and physical spaces.
      const typename ITKImage::IndexType itk_index =
        myITKImagePointer->TransformPhysicalPointToIndex(itk_point);

      // Transform itk index to dgtal index
      Point dgtal_index;
      for (Dimension k = 0; k < dimension; k++)
        dgtal_index[k] = itk_index[k];

      return dgtal_index;
    }
    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::PhysicalPoint
    ImageContainerByITKImage<TDomain, TValue>::getLowerBoundAsPhysicalPoint() const
    {
      return getPhysicalPointFromIndex(getIndexFromDomainPoint(myDomain.lowerBound()));
    }

    template<typename TDomain, typename TValue>
    inline
    typename ImageContainerByITKImage<TDomain, TValue>::PhysicalPoint
    ImageContainerByITKImage<TDomain, TValue>::getUpperBoundAsPhysicalPoint() const
    {
      return getPhysicalPointFromIndex(getIndexFromDomainPoint(myDomain.upperBound()));
    }

  ///////////////////////////////////////////////////////////////////////////////
  // Implementation of inline functions                                        //

  template<typename TDomain, typename TValue>
  inline
  std::ostream&
  operator<< ( std::ostream & out,
      const ImageContainerByITKImage<TDomain, TValue> & object )
  {
    object.selfDisplay( out );
    return out;
  }
}
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


