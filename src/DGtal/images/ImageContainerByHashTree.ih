/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageContainerByHashTree.ih
 * @author Nicolas Silva (\c nicolas.silva@insa-lyon.fr )
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/09/02
 *
 * Implementation of inline methods defined in ImageContainerByHashTree.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

#include <cmath>
#include <assert.h>
#include <list>
#include <stdlib.h>

#include <sstream>
#include <iostream>


using namespace std;
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------
namespace DGtal
{

  // N is number of children per node.
#define N POW<2,dim>::VALUE

  // ---------------------------------------------------------------------
  // constructor
  // ---------------------------------------------------------------------

  template < typename Domain, typename Value, typename HashKey>
  experimental::ImageContainerByHashTree<Domain, Value, HashKey>::ImageContainerByHashTree ( const unsigned int hashKeySize,
      const unsigned int depth,
      const Value defaultValue )
      : myKeySize ( hashKeySize )
  {

    //Consistency check of the hashKeysize
    ASSERT ( hashKeySize <= sizeof ( HashKey ) *8 );

    myOrigin = Point::zero;
    myPreComputedIntermediateMask = ~ ( static_cast<HashKey> ( ~0 ) << myKeySize );

    unsigned int acceptedDepth = ( ( sizeof ( HashKey ) * 8 - 1 ) / dim );
    if ( depth > acceptedDepth )
    {
      trace.error() << "ImageContainerByHashTree::Constructor: error !" << endl;
      trace.error() << "requested depth to hight for the key type" << endl;
      trace.error() << "accepted: " << acceptedDepth << " Requested: " << depth << endl;

      setDepth ( acceptedDepth );
    }
    else
      setDepth ( depth );


    //init the array
    myArraySize = 1 << myKeySize;
    myData = new Node*[myArraySize];
    for ( unsigned i = 0; i < myArraySize; ++i )
      myData[i] = 0;

    addNode ( defaultValue, ROOT_KEY );
  }


  template < typename Domain, typename Value, typename HashKey>
  experimental::ImageContainerByHashTree<Domain, Value, HashKey>::ImageContainerByHashTree ( const unsigned int hashKeySize,
      const Point & p1,
      const Point & p2,
      const Value defaultValue )
      : myKeySize ( hashKeySize ), myOrigin ( p1 )
  {
    //Consistency check of the hashKeysize
    ASSERT ( hashKeySize <= sizeof ( HashKey ) *8 );

    myPreComputedIntermediateMask = ~ ( static_cast<HashKey> ( ~0 ) << myKeySize );

    int maxSize = 0;
    for ( unsigned int i = 0; i < dim; ++i )
      if ( maxSize < p1[i] - p2[i] )
        maxSize = p1[i] - p2[i];
    unsigned int depth = ceil ( log ( (double) maxSize ) / log((double) 2.0) );

    unsigned int  acceptedDepth = ( ( sizeof ( HashKey ) * 8 - 1 ) / dim );
    if ( depth > acceptedDepth )
    {
      trace.error() << "ImageContainerByHashTree::Constructor: error ! requested depth to hight for the key type" << endl;
      trace.error() << "accepted: " << acceptedDepth << " Requested: " << depth << endl;
      setDepth ( acceptedDepth );
    }
    else
      setDepth ( depth );

    //init the array
    myArraySize = 1 << hashKeySize;
    myData = new Node*[myArraySize];
    for ( unsigned int i = 0; i < myArraySize; ++i )
      myData[i] = 0;
    //add the default value
    addNode ( defaultValue, ROOT_KEY );
  }



  // ---------------------------------------------------------------------
  // access methods
  // ---------------------------------------------------------------------

  template < typename Domain, typename Value, typename HashKey>
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::setValue ( const Point& aPoint, const Value value )
  {
    setValue ( getKey ( aPoint ), value );
  }


  template < typename Domain, typename Value, typename HashKey>
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::setValue ( const HashKey key, const Value value )
  {
    HashKey brothers[N-1];

    bool broValue = ( key != static_cast<HashKey> ( 1 ) );
    myMorton.brotherKeys ( key, brothers );
    for ( unsigned int i = 0; i < N - 1; ++ i )
    {
      Node* n = getNode ( brothers[i] );
      if ( ! ( n && ( n->getObject() == value ) ) )
      {
        broValue = false;
        break;
      }
    }

    if ( broValue )
    {
      setValue ( myMorton.parentKey ( key ), value );
      return;
    }

    // if the key already exists
    Node* n = getNode ( key );
    if ( n )
    {
      n->getObject() = value;
      return;
    }

    //if there's a leaf above the requested node
    HashKey iterKey = key;
    std::list< HashKey > nodeList;
    while ( iterKey != 0 )
    {
      //	cerr << "while(iter)..." << endl;
      n = getNode ( iterKey );
      if ( n )
      {
        Value tempVal = n->getObject();
        if ( tempVal == value )
          return;
        removeNode ( iterKey );
        for ( typename std::list< HashKey >::iterator  it = nodeList.begin();
            it != nodeList.end();
            it++ )
        {
          //	cerr << "adding a node ("<< bits::bitString(*it, 8)<<")" << endl;
          addNode ( tempVal, *it );
        }
        addNode ( value, key );
        //cerr << "return " << endl;
        return;
      }
      else
      {
        //cerr << " + " << endl;
        HashKey brothersH[N-1];
        myMorton.brotherKeys ( iterKey, brothersH );
        for ( unsigned int i = 0; i < N - 1; ++i )
        {
          nodeList.push_front ( brothersH[i] );
        }
      }
      iterKey >>= dim;
    }
    addNode ( value, key );
    unsigned int nbRecur = myTreeDepth - getKeyDepth ( key ) + 1;
    HashKey children[N];
    myMorton.childrenKeys ( key, children );
    for ( unsigned int i = 0; i < N; ++i )
      recursiveRemoveNode ( children[i], nbRecur );

    return;

  }

  template < typename Domain, typename Value, typename HashKey  >
  Value experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::operator() ( const HashKey key ) const
  {
    return get ( key );
  }
  template < typename Domain, typename Value, typename HashKey  >
  Value experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::operator() ( const Point &aPoint ) const
  {
    return get ( aPoint );
  }

  template < typename Domain, typename Value, typename HashKey >
  Value experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::get ( const HashKey key ) const
  {

    HashKey iterKey = key;
    // node above the requested node
    while ( iterKey != 0 )
    {
      Node* n = getNode ( iterKey );
      if ( n )
        return n->getObject();
      iterKey >>= dim;
    }
    //if the node is deeper than the one requested
    return blendChildren ( key );
  }


  template < typename Domain, typename Value, typename HashKey >
  Value experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::reverseGet ( const HashKey key ) const
  {

    HashKey iterKey = key;
    // node above the requested node
    HashKey limit = myDepthMask << 1;
    while ( iterKey < limit )
    {
      Node* n = getNode ( iterKey );
      if ( n )
        return blendChildren ( key );
      iterKey <<= dim;
    }
    iterKey = key;
    while ( iterKey != 0 )
    {
      Node* n = getNode ( iterKey );
      if ( n )
        return n->getObject();
      iterKey >>= dim;
    }
    return 0;
  }


  template < typename Domain, typename Value, typename HashKey>
  Value
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::get ( const Point & aPoint ) const
  {
    return get ( getKey ( aPoint ) );
  }

  //Deprecated
  template < typename Domain, typename Value, typename HashKey >
  Value
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::upwardGet ( const HashKey key ) const
  {
    //cerr << "ImageContainerByHashTree::upWardGet" << endl;
    HashKey aKey = key;

    while ( aKey )
    {
      HashKey key2 = getIntermediateKey ( aKey );
      Node* iter = myData[key2];

      while ( iter != 0 )
      {
        if ( iter->getKey() == aKey )
          return iter->getObject();
        iter = iter->getNext();
      }
      aKey >>= dim; // transorm the key to search in an upper level
    }
  }

  template < typename Domain, typename Value, typename HashKey  >
  HashKey
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getKey ( const Point & aPoint ) const
  {
    HashKey result = 0;
    Point currentPos = aPoint - myOrigin;

    myMorton.interleaveBits ( currentPos, result );
    // by convention, the root node has the key 0..01
    // it makes it easy to determine the depth of a node by it's key (looking
    // at the position of the most significant bit that is equal to 1)
    result |= myDepthMask;

    return result;
  }

  template < typename Domain, typename Value, typename HashKey  >
  HashKey
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getIntermediateKey ( HashKey key ) const
  {
    return ( key & myPreComputedIntermediateMask );
  }


  template < typename Domain, typename Value, typename HashKey  >
  bool
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::Iterator::next()
  {
    if ( myNode )
    {
      myNode = myNode->getNext();
      if ( myNode )
      {
        return true;
      }
      else
      {
        do
        {
          myNode = myContainerData[++myCurrentCell];
          if ( myCurrentCell >= myArraySize )
            return false;
        }
        while ( !myNode );
        return true;
      }
    }
    return false;
  }

  // ---------------------------------------------------------------------
  //
  // ---------------------------------------------------------------------

  template < typename Domain, typename Value, typename HashKey  >
  bool
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::removeNode ( HashKey key )
  {
    HashKey key2 = getIntermediateKey ( key );
    Node* iter = myData[key2];
    // if the node is the first in the list we have to modify the pointer stored in myData
    if ( iter && ( iter->getKey() == key ) )
    {
      myData[key2] = iter->getNext();
      delete iter;
      return true;
    }
    while ( iter )
    {
      Node* next = iter->getNext();
      if ( next )
      {
        if ( next->getKey() == key )
        {
          iter->setNext ( next->getNext() );
          delete next;
          return true;
        }
      }
      iter = iter->getNext();
    }
    return false;
  }
  
  template < typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::recursiveRemoveNode ( HashKey key, unsigned int nbRecursions )
  {
    if ( removeNode ( key ) )
      return;
    if ( --nbRecursions > 0 )
    {
      HashKey children[N];
      myMorton.childrenKeys ( key, children );
      for ( unsigned int i = 0; i < N; ++i )
      {
	recursiveRemoveNode ( children[i], nbRecursions );
      }
    }
  }



  // ---------------------------------------------------------------------
  //
  // ---------------------------------------------------------------------

  template < typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::setDepth ( unsigned int depth )
  {
    myTreeDepth = depth;
    mySpanSize = 1 << depth;
    //precompute the mask
    myDepthMask = static_cast<HashKey> ( 1 ) << dim * depth;
  }


  template < typename Domain, typename Value, typename HashKey  >
  unsigned int
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getKeyDepth ( HashKey key ) const
  {
    for ( int i = ( sizeof ( HashKey ) << 3 ) - 1; i >= 0; --i )
      if ( key & ( static_cast<HashKey> ( 1 ) << i ) )
      {
        return ( i ) / dim;
      }
    return 0;
  }


  template < typename Domain, typename Value, typename HashKey  >
  int*
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getCoordinatesFromKey ( HashKey key ) const
  {
    //remove the first bit equal 1
    for ( int i = ( sizeof ( HashKey ) << 3 ) - 1; i >= 0; --i )
    {
      if ( key & Bits::mask<HashKey> ( i ) )
      {
        key &= ~Bits::mask<HashKey> ( i );
        break;
      }
    }
    int* coordinates = new int[dim];
    //deinterleave the bits
    for ( unsigned int i = 0; i < dim; ++i )
    {
      coordinates[i] = 0;
      for ( unsigned int bitPos = 0; bitPos < ( sizeof ( HashKey ) << 3 ) / dim; ++bitPos )
      {
	if ( key & Bits::mask ( bitPos*dim + i ) )
        {
          coordinates[i] |= Bits::mask<HashKey> ( bitPos );
        }
      }
    }
    return coordinates;
  }


  template < typename Domain, typename Value, typename HashKey  >
  bool
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::isKeyValid ( HashKey key ) const
  {
    if ( !key )
      return false;
    if ( getKeyDepth ( key ) > myTreeDepth )
      return false;

    int i = ( sizeof ( HashKey ) << 3 ) - 1;
    for ( ; i >= 0; --i )
      if ( key & ( static_cast<HashKey> ( 1 ) << i ) )
        break;

    if ( i % dim )
    {
      return false;
    }

    return true;
  }


  // ---------------------------------------------------------------------
  // Debug
  // ---------------------------------------------------------------------
  template <typename Domain, typename Value , typename HashKey >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::printState ( ostream& out, bool displayKeys ) const
  {
    out << "ImageContainerByHashTree::printState" << endl;
    out << "depth: " << myTreeDepth << " (" << Bits::bitString ( myDepthMask ) << ")" << endl;
    out << "dim: " << dim << "N: " << N << endl;
    printTree ( ROOT_KEY, out, displayKeys );
  }

  template <typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::printTree ( HashKey key, ostream& out, bool displayKeys ) const
  {
    unsigned int level = getKeyDepth ( key );
    for ( unsigned int i = 0; i < level; ++i )
      out << "  ";
    Node* n = getNode ( key );
    if ( n )
    {
      out << " < " << n->getObject() << " > ";
      if ( displayKeys )
        out << Bits::bitString ( key, 8 );
      out << endl;
    }
    else
    {
      out << " < x > ";
      if ( displayKeys )
        out << Bits::bitString ( key, 8 );
      out << endl;
    }

    if ( level < myTreeDepth )
    {
      HashKey children[N];
      myMorton.childrenKeys ( key, children );
      for ( unsigned int i = 0; i < N; ++i )
        printTree ( children[i], out, displayKeys );
    }
  }

  template <typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::printInternalState ( ostream& out, unsigned int nbBits ) const
  {
    out << "ImageContainerByHashTree::printInternalState ----------------------------------" << endl;
    out << "| <template> dim = " << dim << " N = " << N << endl;
    out << "| tree depth = " << myTreeDepth << " mask = " << Bits::bitString ( myDepthMask ) << endl;

    for ( unsigned int i = 0; i < ( 1 << myKeySize ); ++i )
    {
      out << "| " << Bits::bitString ( i, myKeySize ) << " [";
      if ( myData[i] )
      {
        out << "-]->(";
        if ( nbBits )
          out << Bits::bitString ( myData[i]->getKey(), nbBits ) << ":";
        out << myData[i]->getObject() << ")";
        Node* iter = myData[i]->getNext();
        while ( iter )
        {
          out << "->(";
          if ( nbBits )
            out << Bits::bitString ( myData[i]->getKey(), nbBits ) << ":";
          out << iter->getObject() << ")";
          iter = iter->getNext();
        }
        out << endl;
      }
      else
      {
        cout << "x]" << endl;
      }
    }

    out << "| image size: " << getSpanSize() << "^" << dim << " (" << std::pow ( getSpanSize(), dim ) *sizeof ( Value ) << " bytes)" << endl;
    out << "| " << getNbNodes() << " nodes - Empty lists: " << getNbEmptyLists() << " (" << getNbEmptyLists() *sizeof ( Node* ) << " bytes)" << endl;
    out << "| Average collisions: " << getAverageCollisions() << " - Max collisions " << getMaxCollisions() << endl;
    out << "----------------------------------------------------------------" << endl;
  }


  template <typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::printInfo ( ostream& out ) const
  {
    unsigned int nbNodes = getNbNodes();
    unsigned int totalSize = sizeof ( *this ) + ( 1 << myKeySize ) * sizeof ( Node* ) + nbNodes * sizeof ( Node );

    out << "[ImageContainerByHashTree]:  Dimension=" << ( int ) dim << ", HashKey size="
    << myKeySize << ", Depth=" << myTreeDepth << ", image size=" << getSpanSize()
    << "^" << ( int ) dim << " (" << std::pow ( ( double ) getSpanSize(), ( double ) dim ) *sizeof ( Value )
    << " bytes)" << ", " << nbNodes << " nodes" << ", Empty lists=" << getNbEmptyLists()
    << " (" << getNbEmptyLists() *sizeof ( Node* ) << " bytes)" << ", Average collisions=" << getAverageCollisions()
    << ", Max collisions " << getMaxCollisions()
    << ", total memory usage=" << totalSize << " bytes" << endl;
  }



  template <typename Domain, typename Value, typename HashKey  >
  unsigned int
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getNbNodes ( unsigned int intermediateKey ) const
  {
    if ( !myData[intermediateKey] )
    {
      return 0;
    }
    else
    {
      unsigned int count = 1;
      Node* n = myData[intermediateKey]->getNext();
      while ( n )
      {
        ++count;
        n = n->getNext();
      }
      return count;
    }
  }



  template <typename Domain, typename Value, typename HashKey  >
  unsigned int
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getNbNodes() const
  {
    unsigned int count = 0;
    unsigned int arraySize = 1 << myKeySize;
    for ( unsigned int i = 0; i < arraySize; ++i )
    {
      count += getNbNodes ( i );
    }
    return count;
  }


  template <typename Domain, typename Value, typename HashKey  >
  unsigned int
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getNbEmptyLists() const
  {
    unsigned int count = 0;
    unsigned int arraySize =  1 << myKeySize;
    for ( unsigned int i = 0; i < arraySize; ++i )
    {
      if ( !myData[i] )
        count++;
    }
    return count;
  }


  template<typename Domain, typename Value, typename HashKey  >
  double
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::getAverageCollisions() const
  {
    double count = 0;
    double nbLists = 0;
    unsigned int arraySize = 1 << myKeySize;
    for ( unsigned int i = 0; i < arraySize; ++i )
    {
      if ( myData[i] )
      {
        count += getNbNodes ( i ) - 1;
        nbLists++;
      }
    }
    if ( nbLists == 0 )
    {
      trace.error() << "ImageContainerByHashTree::getAverageCollision() - error" << endl
      << "the container is empty !" << endl;
      return 0;
    }
    return count / nbLists;
  }



  template <typename Domain, typename Value, typename HashKey  >
  unsigned int
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::getMaxCollisions() const
  {
    unsigned int count = 0;
    unsigned int arraySize = 1 << myKeySize;
    for ( unsigned int i = 0; i < arraySize; ++i )
    {
      if ( myData[i] )
      {
        unsigned int collision = getNbNodes ( i ) - 1;
        if ( collision > count )
        {
          count = collision;
        }
      }
    }
    return count;
  }




  /**
   *  If you read these line, it means that i haven't got the time to finish these two methods
   * (I like the tragic sound of it)
   *
   * any way this shouldn't take long to implement, the stuff you need to persist is:
   *     	- the depth of the tree
   * 		- it's dimension
   * 		- the position of the origin (Point myOrigin variable)
   * 		- every existing key associated to its key (use the builtin iterator)
   *
   *	The tricky stuff lies in how to serialize
   * 		- the values (typename TValue),
   * 		- the keys (ok easier but still can be of 8, 16, 32 and more likely 64 bit type)
   * 		- the Point (may be in 1D,2D...etc.)
   *
   * have fun
   * Nicolas
   */

  template <typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::save ( ostream& out )
  {
    assert ( false && "Not implemented yet" );
  }

  template <typename Domain, typename Value, typename HashKey  >
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::load ( istream& in )
  {
    assert ( false && "Not implemented yet" );
  }



//------------------------------------------------------------------------------
  template <typename Domain, typename Value, typename HashKey  >
  inline
  DGtal::DrawableWithBoard2D*
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::defaultStyle() const
  {
    return new DefaultDrawStyle;
  }
//------------------------------------------------------------------------------
  template <typename Domain, typename Value, typename HashKey  >
  inline
  std::string
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::styleName() const
  {
    return "ImageContainerByHashTree";
  }


  template <typename Domain, typename Value, typename HashKey  >
  template <typename C>
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::selfDraw ( Board2D & board, const Value &minV, const Value &maxV ) const
  {
    ASSERT ( dim == 2 );

    C colormap ( minV, maxV );

    double p[2];
    double len;

    p[0] = myOrigin[0];
    p[1] = myOrigin[1] + getSpanSize();

    len = getSpanSize();

    recursiveDraw<C> ( ROOT_KEY, p, len, board, colormap );
  }

  template <typename Domain, typename Value, typename HashKey  >
  template <typename C>
  void
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::recursiveDraw ( HashKey key,
      const double p[2],
      const double len,
      LibBoard::Board & board,
      const C& cmap ) const
  {
    ASSERT ( dim == 2 );
    Node* n = getNode ( key );
    double np[2], nlen;
    if ( n )
    {
      Color c;
      c = cmap ( n->getObject() );
      board.setFillColorRGBi ( c.red(), c.green(), c.blue() );

      board.drawRectangle ( p[0], p[1], len, len );
    }
    else
    {
      HashKey children[4];
      myMorton.childrenKeys ( key, children );

      nlen = len / 2.0;

      np[0] = p[0];
      np[1] = p[1] - nlen;
      recursiveDraw ( children[0], np, nlen, board, cmap );

      np[0] = p[0] + nlen;
      np[1] = p[1] - nlen;
      recursiveDraw ( children[1], np, nlen, board, cmap );

      np[0] = p[0];
      np[1] = p[1];
      recursiveDraw ( children[2], np, nlen, board, cmap );

      np[0] = p[0] + nlen;
      np[1] = p[1];
      recursiveDraw ( children[3], np, nlen, board, cmap );
    }
  }



  template <typename Domain, typename Value, typename HashKey  >
  Value
  experimental::ImageContainerByHashTree<Domain, Value, HashKey  >::blendChildren ( HashKey key ) const
  {
    Node* n = getNode ( key );
    if ( n )
    {
      return n->getObject();
    }
    else
    {
      HashKey children[N];
      myMorton.childrenKeys ( key, children );
      float result = 0;
      for ( unsigned int i = 0; i < N; ++i )
      {
	result += blendChildren ( children[i] );
      }
      return static_cast<Value> ( result / N );
    }
  }


  template <typename Domain, typename Value, typename HashKey  >
  bool
  experimental::ImageContainerByHashTree<Domain, Value, HashKey >::checkIntegrity ( HashKey key, bool leafAbove ) const
  {
    trace.info() << "Checking key=" << key << endl;
    if ( !isKeyValid ( key ) )
    {
      trace.error() << "checkIntegrity->invalid key " << Bits::bitString ( key );
      trace.info() << endl;
      ASSERT ( 1 == 0 );
    }

    Node* n = getNode ( key );

    if ( ( n != 0 ) && ( leafAbove ) )
    {
      trace.error() << "ImageContainerByHashTree::checkIntegrity - error:" << endl
      << "at key " << Bits::bitString ( key ) << endl
      << "several leafs found" << endl;
      return false;
    }

    if ( getKeyDepth ( key ) >= myTreeDepth )
    {
      if ( leafAbove || n )
      {
        return true;
      }
      else
      {
        trace.error() << "ImageContainerByHashTree::checkIntegrity - error:" << endl
        << "at key " << Bits::bitString ( key ) << endl
        << "no leaf found" << endl;
        return false;
      }
    }

    HashKey children[N];
    myMorton.childrenKeys ( key, children );
    bool returnValue = true;
    for ( unsigned int i = 0; i < N; ++i )
      returnValue &= checkIntegrity ( children[i], ( n || leafAbove ) );
    return returnValue;
  }




  ///////////////////////////////////////////////////////////////////////////////
  // Interface - public :

  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  template < typename Domain, typename Value, typename HashKey>
  inline
  void
  experimental::ImageContainerByHashTree< Domain, Value, HashKey>::selfDisplay ( std::ostream & out )
  {
    printInfo ( out );
  }

} // namespace DGtal
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


