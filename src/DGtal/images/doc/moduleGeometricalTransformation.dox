/**
 * @file
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2014/07/17
 *
 * @brief Doccumentation file for geometrical transformations in DGtal.
 *
 * This file is part of the DGtal library.
 */

/*
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page moduleGeometricTransform Geometric transformations
@writers Kacper Pluta
@date 2014/07/17

[TOC]

\section sectmoduleGeometricTransform1 Overview

This module gather classes which represent geometric transformations.

\section subsecRigid2D Rigid transformations

Rigid transformations in \f$\mathbb{R}^n\f$ are isometries which
preserve in particular the distance and angles between every pair and
triples of points respectively. The set of rigid transformations
includes rotations, translations and reflections(excluded from the
image processing applications from practical reasons), or combinations
of those. Also an inverse of rigid transformation is rigid
transformation therefore rigid transformation are bijective.

In general rigid transformation can be written like:

\f[
\begin{array}{l l}
    \mathcal{U}: \mathbb{R}^n & \to \mathbb{R}^n \\
    \mathbf{x} & \mapsto \mathbf{R . x} + \mathbf{t}
\end{array}
\f]

where \f$\textbf{R}\f$ denotes rotation matrix and \f$\textbf{t}\f$
translation vector. Where discrete rigid transformations can be
defined as follows:

\f[
  U = \mathcal{D} \circ \mathcal{U}_{| \mathbb{Z}^n}
\f]

\f[
  T = \mathcal{D} \circ \mathcal{T}_{| \mathbb{Z}^n} = \mathcal{D} \circ (\mathcal{U}^{-1})_{| \mathbb{Z}^n}
\f]

where \f$\mathcal{D}\f$ is a standard rounding function (another
interpolation method are for this moment not implemented in DGtal).
Unfortunately discrete rigid transformations are in general nighter
isometries nor bijective.  From above difficulties we can consider two
models of discrete rigid transformations: forward - Lagrangian and
backward - Eulerian.  First of them consists of computing \f$U\f$ and
second \f$T\f$ but from the perspective of transformed space therefore
all its points have defined value, which is not always true for the
forward model.

\subsection secRigid2D Rigid transformations in 2D discrete space
DGtal contains both models, and below snippets of code present how to
apply them for a 2D image. In order to illustrate how to use discrete
rigid transformation we are going to:

a) add those includes: 
@snippet images/exampleRigidtransformation2d.cpp include

b) define these types:
@snippet images/exampleRigidtransformation2d.cpp def

where DomainRigidTransformation2D is a helper functor which returns
lower and upper bounds of transformed domain.

c) create transformation by providing information about origin, angle
in radians, and translation:


@snippet images/exampleRigidtransformation2d.cpp trans

d) if needed create a transformed domain eg:
@snippet images/exampleRigidtransformation2d.cpp init_domain_helper
@snippet images/exampleRigidtransformation2d.cpp domain

e1) apply rigid transformation to image with forward model:
@snippet images/exampleRigidtransformation2d.cpp forward

e2) or with backward which can be used with ConstImageAdapter or ImageAdapter:
@snippet images/exampleRigidtransformation2d.cpp backward

Below image presents result for froward model and image "Church.pgm"
\image html church_forward.jpg
\image latex church_forward.jpg

and for backward as well:
\image html church_backward.jpg
\image latex church_backward.jpg


\subsection secRigid3D Rigid transformations in 3D discrete space
Discrete rigid transformations in 3D were implemented thanks to
Rodrigues' rotation formula @cite belongieRot which allow defining
rotation around any arbitrary axis with exception for
\f$(0,0,0)\f$. Usage is analogous to the 2D implementation and can be
illustrated in the following steps:

a) add those includes: 
@snippet images/exampleRigidtransformation3d.cpp include

b) define these types:
@snippet images/exampleRigidtransformation3d.cpp def

where DomainRigidTransformation3D is a helper functor which returns
lower and upper bounds of transformed domain.

c) create transformation by providing information about origin,
rotation axis (not need to be normalize), angle in radians, and
translation:

@snippet images/exampleRigidtransformation3d.cpp trans

d) if needed create a transformed domain eg:
@snippet images/exampleRigidtransformation3d.cpp init_domain_helper
@snippet images/exampleRigidtransformation3d.cpp domain

e1) apply rigid transformation to image with forward model:
@snippet images/exampleRigidtransformation3d.cpp forward

e2) or with backward which can be used with ConstImageAdapter or ImageAdapter:
@snippet images/exampleRigidtransformation3d.cpp backward

Below image presents result for froward model and image "cat10.vol"
\image html cat10_forward.jpg
\image latex cat10_forward.jpg

and for backward as well:
\image html cat10_backward.jpg
\image latex cat10_backward.jpg

*/
 }




/**
*  Example of 2D rigid transformation using forward and backward model.
   @see @ref moduleGeometricTransform
   \image html church_backward.jpg "Result for backward model" 
*  \example images/exampleRigidtransformation2d.cpp
**/


/**
*  Example of 3D rigid transformation using forward and backward model.
   @see @ref moduleGeometricTransform
   \image html cat10_backward.jpg "Result for backward model" 
*  \example images/exampleRigidtransformation3d.cpp
**/



