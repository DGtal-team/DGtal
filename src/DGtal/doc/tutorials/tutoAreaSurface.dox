/**
 * @file tutoAreaSurface.dox
 *
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page tutoAreaSurface   Tutorial: Surface area estimation
@author Jeremy Levallois


The objective of this tutorial is to perform some elementary
surface analysis of 3D objects. With this tutorial, you will
experiment the following DGtal features

- Build a 3D shape (parametric)

- Convert it to a Digital Shape (GaussDigitizer)

- Extract Digital border of a digital shape (LightImplicitDigitalSurface / DigitalSurface)
 
- Use an differential quantity estimator (IntegralInvariantCovarianceEstimator + a functor)

[TOC]

Please use the following template file for this tutorial: AreaSurfaceEstimation-template.cpp

@section tutosectIntroAreaSurface Introduction

When analyzing 3D border of a shape, the surface area plays an
important role for shape description. A way to estimate the area of a surface is to compute the difference between the normal of the shape and the normal of the digital point.
Given a shape @f$
\mathcal{X}@f$, the surface area function can be estimated with :
@f[ 
 \hat{AreaSurface (X)} = \sum_x ( \textbf{n_e}(x) . \textbf{n_s}(\hat{x}) )
@f]
where @f$ \textbf{n_e}(x) @f$ denotes the normal vector estimated at position @f$ x \in \mathcal{X} @f$,
@f$ \textbf{n_s}(\hat{x}) @f$ the normal vector of surface element (surfel) @f$ \hat{x}  \in Dig_h{\mathcal{X}} @f$, and @f$ . @f$ the dot product.


@section AS_tutosectLoadVol Import volumetric image an visualization 

Let start with shape construction. First of all, create a source
file with the following includes (or copy the AreaSurfaceEstimation-template.cpp
source file):

@snippet tutorial-examples/AreaSurfaceEstimation-template.cpp areaSurface-basicIncludes


1. Define a type (@e typedef)  for the shape you want to use
(Ball3D, ImplicitBall, ....)
2. Use the GaussDigitizer to convert the Euclidean shape to a digital one, with a given gridstep @f$ h @f$.


Once you have created the digital shape, you need to get the domain and create a KhalimskySpace (see Z3i::KSpace) from it.

At this point, you have a digital object created from an Euclidean one. Now, we want to extract the border of this digital object.


@section tutosecBorder Border extraction



3. First of all, have a look to the LightDigitalSurface and DigitalSurface class and
check the template type you have to specified to this class to create
an instance.

4. As you may have seen, we need a visitor to iterate over the border of the digital Surface. In order to use the best part of the following estimator, we will use a depth first visitor (see DepthFirstVisitor and GraphVisitorRange).

5. Thanks to the GraphVisitor, we can iterate over the digital surface.

@section tutosecEstimation Normal estimation


As discussed in the introduction, we will use a normal vector
estimator to compute the surface area of our object. We will use
IntegralInvarianceCovarianceEstimator (II) who, with the good functor
(can be found in IIGeometricFunctors namespace/file ). DGtal offers
also some other normal vector estimators, so feel free to use wich one
you want.

The main idea is to choose the functor you want
(IIGeometricFunctors::IINormalDirectionFunctor on this case) and use
the II estimator on all the digital surface:

- Initialize the functor
- Initialize the covariance estimator ( constructor(functor), attach(), setParams(), init() )
- Evaluate the estimator on all surfel of the border of the shape
- Compute for all surfel the dot product of the estimated euclidean normal vector (result of the estimator) and the surfel normal vector (see below)

To extract the surfel normal vector, we need to use some method from the KSpace (see KhalimskySpaceND for all methods avalaible):

- sOrthDir( surfel ) returns the orthogonal direction of a surfel.
- sDirectIncident( surfel, orthDir ) returns the direct incident surfel of a given surfel and a direction
- sKCoords( surfel ) returns a vector of coordinates (of KhalimskySpace)


6. Is the surface area estimation multigrid convergent ? As you can
see at the begining of the file, we set the gridstep @f$ h @f$ to
1. If you change this value @f$ h \le 1 @f$, how the estimation of the
surface area changes ?


@section areaSurfaceCCL Conclusion

You can check AreaSurfaceEstimation-final.cpp to get some answers to the above
mentioned questions.

Several optimizations can be developed. For example, instead of
evaluate for all surface element separately, we can estimate all
surfels in one call of eval(). This uses some optimization of II
estimator and can be see in overall computation time. Some others
normal vector estimators can be used, as
VoronoiCovarianceMeasureLocalEstimator.


*/


/**
 Example of tutorial 4: Surface area estimation
 @see @ref tutoAreaSurface
 \example tutorial-examples/AreaSurfaceEstimation-final.cpp
**/
}
