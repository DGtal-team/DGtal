/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file HyperRectDomain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * @author Guillaume Damiand
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in HyperRectDomain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/Color.h"
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain()
  : myLowerBound(Point::zero),
    myUpperBound(Point::zero),
    myPredicate( myLowerBound, myUpperBound ),
    myIteratorBegin(myLowerBound,
        myLowerBound,
        myUpperBound),
    myIteratorEnd(myUpperBound,
      myLowerBound,
      myUpperBound)
{ ++myIteratorEnd; }
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const Point &aPointA,
              const Point &aPointB ) :
    myLowerBound(std::min(aPointA, aPointB)),
    myUpperBound(std::max(aPointA, aPointB)),
    myPredicate( myLowerBound, myUpperBound ),
    myIteratorBegin(myLowerBound,
        myLowerBound,
        myUpperBound),
    myIteratorEnd(myUpperBound,
      myLowerBound,
      myUpperBound)
    
{ ++myIteratorEnd; }
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain
( const typename DGtal::HyperRectDomain<TSpace> &aDomain) :
    myLowerBound(aDomain.lowerBound()),
    myUpperBound(aDomain.upperBound()),
    myPredicate( myLowerBound, myUpperBound ),
    myIteratorBegin(myLowerBound,
        myLowerBound,
        myUpperBound),
    myIteratorEnd(myUpperBound,
      myLowerBound,
      myUpperBound)
{ ++myIteratorEnd; }
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::~HyperRectDomain()
{}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace> &
DGtal::HyperRectDomain<TSpace>::operator=
( const typename DGtal::HyperRectDomain<TSpace> & other )
{
  if ( this != &other )
  {
    myLowerBound = other.myLowerBound;
    myUpperBound = other.myUpperBound;
    myPredicate = other.myPredicate;    
    new(&myIteratorBegin) ConstIterator(myLowerBound,myLowerBound,myUpperBound);
    new(&myIteratorEnd) ConstIterator(myUpperBound,myLowerBound,myUpperBound);
    ++myIteratorEnd;
  }
  return *this;
}
//-----------------------------------------------------------------------------
/*
template<typename TSpace>
inline
std::size_t
DGtal::HyperRectDomain<TSpace>::extent() const
{
  return extent(myLowerBound, myUpperBound);
  }*/
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::lowerBound() const
{
  return myLowerBound;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isInside( const Point & p ) const
{
  return myPredicate( p );
  //LowerBound.isLower( p ) && myUpperBound.isUpper( p );
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Predicate &
DGtal::HyperRectDomain<TSpace>::predicate() const
{
  return myPredicate;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::upperBound() const
{
  return myUpperBound;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[HyperRectDomain] = [" << myLowerBound << "]x["
  << myUpperBound << "]";
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isValid() const
{
  return true;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::DrawableWithBoard2D*
DGtal::HyperRectDomain<TSpace>::defaultStyle( std::string mode ) const
{
  if ( ( mode == "" ) || ( mode == "Both" ) || ( mode == "Grid" ) ) 
    return new DefaultDrawStyleGrid;
  else // mode == "Paving"
    return new DefaultDrawStylePaving;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
std::string
DGtal::HyperRectDomain<TSpace>::styleName() const
{
  return "HyperRectDomain";
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDraw( Board2D & board ) const
{
  std::string mode = board.getMode( this->styleName() );
  ASSERT((mode=="" || mode=="Grid" || mode=="Paving") ||
   ("DGtal::HyperRectDomain<TSpace>::selfDraw: Unknown mode "+mode)=="");
  
  if ( ( mode == "" ) || ( mode == "Grid" ) )
    selfDrawAsGrid( board );
  else if ( mode == "Paving" )
    selfDrawAsPaving( board );
  // selfDrawAsGrid( board );
}
//-----------------------------------------------------------------------------



template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsGrid( Board2D & aboard) const
{
  ASSERT(TSpace::dimension == 2 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND");

  if (TSpace::dimension == 2)
  {
    for (double x = NumberTraits<Integer>::castToDouble(myLowerBound[0]); 
   x <=  NumberTraits<Integer>::castToDouble(myUpperBound[0]); x++)
      aboard.drawLine(x,
          NumberTraits<Integer>::castToDouble(myLowerBound[1]) -
          0.5,
          x, 
          NumberTraits<Integer>::castToDouble(myUpperBound[1]) +
          0.5);

    for (double y =  NumberTraits<Integer>::castToDouble(myLowerBound[1]);
   y <=  NumberTraits<Integer>::castToDouble(myUpperBound[1]); y++)
      aboard.drawLine(NumberTraits<Integer>::castToDouble(myLowerBound[0]) -
          0.5,
          y, 
          NumberTraits<Integer>::castToDouble(myUpperBound[0]) +
          0.5,
          y);

    for (double x =  NumberTraits<Integer>::castToDouble(myLowerBound[0]); 
   x <=  NumberTraits<Integer>::castToDouble(myUpperBound[0]); x++)
      for (double y =  NumberTraits<Integer>::castToDouble(myLowerBound[1]);
     y <=  NumberTraits<Integer>::castToDouble(myUpperBound[1]); y++)
        aboard.fillCircle(x, y, 0.1);
  }
}





template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawDisplay3D( Display3D & display ) const
{
  std::string mode = display.getMode( this->styleName() );
  ASSERT((mode=="" || mode=="Grid" || mode=="Paving"|| mode=="PavingPoints"|| mode=="PavingGrids" ||
    mode=="BoundingBox")||
   ("DGtal::HyperRectDomain<TSpace>::selfDraw: Unknown mode "+mode)=="");
  
  
  if (  mode == "BoundingBox"  ){
    display.createNewLineList();
    selfDrawAsBoundingBoxDisplay3D( display );
  }else if( ( mode == "" ) ||  (mode == "Grid")){
    display.createNewLineList();
    selfDrawAsGridDisplay3D( display );
  }
  else if ( mode == "Paving" ){
    display.createNewVoxelList(false);
    selfDrawAsPavingDisplay3D( display );

  } else if ( mode == "PavingPoints" ){
    display.createNewPointList();
    selfDrawAsPavingPointsDisplay3D( display );

  }else if ( mode == "PavingGrids" ){
    display.createNewLineList();
    display.createNewVoxelList(false);
    selfDrawAsGridDisplay3D( display );
    selfDrawAsPavingDisplay3D( display );
  }
  // selfDrawAsGrid( board );
}




template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsBoundingBoxDisplay3D( Display3D & display) const
{
  ASSERT(TSpace::dimension == 3 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND");
  DGtal::Color colDef(250,250,250,10);
  float shiftSize=0.01;
  if (TSpace::dimension == 3)
    {
      //Z upper face
      display.addQuad(myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize), myUpperBound[2]+(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize), myUpperBound[2]+(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize), myUpperBound[2]+(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize), myUpperBound[2]+(0.5+shiftSize),
         colDef);
      //Z lower face
      display.addQuad(myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize), myLowerBound[2]-(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize), myLowerBound[2]-(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize), myLowerBound[2]-(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize), myLowerBound[2]-(0.5+shiftSize),
         colDef);
      
      //Y upper face
      display.addQuad(myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         colDef);
      //Y lower face
      display.addQuad(myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         colDef);
      
      // X upper face
      display.addQuad(myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         myUpperBound[0]+(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),         
         colDef);
      
      //  X lower face
      display.addQuad(myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myUpperBound[1]+(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),         
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myLowerBound[2]-(0.5+shiftSize),
         myLowerBound[0]-(0.5+shiftSize), myLowerBound[1]-(0.5+shiftSize),myUpperBound[2]+(0.5+shiftSize),
         colDef);
      
    }  
}


template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsGridDisplay3D( Display3D & display) const
{
  ASSERT(TSpace::dimension == 3 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND");

  if (TSpace::dimension == 3)
  {
    // Face XY
    for (int64_t z = NumberTraits<Integer>::castToInt64_t(myLowerBound[2]); 
   z <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[2]); z++){
      for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
     x <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++){
  display.addLine(x, NumberTraits<Integer>::castToInt64_t(myLowerBound[1])-0.5,z,
           x, NumberTraits<Integer>::castToInt64_t(myUpperBound[1])+0.5,z,display.getLineColor() );
      }
      for (int64_t y =  NumberTraits<Integer>::castToInt64_t(myLowerBound[1]);
     y <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++){
  display.addLine(NumberTraits<Integer>::castToInt64_t(myLowerBound[0])-0.5,y ,z,
           NumberTraits<Integer>::castToInt64_t(myUpperBound[0])+0.5,y,z,  display.getLineColor());
      }
    }
    
    // Faces XZ
    for (int64_t y = NumberTraits<Integer>::castToInt64_t(myLowerBound[1]); 
   y <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++){
      for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
     x <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++){
  display.addLine(x, y ,NumberTraits<Integer>::castToInt64_t(myLowerBound[2])-0.5,
           x, y ,NumberTraits<Integer>::castToInt64_t(myLowerBound[2])+0.5,display.getLineColor());
      }
      for (int64_t z =  NumberTraits<Integer>::castToInt64_t(myLowerBound[2]);
     z <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[2]); z++){
  display.addLine(NumberTraits<Integer>::castToInt64_t(myLowerBound[0])-0.5,y ,z,
           NumberTraits<Integer>::castToInt64_t(myUpperBound[0])+0.5,y, z, display.getLineColor());
      }
    }
    

    // Faces YZ
    for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
   x <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++){
      
      for (int64_t y = NumberTraits<Integer>::castToInt64_t(myLowerBound[1]); 
     y <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++){
  display.addLine(x, y ,NumberTraits<Integer>::castToInt64_t(myLowerBound[2])-0.5,
           x, y ,NumberTraits<Integer>::castToInt64_t(myUpperBound[2])+0.5, display.getLineColor());
      }
      for (int64_t z =  NumberTraits<Integer>::castToInt64_t(myLowerBound[2]);
     z <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[2]); z++){
  display.addLine(x, NumberTraits<Integer>::castToInt64_t(myLowerBound[1])-0.5 ,z,
           x, NumberTraits<Integer>::castToInt64_t(myUpperBound[1])+0.5, z, display.getLineColor());
      }
    }
    
  }

}


template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsPavingPointsDisplay3D( Display3D & display) const
{
  ASSERT(TSpace::dimension == 3 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND");

  if (TSpace::dimension == 3)
  {
    // Face XY
    for (int64_t z = NumberTraits<Integer>::castToInt64_t(myLowerBound[2]); 
   z <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[2]); z++){
      for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
     x <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++){
      
  for (int64_t y =  NumberTraits<Integer>::castToInt64_t(myLowerBound[1]);
       y <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++){
    display.addPoint(x, y , z, DGtal::Color(255, 0 ,0));

  }
      }
    }
    
    
    
  }
}



template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsPavingDisplay3D( Display3D & display) const
{
  ASSERT(TSpace::dimension == 3 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND");
  

  if (TSpace::dimension == 3)
    {
    // Face XY
    for (int64_t z = NumberTraits<Integer>::castToInt64_t(myLowerBound[2]); 
   z <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[2]); z++){
      for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
     x <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++){
      
  for (int64_t y =  NumberTraits<Integer>::castToInt64_t(myLowerBound[1]);
       y <=  NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++){
    display.addVoxel(x, y , z, DGtal::Color(255, 255 ,255, 15),0.51);

  }
      }
    }
    

    
    }
}











//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsPaving( Board2D & aboard) const
{
  ASSERT(TSpace::dimension==2 || "selfDraw-NOT-YET-IMPLEMENTED-in-ND" );
  
  if (TSpace::dimension == 2)
  {
    for (int64_t x = NumberTraits<Integer>::castToInt64_t(myLowerBound[0]); 
   x <= NumberTraits<Integer>::castToInt64_t(myUpperBound[0]); x++)
      for (int64_t y = NumberTraits<Integer>::castToInt64_t(myLowerBound[1]); 
     y <= NumberTraits<Integer>::castToInt64_t(myUpperBound[1]); y++)
        aboard.drawRectangle(x - 0.5, y + 0.5, 1, 1);
  }
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
    const HyperRectDomain<TSpace> & object )
{
  object.selfDisplay ( out );
  return out;
}
///////////////////////////////////////////////////////////////////////////////


