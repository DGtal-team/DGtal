/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DomainPredicate.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/07/10
 *
 * Implementation of inline methods defined in DomainPredicate.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//------------------------------------------------------------------------------
template <typename TDomain>
inline
DGtal::DomainPredicate<TDomain>
::DomainPredicate( const Domain & aDomain )
  : myDomain( &aDomain )
{
}
//------------------------------------------------------------------------------
template <typename TDomain>
inline
DGtal::DomainPredicate<TDomain>
::DomainPredicate( const DomainPredicate & other )
  : myDomain( other.myDomain )
{
}
//------------------------------------------------------------------------------
template <typename TDomain>
inline
DGtal::DomainPredicate<TDomain>&
DGtal::DomainPredicate<TDomain>
::operator=( const DomainPredicate & other )
{
  if (this != &other)
    {
      myDomain = other.myDomain; 
    }
  return *this; 
}

//------------------------------------------------------------------------------
template <typename TDomain>
inline
const TDomain & 
DGtal::DomainPredicate<TDomain>
::domain() const
{
  return *myDomain;
}
//------------------------------------------------------------------------------
template <typename TDomain>
inline
bool
DGtal::DomainPredicate<TDomain>
::operator()( const Point & p ) const
{
  //  std::cerr << "DomainPred.operator(" << p << ")" << std::endl;
  return myDomain->isInside( p );
}
//------------------------------------------------------------------------------

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


