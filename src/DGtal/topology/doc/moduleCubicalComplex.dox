
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/**
   
@page moduleCubicalComplex  Cubical Complex

@writers Jacques-Olivier Lachaud

@since 0.9.1

Part of the \ref packageTopology.
  
This part of the manual describes how to represent and process
arbitrary cubical complexes. 

@note Collapse operation is a backport from <a
href="https://gforge.liris.cnrs.fr/projects/imagene">ImaGene</a>.
@cite ImaGene 

[TOC]


The following programs are related to this documentation:
cubical-complex-collapse.cpp, cubical-complex-illustrations.cpp,
testCubicalComplex.cpp,

@section dgtal_ccomplex_sec1  Introduction to cubical complexes

We define a \b cubical \b complex \a C as a collection of cells living
in some Khalimsky space. Two cells of \a C are \b incident if and only
if they are incident in the Khalimsky space. A cubical complex
provides many services related to set of (unsigned) cells living in a
Khalimsky space: incidence operations, closure, star, link, cell set
operations, cell set relations, collapse operation. 


@note In opposition to the usual definition of simplical complex, we
do not require that all faces of a cell of \a C belong also to \a C.

@note A digital surface is not a cubical complex, because it does not
contain explicitely cells of dimension lower than n-1 and because it
requires some sort of orientation. However, it is easy to build an
ExplicitDigitalSurface or a LightExplicitDigitalSurface from a
CubicalComplex that stores a set of d-1-cells. You just need to create
a functor Surfel -> bool from the complex.

To create a cubical complex, we need to specify in which Khalimsky
space it lives and also, optionally, the type of container used for
storing cells. By default it is \c std::map but \c boost::unordered_map
or \c std::unordered_map is also possible.

\code
using namespace DGtal;
typedef KhalimskySpaceND<2,int>           KSpace; // ZxZ
typedef std::map<Cell, CubicalCellData>   Map;    // each cell must store at least a CubicalCellData
typedef CubicalComplex< KSpace, Map >     CC;     // the type of cubical complex

KSpace K;                                         // The cellular grid space
K.init( Point( 0,0 ), Point( 100,100 ), true );   // Limits of the grid space
CC complex( K );                                  // The complex
\endcode

Cells may be inserted through methods CubicalComplex::insertCell and
CubicalComplex::insertCells. Cells are easily created with a model of
CCellularGridSpaceND, for instance by specifying Khalimsky coordinates
(see \ref moduleCellularTopology). The small piece of code below creates a
ring around a pixel.

\code
typedef KSpace::Point                     Point;   // the type of each digital point.
complex.insertCell( 0, K.uCell( Point( 0, 0 ) ) ); // it is optional (but slightly faster)
complex.insertCell( 1, K.uCell( Point( 1, 0 ) ) ); // to specify the dimension of the cell
complex.insertCell( 0, K.uCell( Point( 2, 0 ) ) ); // at insertion.
complex.insertCell( 1, K.uCell( Point( 2, 1 ) ) );
complex.insertCell( 0, K.uCell( Point( 2, 2 ) ) );
complex.insertCell( 1, K.uCell( Point( 1, 2 ) ) );
complex.insertCell( 0, K.uCell( Point( 0, 2 ) ) );
complex.insertCell( 1, K.uCell( Point( 0, 1 ) ) );
trace.info() << "Euler number is " << complex.euler() << std::endl; // Should be 0
\endcode

Method CubicalComplex::insertCells accepts any range of iterators on
cells as input, hence you may for instance directly create a cubical
complex from a digital surface (see \ref moduleDigitalSurfaces).

You have also methods to remove some cells (CubicalComplex::eraseCell,
CubicalComplex::eraseCells) and methods to check if a cell belongs to
the complex (CubicalComplex::belongs).

@note You may use \c std::unordered_map or \c boost::unordered_map
instead of \c std::map. It is sometimes slightly faster. In this case
you need to define a hash function for cells. Either you provide one,
or you just include the file KhalimskyCellHashFunctions.h with:

\code
#include "DGtal/topology/KhalimskyCellHashFunctions.h"
\endcode

Last, there is a data associated with each cell of a complex. The data
type must either be CubicalCellData or a type that derives from
CubicalCellData. This data is used by the functions::collapse
operation, a function that is used to make a homotopic thinning of the
cubical complex. It may also be used by the user for other purposes,
like storing flags, coordinates or anything else associated to a
cell. Look at the documentation of CubicalCellData to see the default
stored flags and data.

@section dgtal_ccomplex_sec2  Displaying a 2D cubical complex

2D cubical complex are displayable on a Board (see \ref
moduleBoard2D). You just have to output the complex with the stream
operator of a board. You may adjust the default style before. The
following snippet creates and outputs a 2D complex.

@snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-X

@image html cubical-complex-illustrations-X.png "Displaying a 2D cubical complex on a Board."
@image latex cubical-complex-illustrations-X.png "Displaying a 2D cubical complex on a Board." width=5cm


@section dgtal_ccomplex_sec3  Incidence within a cubical complex

Two cells of a cubical complex are incident if and only if they are
incident in the Khalimsky space. From this relation, one can define
faces, co-faces, as well as the boundary and co-boundary of a cell.

You have methods to get the faces, the co-faces, the direct faces or
co-faces of a cell \a c, which are outputed with an output iterator:

- CubicalComplex::faces: outputs the faces of \a c, i.e. all cells of
  lesser dimension than \a c and incident to \a c. You may specify
  that the complex is closed (if it is, at least locally) to speed-up
  this function.

- CubicalComplex::directFaces: outputs the direct faces of \a c,
  i.e. all cells of dimension one less than \a c and incident to \a
  c. You may specify that the complex is closed (if it is, at least
  locally) to speed-up this function.

- CubicalComplex::coFaces: outputs the co-faces of \a c, i.e. all
  cells of greater dimension than \a c and incident to \a c. You may
  specify that the complex is open (if it is, at least locally) to
  speed-up this function.

- CubicalComplex::directCoFaces: outputs the direct co-faces of \a c,
  i.e. all cells of dimension one more than \a c and incident to \a
  c. You may specify that the complex is open (if it is, at least
  locally) to speed-up this function.

There are also versions of these methods that return the iterators on
these cells, if you need to access them directly in the complex
afterwards.

If you wish to get a vector of cells that contains all the proper
faces of some cell, then CubicalComplex::cellBoundary does the job. It
is in general slightly faster than using CubicalComplex::faces.

If you wish to get a vector of cells that contains all the proper
co-faces of some cell, then CubicalComplex::cellCoBoundary does the
job. Again it is in general slightly faster than using
CubicalComplex::coFaces.

@section dgtal_ccomplex_sec4  Closure, star and link of cells of a complex

You have three methods to compute these "subcomplexes" of a complex \a
X. In each case, you must give a subcomplex \a S of \a X which defines
the cells for which you wish to compute the closure, star or link.

@image html cubical-complex-illustrations-S.png "Cubical complex \a X in light grey and subcomplex \a S in dark grey."
@image latex cubical-complex-illustrations-S.png "Cubical complex \a X in light grey and subcomplex \a S in dark grey." width=5cm


- CubicalComplex::closure: returns the closure of the cells of \a S
  within this complex, i.e. the smallest subcomplex of \a X that
  contains each cell in \a S.

  @snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-closure

  @image html cubical-complex-illustrations-closure.png "Closure of \a S in \a X, displayed in red."
  @image latex cubical-complex-illustrations-closure.png "Closure of \a S in \a X, displayed in red." width=5cm

- CubicalComplex::star: returns the star of the cells of \a S
  within this complex, i.e. the union of the star (co-faces + cell) in \a X of every cell of \a S.

  @snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-star

  @image html cubical-complex-illustrations-star.png "Star of \a S in \a X, displayed in red."
  @image latex cubical-complex-illustrations-star.png "Star of \a S in \a X, displayed in red." width=5cm

- CubicalComplex::link: returns the link of the cells of \a S within
  this complex, i.e. the closure of the star of \a S in \a X minus the
  star of the closure of \a S in \a X.

  @snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-link

  @image html cubical-complex-illustrations-link.png "Link of \a S in \a X, displayed in green."
  @image latex cubical-complex-illustrations-link.png "Link of \a S in \a X, displayed in green." width=5cm

@section dgtal_ccomplex_sec5  Interior, boundary of a complex

You have three methods for computing the interior or the boundary of a
complex. Note that the boundary and the interior of a complex have an
empty intersection:

- CubicalComplex::interior: returns the (topological) interior of this complex \a X,
  i.e. the cells whose star are homeomorphic to a ball of maximal
  dimension.

  @snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-int

  @image html cubical-complex-illustrations-int.png "Interior of \a X, displayed in cyan."
  @image latex cubical-complex-illustrations-int.png "Interior of \a X, displayed in cyan." width=5cm
  
- CubicalComplex::boundary: returns the (topological) boundary of this
  complex \a X, i.e. the closure of \a X minus the interior of \a
  X. It is worthy to note that the boundary complex may contain cells
  that are not in \a X.

  @snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-bd

  @image html cubical-complex-illustrations-bd.png "Boundary of \a X, displayed in magenta."
  @image latex cubical-complex-illustrations-bd.png "Boundary of \a X, displayed in magenta." width=5cm
  
- CubicalComplex::getInteriorAndBoundary: returns both the boundary
  and the interior of X, faster then computing both separately if you
  need both.

@section dgtal_ccomplex_sec6 Set operations on complexes

A cubical complex can be seen as a generic container (it is a model of
boost::Container). Remember though that it is not a model of
boost::DefaultConstructible, because it must know a cellular grid
space to be valid. You could thus use operations defined in
DGtal::functions::setops (see \ref moduleSetFunctions) to perform set
operations and relations on complexes. However, to use the specificity
of the templated parameter CellContainer of CubicalComplex, it is
better to use operations and relations defined in namespace
DGtal::function, for instance as follows:

\code
using namespace DGtal::functions;
CC X( K );            // creates the cubical complex
CC Xc  = ~X;          // closing of X
CC Xco = *Xc;         // opening of Xc (interior of X).
CC Xbd = Xc - Xco;    // boundary of X.
CC Xbd2= X.boundary();// same result for pure complex. 
\endcode

You have the following operations:
- functions::operator|  : union of two complexes.
- functions::operator|= : assignment union with another complex.
- functions::operator&  : intersection of two complexes.
- functions::operator&= : assignment intersection with another complex.
- functions::operator-  : set difference of two complexes.
- functions::operator-= : assignment set difference with another complex.
- functions::operator^  : symmetric set difference of two complexes.
- functions::operator^= : assignment symmetric set difference with another complex.
- functions::operator~  : closing of a complex (smallest closed complex containg input complex).
- functions::operator*  : opening of a complex (greatest open complex contained in input complex).

And the following relations:
- functions::operator<=  : inclusion of two complexes (subset).
- functions::operator>=  : inclusion of two complexes (supset).
- functions::operator==  : equality of two complexes (both subset and supset).
- functions::operator!=  : non-equality of two complexes (equal is false).

All these operations are at most \b linear in the sum of the number of
cells of input complexes, but they are generally exponential in the
dimension of complexes.

@section dgtal_ccomplex_sec7 Topological operations: closing, opening, collapsing a complex

You may \b close a complex (CubicalComplex::close), i.e. adding cells
such that the faces of every cell belongs to the complex. The complex
is then said to be closed. The updated complex corresponds to the
smallest closed complex containing it.

You may \b open a complex (CubicalComplex::open), i.e. removing cells
such that the co-faces of every cell belongs to the complex. The complex
is then said to be open. The updated complex corresponds to the
greatest open complex contained in it.

A more difficult topological operation is the \b collapse
(functions::collapse). A collapse transforms a complex by removing
cells, but at the end the complex has the same homotopy type as the
initial complex. The topology is preserved since only free pairs are
removed. The following snippet shows how to collapse complex X, while
keeping two cells \a fixed.

@snippet topology/cubical-complex-illustrations.cpp cubical-complex-illustrations-collapse

As you can see, when collapsing a complex X, you precise:
- The subcomplex of X that can be collapsed (should be closed,
  otherwise it is closed).
- A priority object that tells in which order cell are collapsed. If
  you use CubicalComplex::DefaultCellMapIteratorPriority, then the
  order follows the values stored in the data associated with each
  cell. You may use CubicalComplex::operator[] to change this value
  for each cell. The higher the value the sooner the cell is collapsed.
- Various hints to speed up the process.

Example topology/cubical-complex-collapse.cpp shows that it works also in 3D (in fact, it is nD).

@image html cubical-complex-illustrations-collapse.png "Homotopic collapse of \a X, displayed in orange, with fixed points marked in blue."
@image latex cubical-complex-illustrations-collapse.png "Homotopic collapse of \a X, displayed in orange, with fixed points marked in blue." width=5cm

*/

/** 
Collapse of 3D cubical complex that is made of 20x20x20 voxels with
their faces.  Fixed cells were marked in red. It was the eight
vertices, plus all border linels on the upper faces plus a random
linel within the complex. The priority was the distance to the
diagonal.  Note that the Euler characteristic of the complex is
unchanged after collapse.

@see \ref dgtal_ccomplex_sec7

@verbatim
$ ./examples/topology/cubical-complex-collapse
New Block [Creating Cubical Complex]
  After close: [CubicalComplex dim=3 chi=1 #0=9261 #1=26460 #2=25200 #3=8000]
EndBlock [Creating Cubical Complex] (12.088 ms)
New Block [Collapsing complex]
  [CC::collapse]-+ tag collapsible elements...    68756 found.
  [CC::collapse]-+ entering collapsing loop. 
  [CC::collapse]---+ Pass 1, Card(PQ)=68921 elements, nb_exam=0
  [CC::collapse]---+ Pass 2, Card(PQ)=16219 elements, nb_exam=68921
  [CC::collapse]---+ Pass 3, Card(PQ)=7956 elements, nb_exam=85140
  [CC::collapse]---+ Pass 4, Card(PQ)=36 elements, nb_exam=93096
  [CC::collapse]-+ cleaning complex.
  Collapse removed 64066 cells.
  After collapse: [CubicalComplex dim=2 chi=1 #0=1268 #1=2427 #2=1160 #3=0]
EndBlock [Collapsing complex] (162.069 ms)
$
@endverbatim

@image html cubical-complex-collapse-snapshot.png "Collapse of a cubical complex made of 20x20x20 voxels with some cells marked as fixed (in red)."
@image latex cubical-complex-collapse-snapshot.png "Collapse of a cubical complex made of 20x20x20 voxels with some cells marked as fixed (in red)." width=5cm
\example topology/cubical-complex-collapse.cpp

*/

}



/**
Source of examples used to generate illustrations of Cubical Complex module documention.   
@see @ref  moduleCubicalComplex
@image html cubical-complex-illustrations-X.png "One of the generated illustration: displaying a 2D cubical complex on a Board."
@example topology/cubical-complex-illustrations.cpp

*/



/**
Converting a digital set to cubical complex.
@see @ref  moduleCubicalComplex
@image html cubicalComplexes.png "Resulting cubical complex obtained on a flower shape."
@example topology/digitalSetToCubicalComplexes2D.cpp

*/



