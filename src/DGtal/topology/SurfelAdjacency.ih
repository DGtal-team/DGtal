/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SurfelAdjacency.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2011/03/18
 *
 * Implementation of inline methods defined in SurfelAdjacency.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
DGtal::SurfelAdjacency<dim>::
~SurfelAdjacency()
{}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
DGtal::SurfelAdjacency<dim>::  
SurfelAdjacency( bool int2ext )
  : myInt2Ext()
{
  DGtal::Dimension offset = 0;
  for ( DGtal::Dimension j = 0; j < dim; ++j )
    for ( DGtal::Dimension i = 0; i < dim; ++i )
      myInt2Ext[ offset++ ] = int2ext;
}
  
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
DGtal::SurfelAdjacency<dim>::  
SurfelAdjacency ( const SurfelAdjacency & other )
  : myInt2Ext( other.myInt2Ext )
{
}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
DGtal::SurfelAdjacency<dim> &
DGtal::SurfelAdjacency<dim>::  
operator= ( const SurfelAdjacency & other )
{
  if ( this != &other )
    myInt2Ext = other.myInt2Ext;
  return *this;
}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
void 
DGtal::SurfelAdjacency<dim>::  
setAdjacency( DGtal::Dimension i, DGtal::Dimension j, bool int2ext )
{
  myInt2Ext[ i * dim + j ] = int2ext;
  myInt2Ext[ j * dim + i ] = int2ext;
}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
bool 
DGtal::SurfelAdjacency<dim>::  
getAdjacency( DGtal::Dimension i, DGtal::Dimension j ) const
{
  return myInt2Ext[ i * dim + j ];
}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
void
DGtal::SurfelAdjacency<dim>::  
selfDisplay ( std::ostream & out ) const
{
    out << "[SurfelAdjacency]";
}
//-----------------------------------------------------------------------------
template <DGtal::Dimension dim>
inline
bool 
DGtal::SurfelAdjacency<dim>::  
isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'SurfelAdjacency'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'SurfelAdjacency' to write.
 * @return the output stream after the writing.
 */
template <DGtal::Dimension dim>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
        const SurfelAdjacency<dim> & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


