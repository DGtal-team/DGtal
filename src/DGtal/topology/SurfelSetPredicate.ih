/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SurfelSetPredicate.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2012/02/10
 *
 * Implementation of inline methods defined in SurfelSetPredicate.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//------------------------------------------------------------------------------
template <typename TSurfelSet, typename TSurfel>
inline
DGtal::functors::SurfelSetPredicate<TSurfelSet, TSurfel>
::SurfelSetPredicate( ConstAlias<SurfelSet> aSet )
  : mySet( &aSet )
{
}
//------------------------------------------------------------------------------
template <typename TSurfelSet, typename TSurfel>
inline
DGtal::functors::SurfelSetPredicate<TSurfelSet, TSurfel>
::SurfelSetPredicate( const SurfelSetPredicate & other )
  : mySet( other.mySet )
{
}
//------------------------------------------------------------------------------
template <typename TSurfelSet, typename TSurfel>
inline
DGtal::functors::SurfelSetPredicate<TSurfelSet, TSurfel>&
DGtal::functors::SurfelSetPredicate<TSurfelSet, TSurfel>
::operator=( const SurfelSetPredicate & other )
{
  mySet = other.mySet;
  return *this;
}
//------------------------------------------------------------------------------
template <typename TSurfelSet, typename TSurfel>
inline
bool
DGtal::functors::SurfelSetPredicate<TSurfelSet, TSurfel>
::operator()( const Surfel & s ) const
{
  return mySet->find( s ) != mySet->end();
}
//------------------------------------------------------------------------------

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


