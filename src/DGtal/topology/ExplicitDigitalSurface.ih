/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ExplicitDigitalSurface.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2011/11/27
 *
 * Implementation of inline methods defined in ExplicitDigitalSurface.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iterator>
#include "DGtal/topology/helpers/Surfaces.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::~Tracker()
{}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::Tracker( ConstAlias<DigitalSurfaceContainer> aSurface, 
           const Surfel & s )
  : mySurface( aSurface ), myNeighborhood()
{
  myNeighborhood.init( & surface().space(),
                       & surface().surfelAdjacency(),
                       s );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::Tracker( const Tracker & other )
  : mySurface( other.mySurface ), myNeighborhood( other.myNeighborhood )
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
const typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::DigitalSurfaceContainer &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::surface() const
{
  return mySurface;
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
const typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::Surfel &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::current() const
{
  return myNeighborhood.surfel();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::Dimension
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::orthDir() const
{
  return myNeighborhood.orthDir();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
void
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::move( const Surfel & s )
{
  ASSERT( surface().isInside( s ) );
  myNeighborhood.setSurfel( s );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::uint8_t
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Tracker
::adjacent( Surfel & s, Dimension d, bool pos ) const
{
  return static_cast<uint8_t>
    ( myNeighborhood.getAdjacentOnSurfelPredicate
      ( s, surface().surfelPredicate(), d, pos ) );
}

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::~ExplicitDigitalSurface()
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::ExplicitDigitalSurface
( const ExplicitDigitalSurface & other )
  : myKSpace( other.myKSpace ),
    mySurfelPredicate( other.mySurfelPredicate ),
    mySurfelAdjacency( other.mySurfelAdjacency ),
    mySurfels( other.mySurfels )
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::ExplicitDigitalSurface
( ConstAlias<KSpace> aKSpace,
  const SurfelPredicate & aPP,
  const Adjacency & adj,
  const Surfel & s,
  bool closed )
  : myKSpace( aKSpace ), mySurfelPredicate( aPP ), mySurfelAdjacency( adj )
{
  computeSurfels( s, closed );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
const
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Adjacency &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::surfelAdjacency() const
{
  return mySurfelAdjacency;
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Adjacency &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::surfelAdjacency()
{
  return mySurfelAdjacency;
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
const
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::SurfelPredicate &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::surfelPredicate() const
{
  return mySurfelPredicate;
}

//-----------------------------------------------------------------------------
// --------- CDigitalSurfaceContainer realization -------------------------
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
const typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::KSpace &
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::space() const
{
  return myKSpace;
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
bool
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::isInside
( const Surfel & s ) const
{
  return surfelPredicate()( s );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::SurfelConstIterator
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::begin() const
{
  return mySurfels.begin();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::SurfelConstIterator
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::end() const
{
  return mySurfels.end();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::Size
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::nbSurfels() const
{
  return mySurfels.size();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
bool
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::empty() const
{
  return mySurfels.empty();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
typename DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::DigitalSurfaceTracker*
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::newTracker
( const Surfel & s ) const
{
  return new Tracker( *this, s );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
DGtal::Connectedness
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::connectedness() const
{
  return CONNECTED;
}

// ------------------------- Hidden services ------------------------------
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TSurfelPredicate>
inline
void
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::computeSurfels
( const Surfel & p, bool closed )
{
  mySurfels.clear();
  if ( KSpace::dimension > 2 )
    {
      typename KSpace::SCellSet surface;
      if ( closed )
        Surfaces<KSpace>::trackClosedSurface( surface,
                                              myKSpace,
                                              mySurfelAdjacency,
                                              mySurfelPredicate,
                                              p
        );
      else
        Surfaces<KSpace>::trackSurface( surface,
                                        myKSpace,
                                        mySurfelAdjacency,
                                        mySurfelPredicate,
                                        p
        );

      for ( typename KSpace::SCellSet::const_iterator it = surface.begin(),
            it_end = surface.end(); it != it_end; ++it )
        mySurfels.push_back( *it );
    }
  else
    {
      ASSERT( KSpace::dimension == 2 );
      Surfaces<KSpace>::track2DSurface( mySurfels,
                                        myKSpace,
                                        mySurfelAdjacency,
                                        mySurfelPredicate,
                                        p
      );
    }
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace, typename TSurfelPredicate>
inline
void
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::selfDisplay ( std::ostream & out ) const
{
  out << "[ExplicitDigitalSurface]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace, typename TSurfelPredicate>
inline
bool
DGtal::ExplicitDigitalSurface<TKSpace,TSurfelPredicate>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TSurfelPredicate>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
    const ExplicitDigitalSurface<TKSpace,TSurfelPredicate> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


