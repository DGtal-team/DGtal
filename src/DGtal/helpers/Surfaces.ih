/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Surfaces.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2011/03/19
 *
 * Implementation of inline methods defined in Surfaces.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <queue>
#include <algorithm>
#include "DGtal/images/imagesSetsUtils/ImageFromSet.h"
#include "DGtal/images/ImageSelector.h"
#include "DGtal/helpers/StdDefs.h"


//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename TKSpace>
inline
DGtal::Surfaces<TKSpace>::~Surfaces()
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet>
typename DGtal::Surfaces<TKSpace>::SCell
DGtal::Surfaces<TKSpace>::
findABel
( const KSpace & K,
  const DigitalSet & dset,
  unsigned int nbtries) throw (DGtal::InputException)
{
  DGtal::InputException dgtalerror;
  Point sizes = K.upperBound() - K.lowerBound();
  Point x1 = K.lowerBound();
  Point x2;
  // (1) Find two candidates in the space.
  bool val_v1 = dset.find( x1 ) != dset.end();
  bool found = false;
  Integer r;
  for ( unsigned int j = 0; j < nbtries; ++j )
    {
      for ( Dimension i = 0; i < K.dimension; ++i )
	{
	  r = random();
	  x2[ i ] = ( r % sizes[ i ] ) + K.min( i );
	}
      bool val_v2 = dset.find( x2 ) != dset.end();
      if ( val_v2 != val_v1 )
	{
	  found = true;
	  break;
	}
    }
  if ( ! found ) throw dgtalerror;
  // (2) Find two candidates on the same axis.
  Dimension d = 0;
  for ( Dimension i = 0; i < K.dimension; ++i )
    {
      if ( x1[ i ] != x2[ i ] )
	{
	  for ( Dimension j = i + 1; j < K.dimension; ++j )
	    {
	      if ( x1[ j ] != x2[ j ] )
		{
		  Integer c = x2[ j ];
		  x2[ j ] = x1[ j ];
		  bool val_v2 = dset.find( x2 ) != dset.end();
		  if ( val_v2 != val_v1 )
		    { // v2 is updated.
		      d = i;
		    }
		  else
		    { // v1 is updated.
		      x1 = x2;
		      x2[ j ] = c;
		      d = j;
		    }
		} // if ( x1[ j ] != x2[ j ] )
	    } // for ( Dimension j = i + 1; j < K.dimension; ++j )
	} // if ( x1[ i ] != x2[ i ] )
    } // for ( Dimension i = 0; i < K.dimension; ++i )

  // (3) Check result.
  for ( Dimension i = 0; i < K.dimension; ++i )
    {
      if ( ( i == d ) && ( x1[ i ] == x2[ i ] ) )
	std::cerr << "[DGtal::Surfaces::findABel] Error 1a along " 
		  << i << std::endl;
      if ( ( i != d ) && ( x1[ i ] != x2[ i ] ) )
	std::cerr << "[DGtal::Surfaces::findABel] Error 1b along "
		  << i << std::endl;
    }
  
  // (4) Dichotomy
  Point xmid = x1;
  while ( true )
    {
      xmid[ d ] = ( x1[ d ] + x2[ d ] ) / 2;
      if ( ( xmid[ d ] == x1[ d ] ) || ( xmid[ d ] == x2[ d ] ) )
	break;
      bool val_mid = dset.find( xmid ) != dset.end();
      if ( val_mid != val_v1 )
	x2[ d ] = xmid[ d ];
      else
	x1[ d ] = xmid[ d ];
    }
  
  // (5) Check result.
  for ( Dimension i = 0; i < K.dimension; ++i )
    {
      // std::cerr << "i=" << i << " x1=" << x1[ i ] << " x2=" << x2[ i ]
      // 		<< std::endl;
      if ( ( i == d ) && ( x1[ i ] != x2[ i ] - 1 ) )
	std::cerr << "[DGtal::Surfaces::findABel] Error 2a along " 
		  << i << std::endl;
      if ( ( i != d ) && ( x1[ i ] != x2[ i ] ) )
	std::cerr << "[DGtal::Surfaces::findABel] Error 2a along "
		  << i << std::endl;
    }

  // (6) Computes bel.
  if ( val_v1 )
    return K.sIncident( K.sSpel( x1, K.POS ), d, true );
  else
    return K.sIncident( K.sSpel( x1, K.NEG ), d, true );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename SCellSet, typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::
trackBoundary( SCellSet & surface,
	       const KSpace & K,
	       const SurfelAdjacency<KSpace::dimension> & surfel_adj,
	       const DigitalSet & shape,
	       const SCell & start_surfel )
{
  SCell b;  // current surfel
  SCell bn; // neighboring surfel
  ASSERT( K.sIsSurfel( start_surfel ) );
  surface.clear(); // boundary being extracted.

  SurfelNeighborhood<KSpace> SN;
  SN.init( &K, &surfel_adj, start_surfel );
  std::queue<SCell> qbels;
  qbels.push( start_surfel );
  surface.insert( start_surfel );
  // For all pending bels
  while ( ! qbels.empty() )
    {
      b = qbels.front();
      qbels.pop();
      SN.setSurfel( b );
      for ( DirIterator q = K.sDirs( b ); q != 0; ++q )
	{
	  Dimension track_dir = *q;
	  // ----- 1st pass with positive orientation ------
	  if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir, true ) )
	    {
	      if ( surface.find( bn ) == surface.end() )
		{
		  surface.insert( bn );
		  qbels.push( bn );
		}
	    }
	  // ----- 2nd pass with negative orientation ------
	  if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir, false ) )
	    {
	      if ( surface.find( bn ) == surface.end() )
		{
		  surface.insert( bn );
		  qbels.push( bn );
		}
	    }
	} // for ( DirIterator q = K.sDirs( b ); q != 0; ++q )
    } // while ( ! qbels.empty() )
}


//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::track2DBoundary( std::vector<SCell> & aSCellContour2D,
					   const KSpace & K,
					   const SurfelAdjacency<KSpace::dimension> & surfel_adj,
					   const DigitalSet & shape,
					   const SCell & start_surfel ){
  SCell b= start_surfel;  // current surfel
  SCell bn; // neighboring surfel
  ASSERT( K.sIsSurfel( start_surfel ) );
  std::set<SCell> setSurface;
  setSurface.insert(start_surfel);
  aSCellContour2D.clear(); // boundary being extracted.
  aSCellContour2D.push_back(start_surfel);
  SurfelNeighborhood<KSpace> SN;
  SN.init( &K, &surfel_adj, start_surfel );
  SN.setSurfel( b );
  bool hasPrevNeighbor =  true;
  while ( hasPrevNeighbor  ){
    hasPrevNeighbor=false;
    Dimension track_dir = *(K.sDirs( b ));
    SN.setSurfel( b );
    if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir,  !K.sDirect( b, track_dir ) ) )
      {
	if ( setSurface.find( bn ) == setSurface.end() )
	  {
	    hasPrevNeighbor=true;
	    aSCellContour2D.push_back( bn );
	    setSurface.insert(bn);
	  }
      }
    b = bn;
  }
  // since the contour is not necessary closed we search in the other direction.
  reverse(aSCellContour2D.begin(), aSCellContour2D.end());
  b= start_surfel; 
  bool hasNextNeighbor =  true;
  while (hasNextNeighbor ){
    hasNextNeighbor=false;
    Dimension track_dir = *(K.sDirs( b ));
    SN.setSurfel( b );
    if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir, K.sDirect( b, track_dir ) ) )
      {
	if ( setSurface.find( bn ) == setSurface.end() )
	  {
	    aSCellContour2D.push_back( bn );
	    setSurface.insert(bn);
	    hasNextNeighbor=true;
	  }
      }
    b=bn;
  }
}



//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::track2DBoundary( std::vector<SCell> & aSCellContour2D,
					   const KSpace & K, const Dimension & cstDir,
					   const SurfelAdjacency<TKSpace::dimension> & surfel_adj,
					   const DigitalSet & shape,
					   const SCell & start_surfel ){
  SCell b= start_surfel;  // current surfel
  SCell bn; // neighboring surfel
  ASSERT( K.sIsSurfel( start_surfel ) );
  std::set<SCell> setSurface;
  setSurface.insert(start_surfel);
  aSCellContour2D.clear(); // boundary being extracted.
  aSCellContour2D.push_back(start_surfel);
  SurfelNeighborhood<KSpace> SN;
  SN.init( &K, &surfel_adj, start_surfel );
  SN.setSurfel( b );
  bool hasPrevNeighbor =  true;
  while ( hasPrevNeighbor  ){
    hasPrevNeighbor=false;
    
    // search a tracking direction compatible with constant direction
    DirIterator q = K.sDirs( b );
       Dimension track_dir=*q;
    while(q!=0 && track_dir==cstDir ){
      ++q;
      track_dir = *q;
    }
    ASSERT( q!=0 );
    SN.setSurfel( b );
    if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir,  !K.sDirect( b, track_dir ) ) )
      {
	if ( setSurface.find( bn ) == setSurface.end() )
	  {
	    hasPrevNeighbor=true;
	    aSCellContour2D.push_back( bn );
	    setSurface.insert(bn);
	  }
      }
    b = bn;
  }
  // since the contour is not necessary closed we search in the other direction.
  reverse(aSCellContour2D.begin(), aSCellContour2D.end());
  b= start_surfel; 
  bool hasNextNeighbor =  true;
  while (hasNextNeighbor ){
    hasNextNeighbor=false;
    // search a tracking direction compatible with constant direction
    DirIterator q = K.sDirs( b );
    Dimension track_dir=*q;
    while(q!= 0 && track_dir==cstDir ){
      ++q;
      track_dir = *q;
    }
    ASSERT( q!=0 );

    SN.setSurfel( b );
    if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir, K.sDirect( b, track_dir ) ) )
      {
	if ( setSurface.find( bn ) == setSurface.end() )
	  {
	    aSCellContour2D.push_back( bn );
	    setSurface.insert(bn);
	    hasNextNeighbor=true;
	  }
      }
    b=bn;
  }
}





//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::
extractAll2DSCellContours( std::vector< std::vector<SCell> > & aVectSCellContour2D,
			   const KSpace & aKSpace,
			   const SurfelAdjacency<KSpace::dimension> & aSurfelAdj,
			   const DigitalSet & aShape ){
  
  std::set<SCell> bdry;
  Cell low = aKSpace.uFirst(aKSpace.uSpel(aKSpace.lowerBound()));
  Cell upp = aKSpace.uLast(aKSpace.uSpel(aKSpace.upperBound()));
  sMakeBoundary( bdry, aKSpace, aShape, low, upp  );
  aVectSCellContour2D.clear();
  while(!bdry.empty()){
    std::vector<SCell> aContour;
    SCell aCell = *(bdry.begin()); 
    track2DBoundary(aContour, aKSpace, aSurfelAdj,aShape, aCell );
    aVectSCellContour2D.push_back(aContour);
    // removing cells from boundary;
    for(unsigned int i=0;i <aContour.size(); i++){
      SCell sc = aContour.at(i);
      bdry.erase(sc);
    }
  }
}



//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void 
DGtal::Surfaces<TKSpace>::orientSCellExterior(std::vector<SCell> & aVectOfSCell,
					      const KSpace & aKSpace,  const DigitalSet & aShape  ){
  for( typename vector<SCell>::iterator it = aVectOfSCell.begin();
       it!=aVectOfSCell.end(); it++){
    SCell incidUpperDim = aKSpace.sDirectIncident(*it, aKSpace.sOrthDir(*it)); 
    if(aShape.find(aKSpace.sCoords(incidUpperDim))!=aShape.end()){
      aKSpace.sSetSign (*it, !aKSpace.sDirect(*it, aKSpace.sOrthDir(*it)) ); 
    }else{
      aKSpace.sSetSign (*it, aKSpace.sDirect(*it, !aKSpace.sOrthDir(*it)) ); 
    }  
  }
}

    


//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::
extractAllConnectedSCell( std::vector< std::vector<SCell> > & aVectConnectedSCell,
			  const KSpace & aKSpace,
			  const SurfelAdjacency<KSpace::dimension> & aSurfelAdj,
			  const DigitalSet & aShape , bool forceOrientCellExterior){
  
  set<SCell> bdry;
  Cell low = aKSpace.uFirst(aKSpace.uSpel(aKSpace.lowerBound()));
  Cell upp = aKSpace.uLast(aKSpace.uSpel(aKSpace.upperBound()));
  sMakeBoundary( bdry, aKSpace, aShape, low, upp  );
  aVectConnectedSCell.clear();
  while(!bdry.empty()){
    set<SCell>  aConnectedSCellSet;
    SCell aCell = *(bdry.begin()); 
    trackBoundary(aConnectedSCellSet, aKSpace, aSurfelAdj,aShape, aCell );
    //transform into vector<SCell>
    vector<SCell> vCS;
    for(typename set<SCell>::iterator it = aConnectedSCellSet.begin(); it!= aConnectedSCellSet.end(); ++it){
      vCS.push_back(*it); 
      // removing cells from boundary;      
      bdry.erase(*it);
    }
    if(forceOrientCellExterior){
      orientSCellExterior(vCS, aKSpace, aShape);
    }
    aVectConnectedSCell.push_back(vCS);
  }
}
    
    


//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::
extractAllPointContours4C( std::vector< std::vector< Point > > & aVectPointContour2D,
			   const KSpace & aKSpace,
			   const DigitalSet & aShape,
			   const SurfelAdjacency<2> & aSAdj){
  aVectPointContour2D.clear();
  
  std::vector< std::vector<SCell> > vectContoursBdrySCell;
  extractAll2DSCellContours( vectContoursBdrySCell,
			     aKSpace, aSAdj, aShape );
  
  for(unsigned int i=0; i< vectContoursBdrySCell.size(); i++){
    std::vector< Point > aContour;
    for(unsigned int j=0; j< vectContoursBdrySCell.at(i).size(); j++){
      SCell sc = vectContoursBdrySCell.at(i).at(j);
      float x = (float) 
	( IntegerTraits<typename TKSpace::Integer>::castToInt64_t( sc.myCoordinates[0] ) >> 1 );
      float y = (float) 
	( IntegerTraits<typename TKSpace::Integer>::castToInt64_t( sc.myCoordinates[1] ) >> 1 );
      bool xodd = ( sc.myCoordinates[ 0 ] & 1 );
      bool yodd = ( sc.myCoordinates[ 1 ] & 1 );
      double x0 = !xodd ? x  - 0.5 : (!aKSpace.sSign(sc)? x  - 0.5: x  + 0.5) ;
      double y0 = !yodd ? y  - 0.5 : (!aKSpace.sSign(sc)? y  - 0.5: y + 0.5);
      double x1 = !xodd ? x  - 0.5 : (aKSpace.sSign(sc)? x  - 0.5: x  + 0.5) ;
      double y1 = !yodd ? y  - 0.5 : (aKSpace.sSign(sc)? y  - 0.5: y  + 0.5);      
      
      Point ptA(x0+0.5, y0-0.5);
      Point ptB(x1+0.5, y1-0.5) ;
      aContour.push_back(ptA);
      if(sc== vectContoursBdrySCell.at(i).at(vectContoursBdrySCell.at(i).size()-1)){
	aContour.push_back(ptB);
      }
    }
    aVectPointContour2D.push_back(aContour);
  }
}



//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename SCellSet, typename DigitalSet >
void
DGtal::Surfaces<TKSpace>::
trackClosedBoundary( SCellSet & surface,
		     const KSpace & K,
		     const SurfelAdjacency<KSpace::dimension> & surfel_adj,
		     const DigitalSet & shape,
		     const SCell & start_surfel )
{
  SCell b;  // current surfel
  SCell bn; // neighboring surfel
  ASSERT( K.sIsSurfel( start_surfel ) );
  surface.clear(); // boundary being extracted.

  SurfelNeighborhood<KSpace> SN;
  SN.init( &K, &surfel_adj, start_surfel );
  std::queue<SCell> qbels;
  qbels.push( start_surfel );
  surface.insert( start_surfel );
  // For all pending bels
  while ( ! qbels.empty() )
    {
      b = qbels.front();
      qbels.pop();
      SN.setSurfel( b );
      for ( DirIterator q = K.sDirs( b ); q != 0; ++q )
	{
	  Dimension track_dir = *q;
	  // ----- One pass, look for direct orientation ------
	  if ( SN.getAdjacentOnDigitalSet( bn, shape, track_dir, 
					   K.sDirect( b, track_dir ) ) )
	    {
	      if ( surface.find( bn ) == surface.end() )
		{
		  surface.insert( bn );
		  qbels.push( bn );
		}
	    }
	} // for ( DirIterator q = K.sDirs( b ); q != 0; ++q )
    } // while ( ! qbels.empty() )
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename SCellSet, typename DigitalSet >
void 
DGtal::Surfaces<TKSpace>::
uMakeBoundary( SCellSet & aBoundary,
	       const KSpace & aKSpace,
	       const DigitalSet & aSpelSet,
	       const Cell aLowerBound, const Cell aUpperBound  )
{
  unsigned int k;
  bool in_here, in_further;
  for ( k = 0; k < aKSpace.dimension; ++k )
    {
      Cell dir_low_uid = aLowerBound;
      Cell dir_up_uid = aKSpace.uGetDecr(aUpperBound, k);
      
      
      Cell p = dir_low_uid;
      do 
	{
	  in_here = (aSpelSet.find(aKSpace.uCoords(p))!=aSpelSet.end());
	  in_further = (aSpelSet.find(aKSpace.uCoords(aKSpace.uGetIncr( p, k )) )!=aSpelSet.end());
	  if ( in_here != in_further ) // boundary element
	    { // add it to the set.
	      
	      aBoundary.insert( aKSpace.uIncident( p, k, true ));
	    }
	}
      while ( aKSpace.uNext( p, dir_low_uid, dir_up_uid ) );
    }
}



//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename SCellSet, typename DigitalSet >
void 
DGtal::Surfaces<TKSpace>::
sMakeBoundary( SCellSet & aBoundary,
	       const KSpace & aKSpace,
	       const DigitalSet & aSpelSet,
	       const Cell aLowerBound, const Cell aUpperBound  )
{
  unsigned int k;
  bool in_here, in_further;
  typedef typename  ImageSelector< typename DigitalSet::Domain, bool >::Type Image;  
  Image setImage = ImageFromSet<Image>::create(aSpelSet, 1,
					       true, 
					       aSpelSet.begin(), 
					       aSpelSet.end());
  for ( k = 0; k < aKSpace.dimension; ++k )
    {
      Cell dir_low_uid = aLowerBound;
      Cell dir_up_uid = aKSpace.uGetDecr(aUpperBound, k);
      Cell p = dir_low_uid;
      do 
	{
	  if (setImage.domain().isInside( aKSpace.uCoords(p)) && 
	      setImage.domain().isInside( aKSpace.uCoords(aKSpace.uGetIncr( p, k )))){
	    in_here =(setImage(aKSpace.uCoords(p))); 
	    in_further = (setImage(aKSpace.uCoords(aKSpace.uGetIncr( p, k )))); 
	    if ( in_here != in_further ) // boundary element
	    { // add it to the set.
	      aBoundary.insert( aKSpace.sIncident( aKSpace.signs( p, (in_here == true) ) , k, true ));
	    }
	  }
	}
      while ( aKSpace.uNext( p, dir_low_uid, dir_up_uid ) );
    }
}


// //-----------------------------------------------------------------------------

// // Initial version with "find" on DigitalSet (replaced by faster version using image)

// template <typename TKSpace>
// template <typename SCellSet, typename DigitalSet >
// void 
// DGtal::Surfaces<TKSpace>::
// sMakeBoundary( SCellSet & aBoundary,
// 	       const KSpace & aKSpace,
// 	       const DigitalSet & aSpelSet,
// 	       const Cell aLowerBound, const Cell aUpperBound  )
// {
//   unsigned int k;
//   bool in_here, in_further;
//   for ( k = 0; k < aKSpace.dimension; ++k )
//     {

      
//       Cell dir_low_uid = aLowerBound;
//       Cell dir_up_uid = aKSpace.uGetDecr(aUpperBound, k);
//       Cell p = dir_low_uid;
//       do 
// 	{
// 	  in_here = (aSpelSet.find(aKSpace.uCoords(p))!=aSpelSet.end());
// 	  in_further = (aSpelSet.find(aKSpace.uCoords(aKSpace.uGetIncr( p, k )) )!=aSpelSet.end());
// 	  if ( in_here != in_further ) // boundary element
// 	    { // add it to the set.
// 	      aBoundary.insert( aKSpace.sIncident( aKSpace.signs( p, true ) , k, true ));
// 	    }
// 	}
//       while ( aKSpace.uNext( p, dir_low_uid, dir_up_uid ) );
//     }
// }





///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace>
inline
void
DGtal::Surfaces<TKSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[Surfaces]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace>
inline
bool
DGtal::Surfaces<TKSpace>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const Surfaces<TKSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


