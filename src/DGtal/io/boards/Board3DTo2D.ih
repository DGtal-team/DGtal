/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Board3DTo2D.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 22 juin 2011
 *
 * @brief
 *
 * Implementation of inline methods defined in Board3DTo2D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

#include <limits>

// Cairo includes
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#endif
#include <cairo.h>
#include <cairo-pdf.h>
#include <cairo-ps.h>
#include <cairo-svg.h>
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// Cairo includes
//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
#include "DGtal/io/boards/CDrawableWithBoard3DTo2D.h"
#include "DGtal/io/Color.h"
#include "DGtal/io/boards/Board3DTo2DFactory.h"

//////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
   * Set the default color for future drawing.
   * @param aColor: a DGtal::Color (allow to set a trasnparency value).
   *
   **/
template < typename Space, typename KSpace>
inline
DGtal::Board3DTo2D<Space, KSpace> &
DGtal::Board3DTo2D<Space, KSpace>::operator<<(const DGtal::Color & aColor)
{
  myDefaultColor=aColor;
  return *this;
}


/**
   * Draws the drawable [object] in this board. It should satisfy
   * the concept CDrawableWithBoard3DTo2D, which requires for instance a
   * method setStyle( Board3DTo2D & ).
   *
   * @param object any drawable object.
   * @return a reference on 'this'.
   */
template < typename Space, typename KSpace>
template <typename TDrawableWithBoard3DTo2D>
inline
DGtal::Board3DTo2D<Space, KSpace> &
DGtal::Board3DTo2D<Space, KSpace>::operator<<( const TDrawableWithBoard3DTo2D & object )
{
  BOOST_CONCEPT_ASSERT((concepts::CDrawableWithBoard3DTo2D< TDrawableWithBoard3DTo2D, Space, KSpace>));

  DGtal::Board3DTo2DFactory<Space,KSpace>::draw(*this, object);
  return *this;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Standard services - public :

/*!
* \brief Constructor.
*/
template < typename Space, typename KSpace>
DGtal::Board3DTo2D<Space, KSpace>::Board3DTo2D()
{
    init();
}
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
* Writes/Displays the object on an output stream.
* @param out the output stream where the object is written.
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::selfDisplay ( std::ostream & out ) const
{
    out << "[Board3DTo2D]";
}

/**
* Checks the validity/consistency of the object.
* @return 'true' if the object is valid, 'false' otherwise.
*/
template < typename Space, typename KSpace>
bool
DGtal::Board3DTo2D<Space, KSpace>::isValid() const
{
    return true;
}


/**
* Transpose a 4x4 matrix.
* @param tmat destination matrix.
* @param mat source matrix.
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::TransposeMt(double tmat[16], double mat[16])
{
    tmat[0] = mat[0]; tmat[1] = mat[4]; tmat[2] = mat[8]; tmat[3] = mat[12];
    tmat[4] = mat[1]; tmat[5] = mat[5]; tmat[6] = mat[9]; tmat[7] = mat[13];
    tmat[8] = mat[2]; tmat[9] = mat[6]; tmat[10] = mat[10]; tmat[11] = mat[14];
    tmat[12] = mat[3]; tmat[13] = mat[7]; tmat[14] = mat[11]; tmat[15] = mat[15];
}

/**
* Multiply a 3d vector by a 4x4 matrix.
* @param v destination vector.
* @param mat source matrix.
* @param b source vector.
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::MulMt(double v[4], double mat[16], double b[4])
{
    v[0] = mat[0] * b[0] + mat[1] * b[1] + mat[2] * b[2] + mat[3] * b[3];
    v[1] = mat[4] * b[0] + mat[5] * b[1] + mat[6] * b[2] + mat[7] * b[3];
    v[2] = mat[8] * b[0] + mat[9] * b[1] + mat[10] * b[2] + mat[11] * b[3];
    v[3] = mat[12] * b[0] + mat[13] * b[1] + mat[14] * b[2] + mat[15] * b[3];
}

/**
* Compute 4x4 LookAt matrix.
* @param mat destination matrix.
* @param eyex x position of eye.
* @param eyey y position of eye.
* @param eyez z position of eye.
* @param dirx x direction of eye.
* @param diry y direction of eye.
* @param dirz z director of eye.
* @param upx x coordinate of up-vector.
* @param upy y coordinate of up-vector.
* @param upz z coordinate of up-vector.
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::LookAtMt(double mat[16],
double eyex, double eyey, double eyez,
double dirx, double diry, double dirz,
double upx, double upy, double upz)
{
    double up[3]; up[0]= upx; up[1]= upy; up[2]= upz;

    double z[3]; z[0]= -dirx; z[1]= -diry; z[2]= -dirz; Display3D<Space,KSpace>::normalize(z);
    double x[3]; Display3D<Space,KSpace>::cross (x, up, z); Display3D<Space,KSpace>::normalize(x);
    double y[3]; Display3D<Space,KSpace>::cross (y, z, x); Display3D<Space,KSpace>::normalize(y);

    double m[16];
    m[0] = x[0]; m[1] = x[1]; m[2] = x[2]; m[3] = 0;
    m[4] = y[0]; m[5] = y[1]; m[6] = y[2]; m[7] = 0;
    m[8] = z[0]; m[9] = z[1]; m[10] = z[2]; m[11] = 0;
    m[12] = 0; m[13] = 0; m[14] = 0; m[15] = 1;

    double e[4]; e[0]= -eyex; e[1]= -eyey; e[2]= -eyez; e[3]= 1;
    double eyePrime[4]; MulMt(eyePrime, m, e);

    TransposeMt(mat, m);
    mat[12] = eyePrime[0]; mat[13] = eyePrime[1]; mat[14] = eyePrime[2];
}

/**
* Precompute 4x4 projection matrix for 3D->2D projection.
*/
template < typename Space, typename KSpace>
void DGtal::Board3DTo2D<Space, KSpace>::precompute_projection_matrix()
{
    // Projection: from qglviewer
    /*const double f = 1.0/tan(fieldOfView()/2.0);
projectionMatrix_[0]  = f/aspectRatio();
projectionMatrix_[5]  = f;
projectionMatrix_[10] = (ZNear + ZFar) / (ZNear - ZFar);
projectionMatrix_[11] = -1.0;
projectionMatrix_[14] = 2.0 * ZNear * ZFar / (ZNear - ZFar);
projectionMatrix_[15] = 0.0;
// same as gluPerspective( 180.0*fieldOfView()/M_PI, aspectRatio(), zNear(), zFar() );*/

    double fieldOfView = M_PI/4.;
    double f = 1.0/tan(fieldOfView/2.0);
    double aspectRatio = (double)Viewport[2]/Viewport[3];

    double Projection[16] = { f/aspectRatio, 0.00, 0.00, 0.00,
                              0.00, f, 0.00, 0.00,
                              0.00, 0.00, (ZNear + ZFar) / (ZNear - ZFar), -1.00,
                              0.00, 0.00, 2.0 * ZNear * ZFar / (ZNear - ZFar), 0.00 };

    double Modelview[16];
    LookAtMt(Modelview,
             camera_position[0], camera_position[1], camera_position[2],
            camera_direction[0], camera_direction[1], camera_direction[2],
            camera_upVector[0], camera_upVector[1], camera_upVector[2]);

    for (unsigned short m=0; m<4; ++m)
    {
        for (unsigned short l=0; l<4; ++l)
        {
            double sum = 0.0;
            for (unsigned short k=0; k<4; ++k)
                sum += Projection[l+4*k]*Modelview[k+4*m];
            matrix[l+4*m] = sum;
        }
    }
}

/**
* Project a 3d point (3D->2D).
* @param x3d x position of the 3d point.
* @param y3d y position of the 3d point.
* @param z3d z position of the 3d point.
* @param x2d x destination projection position of the 2d point.
* @param y2d y destination projection position of the 2d point.
*/
template < typename Space, typename KSpace>
void DGtal::Board3DTo2D<Space, KSpace>::project(double x3d, double y3d, double z3d, double &x2d, double &y2d)
{
    double v[4], vs[4];
    v[0]=x3d; v[1]=y3d; v[2]=z3d; v[3]=1.0;

    vs[0]=matrix[0 ]*v[0] + matrix[4 ]*v[1] + matrix[8 ]*v[2] + matrix[12 ]*v[3];
    vs[1]=matrix[1 ]*v[0] + matrix[5 ]*v[1] + matrix[9 ]*v[2] + matrix[13 ]*v[3];
    vs[2]=matrix[2 ]*v[0] + matrix[6 ]*v[1] + matrix[10]*v[2] + matrix[14 ]*v[3];
    vs[3]=matrix[3 ]*v[0] + matrix[7 ]*v[1] + matrix[11]*v[2] + matrix[15 ]*v[3];

    vs[0] /= vs[3];
    vs[1] /= vs[3];
    vs[2] /= vs[3];

    vs[0] = vs[0] * 0.5 + 0.5;
    vs[1] = vs[1] * 0.5 + 0.5;
    vs[2] = vs[2] * 0.5 + 0.5;

    vs[0] = vs[0] * Viewport[2] + Viewport[0];
    vs[1] = vs[1] * Viewport[3] + Viewport[1];

    x2d = vs[0];
    y2d = Viewport[3]-vs[1];
}

/**
* Save a Cairo image.
* @param filename filename of the image to save.
* @param type type of the image to save (CairoPDF, CairoPNG, CairoPS, CairoEPS, CairoSVG).
* @param bWidth width of the image to save.
* @param bHeight height of the image to save.
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::saveCairo(const char *filename, CairoType type, int bWidth, int bHeight)
{
    for(unsigned int i =0; i< Board3DTo2D<Space, KSpace>::myClippingPlaneList.size(); i++)
        trace.info() << "-> ClippingPlane not implemented in Board3DTo2D" << std::endl;

    Viewport[0] = 0; Viewport[1] = 0; Viewport[2] = bWidth; Viewport[3] = bHeight;
    precompute_projection_matrix();

    cairo_surface_t *surface;
    cairo_t *cr;

    switch (type)
    {
    case CairoPDF:
        surface = cairo_pdf_surface_create (filename, Viewport[2], Viewport[3]); break;
    case CairoPS:
        surface = cairo_ps_surface_create (filename, Viewport[2], Viewport[3]); break;
    case CairoEPS:
        surface = cairo_ps_surface_create (filename, Viewport[2], Viewport[3]);
        cairo_ps_surface_set_eps(surface, true); break;
    case CairoSVG:
        surface = cairo_svg_surface_create (filename, Viewport[2], Viewport[3]); break;
    case CairoPNG:
    default:
        surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, Viewport[2], Viewport[3]);
    }

    cr = cairo_create (surface);

    // Fill the background with gray
    cairo_set_source_rgba (cr, .3, .3, .3, 1.);
    cairo_rectangle (cr, 0, 0, Viewport[2], Viewport[3]);
    cairo_fill (cr);

    // Draw the shapes

    // myBallSetList
    for(unsigned int i=0; i<Board3DTo2D<Space, KSpace>::myBallSetList.size(); i++)
    {
        for (typename std::vector<typename Board3DTo2D<Space, KSpace>::BallD3D>::iterator s_it = Board3DTo2D<Space, KSpace>::myBallSetList.at(i).begin();
             s_it != Board3DTo2D<Space, KSpace>::myBallSetList.at(i).end();
             ++s_it)
        {
            {
                cairo_save (cr);

                cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0, 
				       (*s_it).color.blue()/255.0, (*s_it).color.alpha()/255.0);
                cairo_set_line_width (cr, 1.); // arbitraire car non set

                double x1, y1, x2, y2, x3, y3, x4, y4;
                //double width=(*s_it).size/120.; // arbitraire
                double width=0.05; // arbitraire
                // TODO:
                /*double distCam =sqrt((camera_position[0]-centerS.x)*(camera_position[0]-centerS.x)+
(camera_position[1]-centerS.y)*(camera_position[1]-centerS.y)+
(camera_position[2]-centerS.z)*(camera_position[2]-centerS.z));*/

                //z+
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //z-
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x+
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x-
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y+
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y-
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);

                cairo_restore (cr);
            }
        }
    }

    // myLineSetList
    for(unsigned int i=0; i<Board3DTo2D<Space, KSpace>::myLineSetList.size(); i++)
    {
        for (typename std::vector<typename Board3DTo2D<Space, KSpace>::LineD3D>::iterator s_it = Board3DTo2D<Space, KSpace>::myLineSetList.at(i).begin();
             s_it != Board3DTo2D<Space, KSpace>::myLineSetList.at(i).end();
             ++s_it)
        {
            {
                cairo_save (cr);
		
                cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0, 
				       (*s_it).color.blue()/255.0, (*s_it).color.alpha()/255.0);

                double x1, y1;
                double x2, y2;
                project((*s_it).point1[0], (*s_it).point1[1], (*s_it).point1[2], x1, y1);
                project((*s_it).point2[0], (*s_it).point2[1], (*s_it).point2[2], x2, y2);
                cairo_move_to (cr, x1, y1);
                cairo_line_to (cr, x2, y2);

                //cairo_set_line_width (cr, (*s_it).width);
                cairo_set_line_width (cr, 1.); // arbitraire car non set

                cairo_stroke (cr);

                cairo_restore (cr);
            }
        }
    }

    // myCubeSetList
    for(typename  Board3DTo2D<Space, KSpace>::CubesMap::const_iterator it = Board3DTo2D<Space, KSpace>::myCubesMap.begin();
        it != Board3DTo2D<Space, KSpace>::myCubesMap.end();   it++)
    {
       for (typename std::vector< typename Board3DTo2D<Space, KSpace>::CubeD3D>::const_iterator s_it = it->second.begin();
           s_it != it->second.end(); ++s_it)
         {
           {
             cairo_save (cr);
             
             if (Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode")
               cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0,
                                      (*s_it).color.blue()/255.0, (*s_it).color.alpha()/(255.0*1.75)); // *1.75 arbitraire
             else
               cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0,
                                      (*s_it).color.blue()/255.0, (*s_it).color.alpha()/(255.0*0.75)); // *0.75 arbitraire
             
             cairo_set_line_width (cr, 1.); // arbitraire car non set
             
             double x1, y1, x2, y2, x3, y3, x4, y4;
                double width=(*s_it).width;

                //z+
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //z-
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x+
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x-
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y+
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]+width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y-
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x1, y1);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]+width, x2, y2);
                project((*s_it).center[0]+width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x3, y3);
                project((*s_it).center[0]-width,  (*s_it).center[1]-width, (*s_it).center[2]-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);

                cairo_restore (cr);
            }
        }
    }

    // for(typename Display3D<Space, KSpace>::QuadsMap::iterator it = myQuadsMap.begin(); it != myQuadsMap.end(); it++)
    if ( myQuadsMap.begin() != myQuadsMap.end() )
      trace.info() << "-> Quad not YET implemented in Board3DTo2D" << std::endl;

    // Drawing all Khalimsky Space Cells

    // Prism (from updateList)
    for (typename std::vector<typename Board3DTo2D<Space, KSpace>::QuadD3D>::iterator s_it =Board3DTo2D<Space, KSpace>:: myPrismList.begin();
         s_it != Board3DTo2D<Space, KSpace>::myPrismList.end();
         ++s_it)
    {
        {
            cairo_save (cr);

            if (Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode")
	      cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0,
				     (*s_it).color.blue()/255.0, (*s_it).color.alpha()/(255.0*3.75)); // *3.75 arbitraire
            else
	      cairo_set_source_rgba (cr, (*s_it).color.red()/255.0, (*s_it).color.green()/255.0,
				     (*s_it).color.blue()/255.0, (*s_it).color.alpha()/(255.0*0.75)); // *0.75 arbitraire

            cairo_set_line_width (cr, 1.); // arbitraire car non set

            double x1, y1, x2, y2, x3, y3, x4, y4;

            project((*s_it).point1[0],  (*s_it).point1[1], (*s_it).point1[2], x1, y1);
            project((*s_it).point2[0],  (*s_it).point2[1], (*s_it).point2[2], x2, y2);
            project((*s_it).point3[0],  (*s_it).point3[1], (*s_it).point3[2], x3, y3);
            project((*s_it).point4[0],  (*s_it).point4[1], (*s_it).point4[2], x4, y4);
            cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr); Board3DTo2D<Space, KSpace>::myModes["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);

            cairo_restore (cr);
        }
    }

    /*
    // KSLinel
    for(unsigned int i=0; i< myKSLinelList.size();i++)
    {
        //if (!myKSLinelList.at(i).isSigned) // for the moment, same for Signed or NonSigned
        {
            {
                cairo_save (cr);

                cairo_set_source_rgba (cr, myKSLinelList.at(i).R/255.0, myKSLinelList.at(i).G/255.0, myKSLinelList.at(i).B/255.0, myKSLinelList.at(i).T/255.0);
                cairo_set_line_width (cr, 4.); // arbitraire car non set

                double x1, y1, x2, y2;

                project(myKSLinelList.at(i).x1,  myKSLinelList.at(i).y1, myKSLinelList.at(i).z1, x1, y1);
                project(myKSLinelList.at(i).x2,  myKSLinelList.at(i).y2, myKSLinelList.at(i).z2, x2, y2);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_close_path (cr); cairo_stroke (cr);

                cairo_restore (cr);
            }
        }
    }


    // KSBallel
    for(std::vector<ballD3D>::iterator it=myKSBallelList.begin(); it != myKSBallelList.end(); it++)
    {
        //if (!it->isSigned) // for the moment, same for Signed or NonSigned
        {
            {
                cairo_save (cr);

                cairo_set_source_rgba (cr, it->R/255.0, it->G/255.0, it->B/255.0, it->T/255.0);
                cairo_set_line_width (cr, 1.); // arbitraire car non set

                double x1, y1, x2, y2, x3, y3, x4, y4;
                //double width=it->size/120.; // arbitraire
                double width=0.04; // arbitraire

                //z+
                project(it->x-width,  it->y+width, it->z+width, x1, y1);
                project(it->x+width,  it->y+width, it->z+width, x2, y2);
                project(it->x+width,  it->y-width, it->z+width, x3, y3);
                project(it->x-width,  it->y-width, it->z+width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //z-
                project(it->x-width,  it->y+width, it->z-width, x1, y1);
                project(it->x+width,  it->y+width, it->z-width, x2, y2);
                project(it->x+width,  it->y-width, it->z-width, x3, y3);
                project(it->x-width,  it->y-width, it->z-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x+
                project(it->x+width,  it->y-width, it->z+width, x1, y1);
                project(it->x+width,  it->y+width, it->z+width, x2, y2);
                project(it->x+width,  it->y+width, it->z-width, x3, y3);
                project(it->x+width,  it->y-width, it->z-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //x-
                project(it->x-width,  it->y-width, it->z+width, x1, y1);
                project(it->x-width,  it->y+width, it->z+width, x2, y2);
                project(it->x-width,  it->y+width, it->z-width, x3, y3);
                project(it->x-width,  it->y-width, it->z-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y+
                project(it->x-width,  it->y+width, it->z+width, x1, y1);
                project(it->x+width,  it->y+width, it->z+width, x2, y2);
                project(it->x+width,  it->y+width, it->z-width, x3, y3);
                project(it->x-width,  it->y+width, it->z-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);
                //y-
                project(it->x-width,  it->y-width, it->z+width, x1, y1);
                project(it->x+width,  it->y-width, it->z+width, x2, y2);
                project(it->x+width,  it->y-width, it->z-width, x3, y3);
                project(it->x-width,  it->y-width, it->z-width, x4, y4);
                cairo_move_to (cr, x1, y1); cairo_line_to (cr, x2, y2); cairo_line_to (cr, x3, y3); cairo_line_to (cr, x4, y4); cairo_line_to (cr, x1, y1); cairo_close_path (cr);Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]=="SolidMode"?cairo_fill (cr):cairo_stroke (cr);

                cairo_restore (cr);
            }
        }
    }
     */

    if (type==CairoPNG)
        cairo_surface_write_to_png (surface, filename);

    cairo_destroy (cr);
    cairo_surface_destroy (surface);
}

/*!
* \brief init function (should be in Constructor).
*/
template < typename Space, typename KSpace>
void
DGtal::Board3DTo2D<Space, KSpace>::init()
{
    Board3DTo2D<Space, KSpace>::createNewCubeList();

    std::vector<typename Board3DTo2D<Space, KSpace>::LineD3D> listeLine;
    Board3DTo2D<Space, KSpace>::myLineSetList.push_back(listeLine);

    std::vector<typename Board3DTo2D<Space, KSpace>::BallD3D> listeBall;
    Board3DTo2D<Space, KSpace>::myBallSetList.push_back(listeBall);

    Board3DTo2D<Space, KSpace>::myCurrentFillColor = DGtal::Color (220, 220, 220);
    Board3DTo2D<Space, KSpace>::myCurrentLineColor = DGtal::Color (22, 22, 222, 50);

    /*createNewCubeList();
std::vector<cubeD3D> aKSCubeList;*/

    Board3DTo2D<Space, KSpace>::myDefaultColor= DGtal::Color(255, 255, 255);

    //

    camera_position[0] = 5.000000; camera_position[1] = 5.000000; camera_position[2] = 29.893368;
    camera_direction[0] = 0.000000; camera_direction[1] = 0.000000; camera_direction[2] = -1.000000;
    camera_upVector[0] = 0.000000; camera_upVector[1] = 1.000000; camera_upVector[2] = 0.000000;

    ZNear = 0.001;
    ZFar = 100.0;
    //ZNear = 4.578200;
    //ZFar = 22.578199;

   Board3DTo2D<Space, KSpace>::myModes ["Board3DTo2D"]="SolidMode";
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
