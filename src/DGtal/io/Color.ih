/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Color.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/07/17
 *
 * Implementation of inline methods defined in Color.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cmath>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Color'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Color' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const Color & object )
{
    object.selfDisplay ( out );
    return out;
}

inline
DGtal::Color
DGtal::operator*( const double coeff,
                  const Color & aColor )
 {
    Color c=aColor*coeff;
    return c;
  }

inline DGtal::Color &
DGtal::Color::setRGBi( const unsigned char aRedValue,
           const unsigned char aGreenValue,
           const unsigned char aBlueValue,
           const unsigned char aAlphaValue ) {
  myRed = aRedValue;
  myGreen = aGreenValue;
  myBlue = aBlueValue;
  myAlpha = aAlphaValue;
  return *this;
}


inline void
DGtal::Color::red( const unsigned char aRedValue )
{
  myRed = aRedValue;
}

inline void
DGtal::Color::green( unsigned char aGreenValue )
{
  myGreen = aGreenValue;
}

inline void
DGtal::Color::blue( unsigned char aBlueValue )
{
  myBlue = aBlueValue;
}

inline void
DGtal::Color::alpha( unsigned char aAlphaValue )
{
  myAlpha = aAlphaValue;
}

inline
unsigned char
DGtal::Color::red() const
{
 return myRed;
}

inline
unsigned char
DGtal::Color::green() const
{
 return myGreen;
}

inline
unsigned char
DGtal::Color::blue() const
{
 return myBlue;
}

inline
unsigned char
DGtal::Color::alpha() const
{
  return myAlpha;
}
inline
double
DGtal::Color::r() const
{
  return ((double) myRed)/255.0;
}

inline
double
DGtal::Color::g() const
{
  return ((double) myGreen)/255.0;
}

inline
double
DGtal::Color::b() const
{
  return ((double) myBlue)/255.0;
}

inline
double
DGtal::Color::a() const
{
  return ((double) myAlpha)/255.0;
}

inline
DGtal::uint32_t
DGtal::Color::getRGB() const
{
  return (((DGtal::uint32_t) myRed) <<  16)
    |  (((DGtal::uint32_t) myGreen) << 8)
    |  ((DGtal::uint32_t) myBlue);
}

inline
DGtal::uint32_t
DGtal::Color::getRGBA() const
{
  return (((DGtal::uint32_t) myRed) <<  24)
    |  (((DGtal::uint32_t) myGreen) << 16)
    |  (((DGtal::uint32_t) myBlue)<< 8)
    |  ((DGtal::uint32_t) myAlpha);
}

inline
bool
DGtal::Color::valid() const
{
  return (*this) != Color::None;
}

inline
void
DGtal::Color::HSVtoRGB
( double & r, double & g, double & b,
  const double h, const double s, const double v)
{
  int i;
  double f, p, q, t;
  if( s == 0 ) {                     // achromatic (gray)
    r = g = b = v;
    return;
  }
  i = static_cast<int>( floor( h / 60 ) );
  f = ( h / 60 ) - i;                        // factorial part of h
  p = v * ( 1.0 - s );
  q = v * ( 1.0 - s * f );
  t = v * ( 1.0 - s * ( 1.0 - f ) );
  switch( i ) {
  case 0:
    r = v; g = t; b = p;
    break;
  case 1:
    r = q; g = v; b = p;
    break;
  case 2:
    r = p; g = v; b = t;
    break;
   case 3:
     r = p; g = q; b = v;
     break;
  case 4:
    r = t;  g = p; b = v;
    break;
  default:    // case 5:
    r = v; g = p; b = q;
    break;
  }
}

inline
void
DGtal::Color::RGBtoHSV
( double &h, double &s, double &v,
  const unsigned char r,
  const unsigned char g,
  const unsigned char b )
{
  double min = (r<g) ? r : g;
  if ( b < min ) min = b;
  unsigned char max = (r>g) ? r : g;
  if ( b > max ) max = b;

  double dr = r / 255.0;
  double dg = g / 255.0;
  double db = b / 255.0;
  v = max / 255.0; // (0.3*dr + 0.59*dg + 0.11*db);
  if ( max == min ) {
    h = 0;
    s = 0;
    return;
  } else {
    double diff = ( max - min ) / 255.0;
    if ( max == r ) {
      h = (dg - db ) / diff;
    } else if ( max == g ) {
      h = 2.0 + ( ( db - dr ) / diff );
    } else if ( max == b ) {
      h = 4.0 + ( ( dr - dg ) / diff );
    }
    h *= 60.0;
    if ( h < 0 ) h += 360;
    s = diff / v;
  }
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class Color
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Standard services - public :


inline
DGtal::Color::Color( const unsigned int rgb, unsigned char aAlphaValue )
 :myAlpha( aAlphaValue )
{
  myRed = ( rgb & 0xFF0000u ) >> 16;
  myGreen = ( rgb & 0xFF00u ) >> 8;
  myBlue = rgb & 0xFF;
}


inline
DGtal::Color &
DGtal::Color::setRGBA( const DGtal::uint32_t aRGBA )
{
  myRed = ( aRGBA & 0xFF000000u ) >> 24;
  myGreen = ( aRGBA & 0xFF0000u ) >> 16;
  myBlue = ( aRGBA & 0xFF00u ) >> 8;
  myAlpha = aRGBA & 0xFF;
  return *this;
}


inline
DGtal::Color &
DGtal::Color::setRGBf( float aRedValue,
           float aGreenValue,
           float aBlueValue,
           float aAlphaValue  ) {
  if ( aRedValue > 1.0f ) aRedValue = 1.0f;
  if ( aRedValue < 0.0f ) aRedValue = 0.0f;
  myRed = static_cast<unsigned char>( 255 * aRedValue );
  if ( aGreenValue > 1.0f ) aGreenValue = 1.0f;
  if ( aGreenValue < 0.0f ) aGreenValue = 0.0f;
  myGreen = static_cast<unsigned char>( 255 * aGreenValue );
  if ( aBlueValue > 1.0f ) aBlueValue = 1.0f;
  if ( aBlueValue < 0.0f ) aBlueValue = 0.0f;
  myBlue = static_cast<unsigned char>( 255 * aBlueValue );
  if ( aAlphaValue > 1.0f ) aAlphaValue = 1.0f;
  if ( aAlphaValue < 0.0f ) aAlphaValue = 0.0f;
  myAlpha = static_cast<unsigned char>( 255 * aAlphaValue );
  return *this;
}


inline
bool
DGtal::Color::operator==( const Color & aColor ) const
{
  return myRed == aColor.myRed
    && myGreen == aColor.myGreen
    && myBlue == aColor.myBlue
    && myAlpha == aColor.myAlpha;
}


inline
bool
DGtal::Color::operator!=( const Color & aColor ) const
{
  return myRed != aColor.myRed
    || myGreen != aColor.myGreen
    || myBlue != aColor.myBlue
    || myAlpha != aColor.myAlpha;
}


inline
bool
DGtal::Color::operator<( const Color & aColor ) const
{
  if ( myRed < aColor.myRed )
    return true;
  if ( myRed == aColor.myRed ) {
    if ( myGreen < aColor.myGreen )
      return true;
    if ( myGreen == aColor.myGreen ) {
      if ( myBlue < aColor.myBlue )
  return true;
      if ( myBlue == aColor.myBlue )
  return myAlpha < aColor.myAlpha;
    }
  }
  return false;
}


inline
bool
DGtal::Color::operator>( const Color & aColor ) const
{
  return !this->operator<(aColor);
}


inline
bool
DGtal::Color::operator<=( const Color & aColor ) const
{
  return this->operator<(aColor) || this->operator==(aColor);
}


inline
bool
DGtal::Color::operator>=( const Color & aColor ) const
{
  return this->operator>(aColor) || this->operator==(aColor);
}


inline
void
DGtal::Color::flushPostscript( std::ostream & stream ) const
{
  stream << ((double)myRed/255.0) << " "
   << ((double)myGreen/255.0) << " "
   << ((double)myBlue/255.0) << " srgb\n";
}


inline
std::string
DGtal::Color::postscript() const
{
  char buffer[255];
  secured_sprintf( buffer, 255, "%.4f %.4f %.4f", myRed/255.0, myGreen/255.0, myBlue/255.0 );
  return buffer;
}


inline
std::string
DGtal::Color::svg() const
{
  char buffer[255];
  if ( *this == DGtal::Color::None ) return "none";
  secured_sprintf( buffer, 255, "rgb(%d,%d,%d)",myRed, myGreen, myBlue );
  return buffer;
}


inline
std::string
DGtal::Color::svgAlpha( const char * prefix ) const
{
  char buffer[255];
  if ( myAlpha == 255 || *this == DGtal::Color::None ) return "";
  secured_sprintf( buffer, 255, " %s-opacity=\"%f\"", prefix, myAlpha/255.0f );
  return buffer;
}


inline
std::string
DGtal::Color::tikz() const
{
  // see tex/generic/pgf/utilities/pgfutil-plain.def for color definitions
  char buffer[255];
  if ( *this == DGtal::Color::None ) return "none";
  if ( *this == DGtal::Color::Black ) return "black";
  if ( *this == DGtal::Color::Gray ) return "gray";
  if ( *this == DGtal::Color::White ) return "white";
  if ( *this == DGtal::Color::Red ) return "red";
  if ( *this == DGtal::Color::Green ) return "green!50!black";
  if ( *this == DGtal::Color::Lime ) return "green";
  if ( *this == DGtal::Color::Blue ) return "blue";
//  if ( *this == DGtal::Color::Cyan ) return "cyan";
//  if ( *this == DGtal::Color::Magenta ) return "magenta";
//  if ( *this == DGtal::Color::Yellow ) return "yellow";
  if ( *this == DGtal::Color::Silver ) return "white!75!black";
  if ( *this == DGtal::Color::Purple ) return "purple"; 
  if ( *this == DGtal::Color::Navy ) return "blue!50!black";
//  if ( *this == DGtal::Color::Aqua ) return "cyan"; // ???: Is Color::Aqua meant to be equal to Color::Cyan?
  secured_sprintf( buffer, 255, "{rgb,255:red,%d;green,%d;blue,%d}", myRed, myGreen, myBlue );
  return buffer;
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
inline
void
DGtal::Color::selfDisplay ( std::ostream & out ) const
{
  out << "[Color] RGBA("<<(int)myRed<<","<<(int)myGreen<<","<<(int)myBlue<<","<<(int)myAlpha<<")";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
inline
bool
DGtal::Color::isValid() const
{
    return true;
}


///////////////////////////////////////////////////////////////////////////////
// Interface - Constants :

inline const DGtal::Color DGtal::Color::None(0,0,0,0);
inline const DGtal::Color DGtal::Color::Black((unsigned char)0,(unsigned char)0,(unsigned char)0);
inline const DGtal::Color DGtal::Color::Gray((unsigned char)128,(unsigned char)128,(unsigned char)128);
inline const DGtal::Color DGtal::Color::White((unsigned char)255,(unsigned char)255,(unsigned char)255);
inline const DGtal::Color DGtal::Color::Red((unsigned char)255,(unsigned char)0,(unsigned char)0);
inline const DGtal::Color DGtal::Color::Green((unsigned char)0,(unsigned char)255,(unsigned char)0);
inline const DGtal::Color DGtal::Color::Lime((unsigned char)0,(unsigned char)255,(unsigned char)0);
inline const DGtal::Color DGtal::Color::Blue((unsigned char)0,(unsigned char)0,(unsigned char)255);
inline const DGtal::Color DGtal::Color::Cyan((unsigned char)0,(unsigned char)255,(unsigned char)255);
inline const DGtal::Color DGtal::Color::Magenta((unsigned char)255,(unsigned char)0,(unsigned char)255);
inline const DGtal::Color DGtal::Color::Yellow((unsigned char)255,(unsigned char)255,(unsigned char)0);
inline const DGtal::Color DGtal::Color::Silver((unsigned char)190,(unsigned char)190,(unsigned char)190);
inline const DGtal::Color DGtal::Color::Purple((unsigned char)128,(unsigned char)0,(unsigned char)128);
inline const DGtal::Color DGtal::Color::Navy((unsigned char)0,(unsigned char)0,(unsigned char)128);
inline const DGtal::Color DGtal::Color::Aqua((unsigned char)0,(unsigned char)255,(unsigned char)255);

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Internals - private :

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
