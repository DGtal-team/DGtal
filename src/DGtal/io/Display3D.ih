/**
 *  This program is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation, either version 3 of
 *  the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Display3D.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/08/08
 *
 * Implementation of inline methods defined in Display3D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
#include "DGtal/io/Display3DFactory.h"
#include "DGtal/io/writers/MeshWriter.h"
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //



/**
 * Calculate the cross product of two 3d vectors and return it.
 * @param dst destination vector.
 * @param srcA source vector A.
 * @param srcB source vector B.
 */
static inline 
void DGtal::cross (double dst[3], double srcA[3], double srcB[3])
{
  dst[0] = srcA[1]*srcB[2] - srcA[2]*srcB[1];
  dst[1] = srcA[2]*srcB[0] - srcA[0]*srcB[2];
  dst[2] = srcA[0]*srcB[1] - srcA[1]*srcB[0];
}

/**
 * Normalize the input 3d vector.
 * @param vec source & destination vector.
 */
static inline  
void 
DGtal::normalize (double vec[3])
{
  const double squaredLen = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2];
  vec[0] /= sqrt (squaredLen);
  vec[1] /= sqrt (squaredLen);
  vec[2] /= sqrt (squaredLen);
}

inline
void
DGtal::Display3D::setFillColor(DGtal::Color aColor)
{
  myCurrentFillColor=aColor;  
}


inline
void
DGtal::Display3D::setLineColor(DGtal::Color aColor)
{
  myCurrentLineColor=aColor;  
}


inline
DGtal::Color
DGtal::Display3D::getLineColor()
{
  return myCurrentLineColor;
}

inline
DGtal::Color
DGtal::Display3D::getFillColor()
{
  return myCurrentFillColor;
}


inline
std::string
DGtal::Display3D::getMode( const std::string & objectName ) const
{
  ModeMapping::const_iterator itm = myModes.find( objectName );
  return itm == myModes.end() ? "" : itm->second;
}



inline
unsigned int 
DGtal::Display3D::getCurrentDomainNumber(){
  return myImageDomainList.size();
}


inline 
unsigned int 
DGtal::Display3D::getCurrentGLImageNumber(){
  return myGSImageList.size();
}

inline
void
DGtal::Display3D::createNewVoxelList(bool depthTest, std::string str)
{
  std::vector< voxelD3D > v;
  myVoxelSetList.push_back(v);
  myVoxelSetNameList.push_back(str);
  myListVoxelDepthTest.push_back(depthTest);

  
}



inline
void
DGtal::Display3D::createNewPointList(std::string str)
{
  std::vector< pointD3D > v;
  myPointSetList.push_back(v);
  myPointSetNameList.push_back(str);
}


inline
void
DGtal::Display3D::createNewLineList(std::string str)
{
  std::vector< lineD3D > v;
  myLineSetList.push_back(v);
  myLineSetNameList.push_back(str);

}






inline
void
DGtal::Display3D::addVoxel(DGtal::int64_t x, DGtal::int64_t y, DGtal::int64_t z,
			   DGtal::Color aColor, double width, bool withWire)
{
  updateBoundingBox((double)x, (double)y, (double)z);    
  voxelD3D v;
  v.x=(int)x;
  v.y=(int)y;
  v.z=(int)z;
  v.R=aColor.red();
  v.G=aColor.green();
  v.B=aColor.blue();
  v.T=aColor.alpha();
  v.width=width;
  if(withWire)
    {
      addLine(x-0.5, y-0.5, z-0.5, x+0.5, y-0.5, z-0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y-0.5, z-0.5, x+0.5, y+0.5, z-0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y+0.5, z-0.5, x-0.5, y+0.5, z-0.5, DGtal::Color(0,0,0), 2);
      addLine(x-0.5, y+0.5, z-0.5, x-0.5, y-0.5, z-0.5, DGtal::Color(0,0,0), 2);
      
      addLine(x-0.5, y-0.5, z+0.5, x+0.5, y-0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y-0.5, z+0.5, x+0.5, y+0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y+0.5, z+0.5, x-0.5, y+0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x-0.5, y+0.5, z+0.5, x-0.5, y-0.5, z+0.5, DGtal::Color(0,0,0), 2);
      
      addLine(x-0.5, y-0.5, z-0.5, x-0.5, y-0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y-0.5, z-0.5, x+0.5, y-0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x+0.5, y+0.5, z-0.5, x+0.5, y+0.5, z+0.5, DGtal::Color(0,0,0), 2);
      addLine(x-0.5, y+0.5, z-0.5, x-0.5, y+0.5, z+0.5, DGtal::Color(0,0,0), 2);
    
    }
  (myVoxelSetList.at(myVoxelSetList.size()-1)).push_back(v);  
   
}



inline
void
DGtal::Display3D::addPoint(double x, double y, double z ,const DGtal::Color &aColor, double size)
{
  updateBoundingBox(x, y, z);
  pointD3D p;
  p.x=x;
  p.y=y;
  p.z=z;
  p.R=aColor.red();
  p.G=aColor.green();
  p.B=aColor.blue();
  p.T=aColor.alpha();
  p.isSigned=false;
  p.signPos=false;
  p.size=size;
  (myPointSetList.at(myPointSetList.size()-1)).push_back(p);  
}




inline
void
DGtal::Display3D::addLine(double x1, double y1, double z1,  double x2, double y2, double z2,
			  const DGtal::Color & aColor, double width)
{
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  lineD3D l;
  l.x1=x1;
  l.y1=y1;
  l.z1=z1;

  l.x2=x2;
  l.y2=y2;
  l.z2=z2;
    
  l.R=aColor.red();
  l.G=aColor.green();
  l.B=aColor.blue();
  l.T=aColor.alpha();
  l.width=width;
  l.isSigned=false;
  l.signPos=false;

  (myLineSetList.at(myLineSetList.size()-1)).push_back(l);  
   
}





inline
void
DGtal::Display3D::addQuad(double x1, double y1, double z1,  
			  double x2, double y2, double z2,
			  double x3, double y3, double z3,  
			  double x4, double y4, double z4, DGtal::Color aColor)
{
  quadD3D aQuad;
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  updateBoundingBox(x3, y3, z3);
  updateBoundingBox(x4, y4, z4);
  double u[3]; double v [3]; double n [3]; 
  u[0]=x2-x1; u[1]=y2-y1; u[2]=z2-z1;
  v[0]=x3-x1; v[1]=y3-y1; v[2]=z3-z1;
  cross(n, u, v );
  normalize(n);

  if(u[0]==0.0 && u[1]==0.0 && u[2]==0.0){
    trace.error()<< "Warning quad not added due to identical vertex... "<<std::endl;
    return;
  }

  aQuad.x1=x1; aQuad.y1=y1; aQuad.z1=z1;
  aQuad.x2=x2; aQuad.y2=y2; aQuad.z2=z2;
  aQuad.x3=x3; aQuad.y3=y3; aQuad.z3=z3;
  aQuad.x4=x4; aQuad.y4=y4; aQuad.z4=z4;
  aQuad.nx= n[0];
  aQuad.ny= n[1];
  aQuad.nz= n[2];
  
  aQuad.R=aColor.red();
  aQuad.G=aColor.green();
  aQuad.B=aColor.blue();
  aQuad.T=aColor.alpha();
  
  myQuadList.push_back(aQuad);  
}





inline
void
DGtal::Display3D::addTriangle(double x1, double y1, double z1,  double x2,
			      double y2, double z2,
			      double x3, double y3, double z3, DGtal::Color aColor)
{
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  updateBoundingBox(x3, y3, z3);

  triangleD3D aTriangle;
  double u[3]; double v [3]; double n [3]; 
  u[0]=x2-x1; u[1]=y2-y1; u[2]=z2-z1;
  v[0]=x3-x1; v[1]=y3-y1; v[2]=z3-z1;
  cross(n, u, v );
  cross(n, u, v );
  normalize(n);
  
  if(u[0]==0.0 && u[1]==0.0 && u[2]==0.0){
    trace.error()<< "Warning triangle not added due to identical vertex... "<<std::endl;
    return;
  }
  
  aTriangle.x1=x1; aTriangle.y1=y1; aTriangle.z1=z1;
  aTriangle.x2=x2; aTriangle.y2=y2; aTriangle.z2=z2;
  aTriangle.x3=x3; aTriangle.y3=y3; aTriangle.z3=z3;
  
  aTriangle.nx= n[0];
  aTriangle.ny= n[1];
  aTriangle.nz= n[2];
  
  aTriangle.R=aColor.red();
  aTriangle.G=aColor.green();
  aTriangle.B=aColor.blue();
  aTriangle.T=aColor.alpha();
  
  myTriangleList.push_back(aTriangle);  
}





inline
void 
DGtal::Display3D::addPolygon(std::vector<Display3D::pointD3D> vectPointsPolygon, 
                             DGtal::Color aColor)
{
  polygonD3D aPolygon;
  for(unsigned int i=0; i< vectPointsPolygon.size();i++){
    aPolygon.vectPoints.push_back(vectPointsPolygon.at(i));
    updateBoundingBox(vectPointsPolygon.at(i).x, vectPointsPolygon.at(i).y, vectPointsPolygon.at(i).z);
  } 



  double x1= vectPointsPolygon.at(0).x;
  double y1= vectPointsPolygon.at(0).y;
  double z1= vectPointsPolygon.at(0).z;

  double x2= vectPointsPolygon.at(1).x;
  double y2= vectPointsPolygon.at(1).y;
  double z2= vectPointsPolygon.at(1).z;

  double x3= vectPointsPolygon.at(2).x;
  double y3= vectPointsPolygon.at(2).y;
  double z3= vectPointsPolygon.at(2).z;

  double u[3]; double v [3]; double n [3]; 
  u[0]=x2-x1; u[1]=y2-y1; u[2]=z2-z1;
  v[0]=x3-x1; v[1]=y3-y1; v[2]=z3-z1;
  cross(n, u, v );
  normalize(n);  
  
  if(u[0]==0.0 && u[1]==0.0 && u[2]==0.0){
    trace.error()<< "Warning polygin not added due to identical vertex... "<<std::endl;
    return;
  }
  
  aPolygon.nx= n[0];
  aPolygon.ny= n[1];
  aPolygon.nz= n[2];
  
  aPolygon.R=aColor.red();
  aPolygon.G=aColor.green();
  aPolygon.B=aColor.blue();
  aPolygon.T=aColor.alpha();
  
  
  myPolygonList.push_back(aPolygon);  

}


inline
void
DGtal::Display3D::addKSSurfel(double x, double y, double z, 
			      bool xSurfel, bool ySurfel, bool zSurfel, double sizeShiftFactor, 
			      double positionShift, double sizeFactor,
			      bool isSigned, bool aSign, bool basicMode )
{
  updateBoundingBox(x, y, z);
  double retract= 0.05*(sizeShiftFactor+myCurrentfShiftVisuKSSurfels);
  double width= 0.03*(sizeShiftFactor+myCurrentfShiftVisuKSSurfels);
  if(basicMode){
    width=0.0;
    retract=0.0;
  }

  
  double x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4;
  double x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8;
  double dx, dy, dz;
  
  
  ASSERT( xSurfel || ySurfel || zSurfel  );
  
  if(zSurfel)
    {
      x1= x-(0.5*sizeFactor);  y1= y-(0.5*sizeFactor);  z1= z-0.5+positionShift;
      x2= x+(0.5*sizeFactor);  y2= y-(0.5*sizeFactor);  z2= z-0.5+positionShift;
      x3= x+(0.5*sizeFactor);  y3= y+(0.5*sizeFactor);  z3= z-0.5+positionShift;
      x4= x-(0.5*sizeFactor);  y4= y+(0.5*sizeFactor);  z4= z-0.5+positionShift;
      y1+=retract; y2+=retract; y3-=retract; y4-=retract;
      x1+=retract; x2-=retract; x3-=retract; x4+=retract;
      dx=0.0; dy=0.0; dz=width;
    }
  else if(ySurfel)
    {
      x1= x-(0.5*sizeFactor);  y1= y-0.5+positionShift;  z1= z-(0.5*sizeFactor);
      x2= x-(0.5*sizeFactor);  y2= y-0.5+positionShift;  z2= z+(0.5*sizeFactor);
      x3= x+(0.5*sizeFactor);  y3= y-0.5+positionShift;  z3= z+(0.5*sizeFactor);
      x4= x+(0.5*sizeFactor);  y4= y-0.5+positionShift;  z4= z-(0.5*sizeFactor);    
      x1+=retract; x2+=retract; x3-=retract; x4-=retract;
      z1+=retract; z2-=retract; z3-=retract; z4+=retract;
      dx=0.0; dy=width; dz=0.0;
    }
  else
    {
      x1= x-0.5+positionShift;  y1= y-(0.5*sizeFactor);  z1= z-(0.5*sizeFactor);
      x2= x-0.5+positionShift;  y2= y+(0.5*sizeFactor);  z2= z-(0.5*sizeFactor);
      x3= x-0.5+positionShift;  y3= y+(0.5*sizeFactor);  z3= z+(0.5*sizeFactor);
      x4= x-0.5+positionShift;  y4= y-(0.5*sizeFactor);  z4= z+(0.5*sizeFactor);
      y1+=retract; y2-=retract; y3-=retract; y4+=retract;
      z1+=retract; z2+=retract; z3-=retract; z4-=retract;
      dx=width; dy=0.0; dz=0.0;
    }
  
  double xcenter= (x1+x2+x3+x4)/4.0;
  double ycenter= (y1+y2+y3+y4)/4.0;
  double zcenter= (z1+z2+z3+z4)/4.0;
  
  x5=x1-dx; y5=y1-dy; z5= z1-dz;
  x6=x2-dx; y6=y2-dy; z6= z2-dz;
  x7=x3-dx; y7=y3-dy; z7= z3-dz;
  x8=x4-dx; y8=y4-dy; z8= z4-dz;  

  x1=x1+dx; y1=y1+dy; z1= z1+dz;
  x2=x2+dx; y2=y2+dy; z2= z2+dz;
  x3=x3+dx; y3=y3+dy; z3= z3+dz;
  x4=x4+dx; y4=y4+dy; z4= z4+dz;  

  //if cell is oriented positively we retrac the upper face:
  if(isSigned && aSign && !basicMode)
    {
      x1= 0.6*x1+0.4*xcenter; x2= 0.6*x2+0.4*xcenter; x3= 0.6*x3+0.4*xcenter; x4= 0.6*x4+0.4*xcenter;
      y1= 0.6*y1+0.4*ycenter; y2= 0.6*y2+0.4*ycenter; y3= 0.6*y3+0.4*ycenter; y4= 0.6*y4+0.4*ycenter;
      z1= 0.6*z1+0.4*zcenter; z2= 0.6*z2+0.4*zcenter; z3= 0.6*z3+0.4*zcenter; z4= 0.6*z4+0.4*zcenter;
    }else if (isSigned && !basicMode)
    {
      x5= 0.6*x5+0.4*xcenter; x6= 0.6*x6+0.4*xcenter; x7= 0.6*x7+0.4*xcenter; x8= 0.6*x8+0.4*xcenter;
      y5= 0.6*y5+0.4*ycenter; y6= 0.6*y6+0.4*ycenter; y7= 0.6*y7+0.4*ycenter; y8= 0.6*y8+0.4*ycenter;
      z5= 0.6*z5+0.4*zcenter; z6= 0.6*z6+0.4*zcenter; z7= 0.6*z7+0.4*zcenter; z8= 0.6*z8+0.4*zcenter;
    }
  
  

  if(basicMode)
    {
      if(! aSign)
	this->addQuad(x1,y1,z1,x2,y2,z2, x3,y3,z3, x4,y4,z4,myCurrentFillColor );    
      else
	this->addQuad(x4,y4,z4,x3,y3,z3, x2,y2,z2, x1,y1,z1,myCurrentFillColor );    
    
    }
  else
    {
      //main up face
      quadD3D qFaceUp;
      double normaleUp [3];
      normaleUp[0] = dx!=0.0? 1.0:0.0;
      normaleUp[1] = dy!=0.0 ? 1.0:0.0;
      normaleUp[2] = dz!=0.0? 1.0:0.0;
      qFaceUp.nx=  normaleUp[0];
      qFaceUp.ny=  normaleUp[1];
      qFaceUp.nz=  normaleUp[2];

      qFaceUp.x1=x1; qFaceUp.y1=y1; qFaceUp.z1= z1;
      qFaceUp.x2=x2; qFaceUp.y2=y2; qFaceUp.z2= z2;
      qFaceUp.x3=x3; qFaceUp.y3=y3; qFaceUp.z3= z3;
      qFaceUp.x4=x4; qFaceUp.y4=y4; qFaceUp.z4= z4;
  
      qFaceUp.R=myCurrentFillColor.red();qFaceUp.G=myCurrentFillColor.green(); qFaceUp.B=myCurrentFillColor.blue();
      qFaceUp.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFaceUp);  
      //main down face
      quadD3D qFaceDown;
      qFaceDown.nx=  -normaleUp[0];
      qFaceDown.ny=  -normaleUp[1];
      qFaceDown.nz=  -normaleUp[2];
      qFaceDown.x1=x5; qFaceDown.y1=y5; qFaceDown.z1= z5;
      qFaceDown.x2=x8; qFaceDown.y2=y8; qFaceDown.z2= z8;
      qFaceDown.x3=x7; qFaceDown.y3=y7; qFaceDown.z3= z7;
      qFaceDown.x4=x6; qFaceDown.y4=y6; qFaceDown.z4= z6;
      qFaceDown.R=myCurrentFillColor.red();qFaceDown.G=myCurrentFillColor.green(); qFaceDown.B=myCurrentFillColor.blue();
      qFaceDown.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFaceDown);  
    
      //small face 1
      quadD3D qFace1;
      double vF1[3]; double v1 [3]; double n1 [3]; 
      vF1[0] = x2-x1; vF1[1] = y2-y1; vF1[2] = z2-z1;
      v1[0] = x5-x1; v1[1] = y5-y1; v1[2] = z5-z1;
    
      cross(n1, v1,vF1);
      normalize(n1);
      qFace1.nx=n1[0]; qFace1.ny=n1[1]; qFace1.nz=n1[2];
      qFace1.x1= x1; qFace1.y1 =y1; qFace1.z1=z1;
      qFace1.x2= x5; qFace1.y2 =y5; qFace1.z2=z5;
      qFace1.x3= x6; qFace1.y3 =y6; qFace1.z3=z6;
      qFace1.x4= x2; qFace1.y4 =y2; qFace1.z4=z2;
      qFace1.R=myCurrentFillColor.red();qFace1.G=myCurrentFillColor.green(); qFace1.B=myCurrentFillColor.blue();
      qFace1.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFace1);    
  
      //small face 2
      quadD3D qFace2;
      double vF2[3]; double v2 [3]; double n2[3];
      vF2[0]= x3-x2; vF2[1]=y3-y2; vF2[2]= z3-z2;
      v2[0]= x6-x2; v2[1]= y6-y2; v2[2]=z6-z2;
      cross(n2, v2, vF2);
      normalize(n2);
    
      qFace2.nx=n2[0]; qFace2.ny=n2[1]; qFace2.nz=n2[2];
      qFace2.x1= x2; qFace2.y1 =y2; qFace2.z1=z2;
      qFace2.x2= x6; qFace2.y2 =y6; qFace2.z2=z6;
      qFace2.x3= x7; qFace2.y3 =y7; qFace2.z3=z7;
      qFace2.x4= x3; qFace2.y4 =y3; qFace2.z4=z3;
      qFace2.R=myCurrentFillColor.red();qFace2.G=myCurrentFillColor.green(); qFace2.B=myCurrentFillColor.blue();
      qFace2.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFace2);  
  
  
      //small face 3
      quadD3D qFace3;
      double vF3[3]; double v3 [3]; double n3[3];
      vF3[0]= x4-x3; vF3[1]=y4-y3; vF3[2]= z4-z3;
      v3[0]= x7-x3; v3[1]= y7-y3; v3[2]=z7-z3;
      cross(n3, v3, vF3);
      normalize(n3);    
      qFace3.nx=n3[0]; qFace3.ny=n3[1]; qFace3.nz=n3[2];
      qFace3.x1= x3; qFace3.y1 =y3; qFace3.z1=z3;
      qFace3.x2= x7; qFace3.y2 =y7; qFace3.z2=z7;
      qFace3.x3= x8; qFace3.y3 =y8; qFace3.z3=z8;
      qFace3.x4= x4; qFace3.y4 =y4; qFace3.z4=z4;
      qFace3.R=myCurrentFillColor.red();qFace3.G=myCurrentFillColor.green(); qFace3.B=myCurrentFillColor.blue();
      qFace3.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFace3);  
   
      //small face 4
      quadD3D qFace4;
      double vF4[3]; double v4 [3]; double n4[3];
      vF4[0]= x1-x4; vF4[1]=y1-y4; vF4[2]= z1-z4;
      v4[0]= x8-x4; v4[1]= y8-y4; v4[2]=z8-z4;
      cross(n4, v4, vF4);
      normalize(n4);    
      qFace4.nx=n4[0]; qFace4.ny=n4[1]; qFace4.nz=n4[2];
      qFace4.x1= x4; qFace4.y1 =y4; qFace4.z1=z4;
      qFace4.x2= x8; qFace4.y2 =y8; qFace4.z2=z8;
      qFace4.x3= x5; qFace4.y3 =y5; qFace4.z3=z5;
      qFace4.x4= x1; qFace4.y4 =y1; qFace4.z4=z1;
      qFace4.R=myCurrentFillColor.red();qFace4.G=myCurrentFillColor.green(); qFace4.B=myCurrentFillColor.blue();
      qFace4.T=myCurrentFillColor.alpha();
      myKSSurfelList.push_back(qFace4);  
    }
 
}
  




inline
void 
DGtal::Display3D::addKSPointel(double x, double y, double z,
			       double size, bool isSigned, bool signPos)
{
  updateBoundingBox(x, y, z);
  pointD3D pt;
  pt.x=x; pt.y=y; pt.z=z; pt.size=size; 
  pt.R=myCurrentFillColor.red();
  pt.G=myCurrentFillColor.green(); 
  pt.B=myCurrentFillColor.blue(); 
  pt.T= myCurrentFillColor.alpha();
  pt.isSigned=isSigned;
  pt.signPos=signPos;
  myKSPointelList.push_back(pt);
}




inline
void 
DGtal::Display3D::addKSVoxel(int x, int y, int z,  double sizeFactor)
{
  updateBoundingBox(x, y, z);
  voxelD3D v;
  v.x=x;
  v.y=y;
  v.z=z;
  v.R=myCurrentFillColor.red();
  v.G=myCurrentFillColor.green();
  v.B=myCurrentFillColor.blue();
  v.T=myCurrentFillColor.alpha();
  v.width=0.5*sizeFactor;  
  (myVoxelSetList.at(0)).push_back(v);  
}





inline
void
DGtal::Display3D::addKSLinel(double x1, double y1, double z1,
			     double x2, double y2, double z2,
			     double width,  bool isSigned, bool signPos)
{
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  lineD3D l;
  l.x1=x1; l.y1=y1; l.z1=z1; l.x2=x2; l.y2=y2; l.z2=z2; 
  l.width=width; 
  l.R= myCurrentFillColor.red(); 
  l.G= myCurrentFillColor.green(); 
  l.B=myCurrentFillColor.blue(); 
  l.T=myCurrentFillColor.alpha();
  l.isSigned=isSigned;
  l.signPos=signPos; 
  myKSLinelList.push_back(l);
}





inline
void
DGtal::Display3D::addClippingPlane(double a, double b, double c, double d, bool drawPlane)
{
  if(myClippingPlaneList.size()<5)
    {
      clippingPlaneD3D cp;
      cp.a=a; cp.b=b; cp.c=c; cp.d=d;
      myClippingPlaneList.push_back(cp);
      if(drawPlane)
	{
	  double x1,x2,x3,x4;  
	  double y1,y2,y3,y4;
	  double z1,z2,z3,z4;
	  double norm = sqrt(a*a+b*b+c*c);
	  double dec=0.1;
	  // Z dominant projection of the upper face
	  if(abs(c)>=abs(b) && abs(c) >= abs(a))
	    {
	      x1= myBoundingPtUp[0]+a*dec/norm; y1= myBoundingPtUp[1]+b*dec/norm;
	      z1 = c*dec/norm +(-d-a*myBoundingPtUp[0]-b*myBoundingPtUp[1])/c;
	      x2= myBoundingPtLow[0]+a*dec/norm; y2= myBoundingPtUp[1]+b*dec/norm;
	      z2= c*dec/norm+(-d-a*myBoundingPtLow[0]-b*myBoundingPtUp[1])/c;
	      x3= myBoundingPtLow[0]+a*dec/norm; y3= myBoundingPtLow[1]+b*dec/norm;
	      z3= c*dec/norm+(-d-a*myBoundingPtLow[0]-b*myBoundingPtLow[1])/c;
	      x4= myBoundingPtUp[0]+a*dec/norm; y4= myBoundingPtLow[1]+b*dec/norm;
	      z4= c*dec/norm+(-d-a*myBoundingPtUp[0]-b*myBoundingPtLow[1])/c;     
	      if(c>0)
		{
		  addQuad(x4,y4,z4,x3,y3,z3, x2,y2,z2, x1,y1,z1, DGtal::Color(205,0,0, 30));       
		}else
		{
		  addQuad( x1,y1,z1, x2,y2,z2, x3,y3,z3,x4,y4,z4 , DGtal::Color(205,0,0, 30));       
		}
  
	    }// Y dominant projection of the upper face
	  else if(abs(b)>=abs(c) && abs(b) >= abs(a))
	    {
	      x1= myBoundingPtUp[0]+a*dec/norm; z1= myBoundingPtUp[2]+c*dec/norm;
	      y1=  b*dec/norm +(-d-a*myBoundingPtUp[0]-c*myBoundingPtUp[2])/b;
	      x2= myBoundingPtUp[0]+a*dec/norm; z2= myBoundingPtLow[2]+c*dec/norm;
	      y2=  b*dec/norm +(-d-a*myBoundingPtUp[0]-c*myBoundingPtLow[2])/b;
	      x3= myBoundingPtLow[0]+a*dec/norm; z3= myBoundingPtLow[2]+c*dec/norm;
	      y3=  b*dec/norm +(-d-a*myBoundingPtLow[0]-c*myBoundingPtLow[2])/b;
	      x4= myBoundingPtLow[0]+a*dec/norm; z4= myBoundingPtUp[2]+c*dec/norm;
	      y4=  b*dec/norm +(-d-a*myBoundingPtLow[0]-c*myBoundingPtUp[2])/b;
	      if(b>0)
		{
		  addQuad(x4,y4,z4,x3,y3,z3, x2,y2,z2, x1,y1,z1, DGtal::Color(205,0,0, 30));       
		}else
		{
		  addQuad( x1,y1,z1, x2,y2,z2, x3,y3,z3,x4,y4,z4 , DGtal::Color(205,0,0, 30));       
		}
	    }// X dominant projection of the upper face
	  else   if(abs(a)>=abs(c) && abs(a) >= abs(b))
	    {
	      y1= myBoundingPtUp[1]+b*dec/norm; z1= myBoundingPtUp[2]+c*dec/norm;
	      x1=  a*dec/norm +(-d-b*myBoundingPtUp[1]-c*myBoundingPtUp[2])/a;
	      y2= myBoundingPtLow[1]+b*dec/norm; z2= myBoundingPtUp[2]+c*dec/norm;
	      x2=  a*dec/norm +(-d-b*myBoundingPtLow[1]-c*myBoundingPtUp[2])/a;
	      y3= myBoundingPtLow[1]+b*dec/norm; z3= myBoundingPtLow[2]+c*dec/norm;
	      x3=  a*dec/norm +(-d-b*myBoundingPtLow[1]-c*myBoundingPtLow[2])/a;
	      y4= myBoundingPtUp[1]+b*dec/norm; z4= myBoundingPtLow[2]+c*dec/norm;
	      x4=  a*dec/norm +(-d-b*myBoundingPtUp[1]-c*myBoundingPtLow[2])/a;
  
	      if(a>0)
		{
		  addQuad(x4,y4,z4,x3,y3,z3, x2,y2,z2, x1,y1,z1, DGtal::Color(205,0,0, 30));       
		}else
		{
		  addQuad( x1,y1,z1, x2,y2,z2, x3,y3,z3,x4,y4,z4 , DGtal::Color(205,0,0, 30));       
		}
	    }
      
	}
  
    }else
    {
      std::cerr <<"Warning maximal clipping plane added" << std::endl;
    }
}

inline
void
DGtal::Display3D::updateBoundingBox(double x, double y, double z)
{
  if (myBoundingPtEmptyTag)
    {  
      myBoundingPtLow[0]= x;
      myBoundingPtLow[1]= y;
      myBoundingPtLow[2]= z;
      myBoundingPtUp[0]= x;
      myBoundingPtUp[1]= y;
      myBoundingPtUp[2]= z;
      myBoundingPtEmptyTag = false;
    }
  else
    {
      if(x <myBoundingPtLow[0])   myBoundingPtLow[0]= x;
      if(y <myBoundingPtLow[1])   myBoundingPtLow[1]= y;
      if(z <myBoundingPtLow[2])   myBoundingPtLow[2]= z;
  
      if(x >myBoundingPtUp[0])   myBoundingPtUp[0]= x;
      if(y >myBoundingPtUp[1])   myBoundingPtUp[1]= y;
      if(z >myBoundingPtUp[2])   myBoundingPtUp[2]= z;
    }
}


inline
void 
DGtal::Display3D::setScale(float sx, float sy, float sz){
  myScaleX = sx;
  myScaleY = sy;
  myScaleZ = sz;
}



inline
void 
DGtal::Display3D::exportToMesh(DGtal::Mesh<pointD3D> &aMesh) const { 			       

  unsigned int vertexIndex=0;
  
  // Export of KSSurfel lists (generated from KhalimskyCell or SignedKhalimskyCell (through addKSSurfel))
  for (unsigned int i=0; i< myKSSurfelList.size(); i++){
    quadD3D quad = myKSSurfelList.at(i);
    pointD3D p1, p2, p3, p4;
    p1.x=quad.x1*myScaleX; p1.y=quad.y1*myScaleY ;p1.z=quad.z1*myScaleZ;
    p2.x=quad.x2*myScaleX; p2.y=quad.y2*myScaleY ;p2.z=quad.z2*myScaleZ;
    p3.x=quad.x3*myScaleX; p3.y=quad.y3*myScaleY ;p3.z=quad.z3*myScaleZ;
    p4.x=quad.x4*myScaleX; p4.y=quad.y4*myScaleY ;p4.z=quad.z4*myScaleZ;
    aMesh.addVertex(p1);
    aMesh.addVertex(p2);
    aMesh.addVertex(p3);
    aMesh.addVertex(p4);
    aMesh.addQuadFace(vertexIndex, vertexIndex+1, vertexIndex+2,vertexIndex+3,
		      DGtal::Color(quad.R, quad.G, quad.B, quad.T));	
    vertexIndex+=4;
  }
  

  // Export QuadList
  for (unsigned int i=0; i<myQuadList.size(); i++){
    quadD3D quad = myQuadList.at(i);
    pointD3D p1, p2, p3, p4;
    p1.x=quad.x1*myScaleX; p1.y=quad.y1*myScaleY ;p1.z=quad.z1*myScaleZ;
    p2.x=quad.x2*myScaleX; p2.y=quad.y2*myScaleY ;p2.z=quad.z2*myScaleZ;
    p3.x=quad.x3*myScaleX; p3.y=quad.y3*myScaleY ;p3.z=quad.z3*myScaleZ;
    p4.x=quad.x4*myScaleX; p4.y=quad.y4*myScaleY ;p4.z=quad.z4*myScaleZ;
    aMesh.addVertex(p4);
    aMesh.addVertex(p3);
    aMesh.addVertex(p2);
    aMesh.addVertex(p1);
    aMesh.addQuadFace(vertexIndex,vertexIndex+1, vertexIndex+2, vertexIndex+3, 
		      DGtal::Color(quad.R, quad.G, quad.B, quad.T));	
    vertexIndex+=4;
  }


  // Export the mesh from TriangleList
  for (unsigned int i=0; i < myTriangleList.size(); i++){
    triangleD3D aTriangle = myTriangleList.at(i);
    pointD3D p1, p2, p3;
    p1.x = aTriangle.x1*myScaleX; p1.y = aTriangle.y1*myScaleY; p1.z = aTriangle.z1*myScaleZ;
    p2.x = aTriangle.x2*myScaleX; p2.y = aTriangle.y2*myScaleY; p2.z = aTriangle.z2*myScaleZ;
    p3.x = aTriangle.x3*myScaleX; p3.y = aTriangle.y3*myScaleY; p3.z = aTriangle.z3*myScaleZ;
    aMesh.addVertex(p1);
    aMesh.addVertex(p2);
    aMesh.addVertex(p3);
    aMesh.addTriangularFace(vertexIndex, vertexIndex+1, vertexIndex+2,
			    DGtal::Color(aTriangle.R, aTriangle.G, 
					 aTriangle.B, aTriangle.T));
    vertexIndex+=3;
  }

  
  
  
  // Export of voxelSet (generated from addVoxel) 
  for(unsigned int j=0; j<myVoxelSetList.size(); j++){
    for (unsigned int i=0; i< myVoxelSetList.at(j).size(); i++){
      voxelD3D voxel = myVoxelSetList.at(j).at(i);
      pointD3D p1, p2, p3, p4, p5, p6, p7, p8;
      double width= voxel.width;

      p1.x = (voxel.x-width)*myScaleX; p1.y = (voxel.y+width)*myScaleY; p1.z = (voxel.z+width)*myScaleZ;
      p2.x = (voxel.x+width)*myScaleX; p2.y = (voxel.y+width)*myScaleY; p2.z = (voxel.z+width)*myScaleZ;      
      p3.x = (voxel.x+width)*myScaleX; p3.y = (voxel.y-width)*myScaleY; p3.z = (voxel.z+width)*myScaleZ;
      p4.x = (voxel.x-width)*myScaleX; p4.y = (voxel.y-width)*myScaleY; p4.z = (voxel.z+width)*myScaleZ;      
      p5.x = (voxel.x-width)*myScaleX; p5.y = (voxel.y+width)*myScaleY; p5.z = (voxel.z-width)*myScaleZ;
      
      p6.x = (voxel.x+width)*myScaleX; p6.y = (voxel.y+width)*myScaleY; p6.z = (voxel.z-width)*myScaleZ;     
      p7.x = (voxel.x+width)*myScaleX; p7.y = (voxel.y-width)*myScaleY; p7.z = (voxel.z-width)*myScaleZ;
      p8.x = (voxel.x-width)*myScaleX; p8.y = (voxel.y-width)*myScaleY; p8.z = (voxel.z-width)*myScaleZ;
      
      aMesh.addVertex(p1);
      aMesh.addVertex(p2);
      aMesh.addVertex(p3);
      aMesh.addVertex(p4);
      aMesh.addVertex(p5);
      aMesh.addVertex(p6);
      aMesh.addVertex(p7);
      aMesh.addVertex(p8);
      
      //z+
      aMesh.addQuadFace(vertexIndex, vertexIndex+3, vertexIndex+2, vertexIndex+1, 
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      //z-
      aMesh.addQuadFace(vertexIndex+4, vertexIndex+5, vertexIndex+6, vertexIndex+7,
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      //y+
      aMesh.addQuadFace(vertexIndex+1, vertexIndex+2, vertexIndex+6, vertexIndex+5, 
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      //y-
      aMesh.addQuadFace(vertexIndex, vertexIndex+4, vertexIndex+7, vertexIndex+3, 
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      //x+
      aMesh.addQuadFace(vertexIndex, vertexIndex+1, vertexIndex+5, vertexIndex+4, 
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      //x- 
      aMesh.addQuadFace(vertexIndex+3, vertexIndex+7, vertexIndex+6, vertexIndex+2,
			DGtal::Color(voxel.R, voxel.G, voxel.B, voxel.T));
      
      vertexIndex+=8;
    }
  }


}


inline
void 
DGtal::Display3D::addTextureImage(const Display3D::TextureImage &image){
  myGSImageList.push_back(image);
  updateBoundingBox(image.x1, image.y1, image.z1);
  updateBoundingBox(image.x2, image.y2, image.z2);
  updateBoundingBox(image.x3, image.y3, image.z3);
  updateBoundingBox(image.x4, image.y4, image.z4);
}




template <typename TImageType, typename TFunctor>
inline
void 
DGtal::Display3D::updateTextureImage(unsigned int imageIndex,  const TImageType & image, const  TFunctor & aFunctor, 
				       double xTranslation, double yTranslation, double zTranslation){
  BOOST_CONCEPT_ASSERT(( CConstImage < TImageType > ));
  assert ( imageIndex< myGSImageList.size());
  Display3D::TextureImage &anImage = myGSImageList.at(imageIndex); 
  updateBoundingBox(anImage.x1+xTranslation, anImage.y1+yTranslation, anImage.z1+zTranslation);
  updateBoundingBox(anImage.x2+xTranslation, anImage.y2+yTranslation, anImage.z2+zTranslation);
  updateBoundingBox(anImage.x3+xTranslation, anImage.y3+yTranslation, anImage.z3+zTranslation);
  updateBoundingBox(anImage.x4+xTranslation, anImage.y4+yTranslation, anImage.z4+zTranslation);
  anImage.updateImageDataAndParam(image, aFunctor, xTranslation, yTranslation, zTranslation);
  if(anImage.myDrawDomain){
    *this << DGtal::Translate2DDomain(anImage.myIndexDomain, xTranslation, yTranslation, zTranslation); 
  }
}
    


inline 
void 
DGtal::Display3D::updateOrientationTextureImage(unsigned int imageIndex, 
						  double xPosition, double yPosition, double zPosition, ImageDirection newDirection){
  assert ( imageIndex< myGSImageList.size());
  Display3D::TextureImage &anImage = myGSImageList.at(imageIndex); 
  updateBoundingBox(anImage.x1, anImage.y1, anImage.z1);
  updateBoundingBox(anImage.x2, anImage.y2, anImage.z2);
  updateBoundingBox(anImage.x3, anImage.y3, anImage.z3);
  updateBoundingBox(anImage.x4, anImage.y4, anImage.z4);
  anImage.updateImageOrientation(newDirection, xPosition, yPosition, zPosition);
  if(anImage.myDrawDomain){
    *this << DGtal::Update2DDomainPosition(anImage.myIndexDomain,newDirection, xPosition, yPosition, zPosition);
  }
  
}
    




inline      
void
DGtal::Display3D::TextureImage::updateImageOrientation( DGtal::Display3D::ImageDirection normalDir, 
							  double xBottomLeft, double yBottomLeft, double zBottomLeft){
  if(normalDir==zDirection){
    x1 = xBottomLeft-0.5; y1 = yBottomLeft-0.5; z1 = zBottomLeft;
    x2 = xBottomLeft+myImageWidth-0.5; y2 = yBottomLeft-0.5; z2 = zBottomLeft; 
    x3 = xBottomLeft+myImageWidth-0.5; y3 = yBottomLeft+myImageHeight-0.5; z3 = zBottomLeft; 
    x4 = xBottomLeft-0.5; y4 = yBottomLeft+myImageHeight-0.5; z4 = zBottomLeft; 
  }else if(normalDir==yDirection){
    x1 = xBottomLeft-0.5; y1 = yBottomLeft; z1 = zBottomLeft-0.5;
    x2 = xBottomLeft+myImageWidth-0.5; y2 = yBottomLeft; z2 = zBottomLeft-0.5; 
    x3 = xBottomLeft+myImageWidth-0.5; y3 = yBottomLeft; z3 = zBottomLeft+myImageHeight-0.5;
    x4 = xBottomLeft-0.5; y4 = yBottomLeft; z4 = zBottomLeft+myImageHeight-0.5; 
  }else if(normalDir==xDirection){
    x1 = xBottomLeft; y1 = yBottomLeft-0.5; z1= zBottomLeft-0.5;
    x2 = xBottomLeft; y2 = yBottomLeft+myImageWidth-0.5; z2 = zBottomLeft-0.5; 
    x3 = xBottomLeft; y3 = yBottomLeft+myImageWidth-0.5; z3 = zBottomLeft+myImageHeight-0.5; 
    x4 = xBottomLeft; y4 = yBottomLeft-0.5; z4 = zBottomLeft+myImageHeight-0.5; 
  }
  myDirection=normalDir;
}


inline
void 
DGtal::Display3D::Image2DDomainD3D::updateDomainOrientation( Display3D::ImageDirection normalDir, 
							   double xBottomLeft, double yBottomLeft, double zBottomLeft){
    if(normalDir==zDirection){
    x1 = xBottomLeft-0.5; y1 = yBottomLeft-0.5; z1 = zBottomLeft;
    x2 = xBottomLeft+myDomainWidth-0.5; y2 = yBottomLeft-0.5; z2 = zBottomLeft; 
    x3 = xBottomLeft+myDomainWidth-0.5; y3 = yBottomLeft+myDomainHeight-0.5; z3 = zBottomLeft; 
    x4 = xBottomLeft-0.5; y4 = yBottomLeft+myDomainHeight-0.5; z4 = zBottomLeft; 
  }else if(normalDir==yDirection){
    x1 = xBottomLeft-0.5; y1 = yBottomLeft; z1 = zBottomLeft-0.5;
    x2 = xBottomLeft+myDomainWidth-0.5; y2 = yBottomLeft; z2 = zBottomLeft-0.5; 
    x3 = xBottomLeft+myDomainWidth-0.5; y3 = yBottomLeft; z3 = zBottomLeft+myDomainHeight-0.5;
    x4 = xBottomLeft-0.5; y4 = yBottomLeft; z4 = zBottomLeft+myDomainHeight-0.5; 
  }else if(normalDir==xDirection){
    x1 = xBottomLeft; y1 = yBottomLeft-0.5; z1= zBottomLeft-0.5;
    x2 = xBottomLeft; y2 = yBottomLeft+myDomainWidth-0.5; z2 = zBottomLeft-0.5; 
    x3 = xBottomLeft; y3 = yBottomLeft+myDomainWidth-0.5; z3 = zBottomLeft+myDomainHeight-0.5; 
    x4 = xBottomLeft; y4 = yBottomLeft-0.5; z4 = zBottomLeft+myDomainHeight-0.5; 
  }
  myDirection=normalDir;
}



inline 
void 
DGtal::Display3D::Image2DDomainD3D::translateDomain (double xTranslation, 
						     double yTranslation, double zTranslation){    
  x1 += xTranslation; y1 += yTranslation; z1 += zTranslation;
  x2 += xTranslation; y2 += yTranslation; z2 += zTranslation;
  x3 += xTranslation; y3 += yTranslation; z3 += zTranslation;
  x4 += xTranslation; y4 += yTranslation; z4 += zTranslation;
}



template<typename TDomain>
void 
DGtal::Display3D::addImage2DDomainD3D(const TDomain &aDomain, 
				      std::string mode, const DGtal::Color &aColor){
  DGtal::Display3D::Image2DDomainD3D anImageDomain(aDomain);
  anImageDomain.R = aColor.red();
  anImageDomain.G =aColor.green();
  anImageDomain.B =aColor.blue();
  anImageDomain.T =aColor.alpha();
  
  anImageDomain.myMode =  mode;
  anImageDomain.myLineSetIndex=myLineSetList.size();
  
  myImageDomainList.push_back(anImageDomain);
  updateBoundingBox(anImageDomain.x1, anImageDomain.y1, anImageDomain.z1);
  updateBoundingBox(anImageDomain.x2, anImageDomain.y2, anImageDomain.z2);
  updateBoundingBox(anImageDomain.x3, anImageDomain.y3, anImageDomain.z3);
  updateBoundingBox(anImageDomain.x4, anImageDomain.y4, anImageDomain.z4);
  
  std::vector<DGtal::Display3D::lineD3D> vectLines= compute2DDomainLineRepresentation(anImageDomain);
  myLineSetList.push_back(vectLines);
  
  
}

inline
std::vector<DGtal::Display3D::lineD3D> 
DGtal::Display3D::compute2DDomainLineRepresentation( DGtal::Display3D::Image2DDomainD3D &anImageDomain ){
  std::vector<DGtal::Display3D::lineD3D> vectLinesResu= compute2DDomainLineRepresentation(anImageDomain, 0.05);
  std::vector<DGtal::Display3D::lineD3D> vectLinesVerso= compute2DDomainLineRepresentation(anImageDomain, -0.05);
  for(unsigned int i=0; i<vectLinesVerso.size(); i++){
    vectLinesResu.push_back(vectLinesVerso.at(i));
  }
  return vectLinesResu;
}


inline
std::vector<DGtal::Display3D::lineD3D> 
DGtal::Display3D::compute2DDomainLineRepresentation( DGtal::Display3D::Image2DDomainD3D &anImageDomain, double delta ){
  std::vector<DGtal::Display3D::lineD3D> aLineSet;
  lineD3D aLine;
  aLine.R = anImageDomain.R;
  aLine.G = anImageDomain.G;
  aLine.B = anImageDomain.B;
  aLine.T = anImageDomain.T;
  
  if( anImageDomain.myMode=="BoundingBox"){
    aLine.x1=anImageDomain.x1; aLine.y1=anImageDomain.y1; aLine.z1=anImageDomain.z1; 
    aLine.x2=anImageDomain.x2; aLine.y2=anImageDomain.y2; aLine.z2=anImageDomain.z2;
    aLineSet.push_back(aLine);
    aLine.x1=anImageDomain.x2; aLine.y1=anImageDomain.y2; aLine.z1=anImageDomain.z2;
    aLine.x2=anImageDomain.x3; aLine.y2=anImageDomain.y3; aLine.z2=anImageDomain.z3;
    aLineSet.push_back(aLine);
    aLine.x1=anImageDomain.x3; aLine.y1=anImageDomain.y3; aLine.z1=anImageDomain.z3;
    aLine.x2=anImageDomain.x4; aLine.y2=anImageDomain.y4; aLine.z2=anImageDomain.z4;
    aLineSet.push_back(aLine);
    aLine.x1=anImageDomain.x4; aLine.y1=anImageDomain.y4; aLine.z1=anImageDomain.z4;
    aLine.x2=anImageDomain.x1; aLine.y2=anImageDomain.y1; aLine.z2=anImageDomain.z1;
    aLineSet.push_back(aLine);
  }else if(anImageDomain.myMode=="InterGrid"){
    aLine.width=0.3;
    if(anImageDomain.myDirection==zDirection){
      //lines align to the x direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1; aLine.y1 = anImageDomain.y1+i; aLine.z1 = anImageDomain.z1+delta; 
	aLine.x2 = anImageDomain.x2; aLine.y2 = anImageDomain.y1+i; aLine.z2 = anImageDomain.z1+delta; 
	aLineSet.push_back(aLine);
      }
      //lines align to the y direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+i; aLine.y1 = anImageDomain.y1; aLine.z1 = anImageDomain.z1+delta; 
	aLine.x2 = anImageDomain.x1+i; aLine.y2 = anImageDomain.y4; aLine.z2 = anImageDomain.z1+delta; 
	aLineSet.push_back(aLine);
      }
    }else  if(anImageDomain.myDirection==xDirection){
      //lines align to the y direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1+delta; aLine.y1 = anImageDomain.y1; aLine.z1 = anImageDomain.z1+i; 
	aLine.x2 = anImageDomain.x1+delta; aLine.y2 = anImageDomain.y2; aLine.z2 = anImageDomain.z1+i; 
	aLineSet.push_back(aLine);
      }
      
      //lines align to the z direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+delta; aLine.y1 = anImageDomain.y1+i; aLine.z1 = anImageDomain.z1; 
	aLine.x2 = anImageDomain.x1+delta; aLine.y2 = anImageDomain.y1+i; aLine.z2 = anImageDomain.z4; 
	aLineSet.push_back(aLine);
      }
    }else  if(anImageDomain.myDirection==yDirection){
      //lines align to the x direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1; aLine.y1 = anImageDomain.y1+delta; aLine.z1 = anImageDomain.z1+i; 
	aLine.x2 = anImageDomain.x2; aLine.y2 = anImageDomain.y1+delta; aLine.z2 = anImageDomain.z1+i; 
	aLineSet.push_back(aLine);
      }
      
      //lines align to the z direction 
      for(unsigned int i=0; i <= anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+i; aLine.y1 = anImageDomain.y1+delta; aLine.z1 = anImageDomain.z1; 
	aLine.x2 = anImageDomain.x1+i; aLine.y2 = anImageDomain.y1+delta; aLine.z2 = anImageDomain.z4; 
	aLineSet.push_back(aLine);
      }
    }
    
  }else if(anImageDomain.myMode=="Grid"){
    aLine.width=0.3;
    if(anImageDomain.myDirection==zDirection){
      //lines align to the x direction 
      for(unsigned int i=0; i < anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1; aLine.y1 = anImageDomain.y1+i+0.5; aLine.z1 = anImageDomain.z1+delta; 
	aLine.x2 = anImageDomain.x2; aLine.y2 = anImageDomain.y1+i+0.5; aLine.z2 = anImageDomain.z1+delta; 
	aLineSet.push_back(aLine);
      }
      //lines align to the y direction 
      for(unsigned int i=0; i < anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+i+0.5; aLine.y1 = anImageDomain.y1; aLine.z1 = anImageDomain.z1+delta; 
	aLine.x2 = anImageDomain.x1+i+0.5; aLine.y2 = anImageDomain.y4; aLine.z2 = anImageDomain.z1+delta; 
	aLineSet.push_back(aLine);
      }
    }else  if(anImageDomain.myDirection==xDirection){
      //lines align to the y direction 
      for(unsigned int i=0; i < anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1+delta; aLine.y1 = anImageDomain.y1; aLine.z1 = anImageDomain.z1+i+0.5; 
	aLine.x2 = anImageDomain.x1+delta; aLine.y2 = anImageDomain.y2; aLine.z2 = anImageDomain.z1+i+0.5; 
	aLineSet.push_back(aLine);
      }
      
      //lines align to the z direction 
      for(unsigned int i=0; i < anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+delta; aLine.y1 = anImageDomain.y1+i+0.5; aLine.z1 = anImageDomain.z1; 
	aLine.x2 = anImageDomain.x1+delta; aLine.y2 = anImageDomain.y1+i+0.5; aLine.z2 = anImageDomain.z4; 
	aLineSet.push_back(aLine);
      }
    }else  if(anImageDomain.myDirection==yDirection){
      //lines align to the x direction 
      for(unsigned int i=0; i < anImageDomain.myDomainHeight; i++){
	aLine.x1 = anImageDomain.x1; aLine.y1 = anImageDomain.y1+delta; aLine.z1 = anImageDomain.z1+i+0.5; 
	aLine.x2 = anImageDomain.x2; aLine.y2 = anImageDomain.y1+delta; aLine.z2 = anImageDomain.z1+i+0.5; 
	aLineSet.push_back(aLine);
      }
      
      //lines align to the z direction 
      for(unsigned int i=0; i < anImageDomain.myDomainWidth; i++){
	aLine.x1 = anImageDomain.x1+i+0.5; aLine.y1 = anImageDomain.y1+delta; aLine.z1 = anImageDomain.z1; 
	aLine.x2 = anImageDomain.x1+i+0.5; aLine.y2 = anImageDomain.y1+delta; aLine.z2 = anImageDomain.z4; 
	aLineSet.push_back(aLine);
      }
    }
    
  }

 
  return aLineSet;
}




inline 
void 
DGtal::Display3D::updateAn2DDomainOrientation(unsigned int domainIndex, 
					      double xPosition, double yPosition, double zPosition, ImageDirection newDirection){
  Display3D::Image2DDomainD3D &anDomain = myImageDomainList.at(domainIndex); 
  updateBoundingBox(anDomain.x1, anDomain.y1, anDomain.z1);
  updateBoundingBox(anDomain.x2, anDomain.y2, anDomain.z2);
  updateBoundingBox(anDomain.x3, anDomain.y3, anDomain.z3);
  updateBoundingBox(anDomain.x4, anDomain.y4, anDomain.z4);
  anDomain.updateDomainOrientation(newDirection, xPosition, yPosition, zPosition);

  std::vector<DGtal::Display3D::lineD3D> vectNewLines= compute2DDomainLineRepresentation(anDomain);  
   std::vector<DGtal::Display3D::lineD3D> &vectLines = myLineSetList.at(anDomain.myLineSetIndex); 
  vectLines.clear();
  for(unsigned int i=0; i<vectNewLines.size(); i++){
    vectLines.push_back(vectNewLines.at(i));
  }
  
}

inline
void
DGtal::Display3D::translateAn2DDomain(unsigned int domainIndex, double xTranslation, double yTranslation, double zTranslation){
  Display3D::Image2DDomainD3D &anDomain = myImageDomainList.at(domainIndex); 
  anDomain.translateDomain(xTranslation, yTranslation, zTranslation);
  
  updateBoundingBox(anDomain.x1, anDomain.y1, anDomain.z1);
  updateBoundingBox(anDomain.x2, anDomain.y2, anDomain.z2);
  updateBoundingBox(anDomain.x3, anDomain.y3, anDomain.z3);
  updateBoundingBox(anDomain.x4, anDomain.y4, anDomain.z4);

  std::vector<DGtal::Display3D::lineD3D> vectNewLines= compute2DDomainLineRepresentation(anDomain);  
  std::vector<DGtal::Display3D::lineD3D> &vectLines = myLineSetList.at(anDomain.myLineSetIndex); 
  
  vectLines.clear();
  for(unsigned int i=0; i<vectNewLines.size(); i++){
    vectLines.push_back(vectNewLines.at(i));
  }
}

    

   
inline
std::string 
DGtal::Display3D::TextureImage::className() const
{
  return "TextureImage";
}





template <typename TDrawableWithDisplay3D>
inline
DGtal::Display3D & 
DGtal::Display3D::operator<<( const TDrawableWithDisplay3D & object )
{
  //  BOOST_CONCEPT_ASSERT((CDrawableWithDisplay3D< TDrawableWithDisplay3D >));
  
  DGtal::Display3DFactory::draw(*this, object);
  return *this;
}

/**
 * Overloads 'operator<<' for displaying objects of class 'Display3D'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Display3D' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
		    const Display3D & object )
{
  object.selfDisplay ( out );
  return out;
}


inline
void
DGtal::operator>> ( const Display3D &aDisplay3D, DGtal::Mesh<Display3D::pointD3D> &aMesh)
{
  aDisplay3D.exportToMesh(aMesh);
}



inline
void
DGtal::operator>> ( const Display3D &aDisplay3D,  std::string aFilename)
{
  // exporting with a mesh containing color (parameter constructor to true):
  DGtal::Mesh<Display3D::pointD3D> mesh(true);
  aDisplay3D >> mesh;
  trace.info() << "generating faces done." << std::endl;
  mesh >> aFilename;
  trace.info() << "file exported in file: " << aFilename << std::endl;
}



  


//                                                                           //
///////////////////////////////////////////////////////////////////////////////


