/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * @file Display3D.ih
 * @author Bastien Doignies <bastien.doignies@liris.cnrs.fr>
 *
 * @date 2025/05/11
 *
 * Implementation file for 3D Display
 *
 * This file is part of the DGtal library.
 */

namespace DGtal {
  namespace drawutils {
    template<size_t I>
    std::vector<std::array<size_t, I>> makeIndices(size_t N) {
      std::vector<std::array<size_t, I>> indices(N);
    
      for (size_t i = 0; i < N; ++i) {
        for (size_t j = 0; j < I; ++j) {
          indices[i][j] = j + i * I;
        }
      }
      return indices;
    }

    template<typename T> 
    std::array<T, 8> getCubeVertices(T center, double size) {
      return {
        center + 0.5 * size * T(-1, -1, -1), 
        center + 0.5 * size * T( 1, -1, -1),
        center + 0.5 * size * T( 1,  1, -1), 
        center + 0.5 * size * T(-1,  1, -1),
        center + 0.5 * size * T(-1, -1,  1), 
        center + 0.5 * size * T( 1, -1,  1),
        center + 0.5 * size * T( 1,  1,  1), 
        center + 0.5 * size * T(-1,  1,  1)
      };
    }

    template<typename T, typename U>
    void insertCubeVertices(U& dest, T center, double scale) {
      auto vertices = getCubeVertices(center, scale);
      dest.insert(dest.end(), vertices.begin(), vertices.end());
    }

    template <typename T>
    std::array<T, 4> getAASquareVertices(T center, int orientation, double size) {
      switch(orientation) {
      case 0: // Normal in x direction
        return {
          center + 0.5 * size * T(0, -1, -1), 
          center + 0.5 * size * T(0, -1,  1),
          center + 0.5 * size * T(0,  1,  1),
          center + 0.5 * size * T(0,  1, -1)
        };
      case 1: // Normal in y direction
        return {
          center + 0.5 * size * T(-1, 0, -1), 
          center + 0.5 * size * T(-1, 0,  1),
          center + 0.5 * size * T( 1, 0,  1),
          center + 0.5 * size * T( 1, 0, -1)
        };
      case 2: // Normal in z direction
      default:
        return {
          center + 0.5 * size * T(-1, -1, 0), 
          center + 0.5 * size * T(-1,  1, 0),
          center + 0.5 * size * T( 1,  1, 0),
          center + 0.5 * size * T( 1, -1, 0)
        };
      }
    }

    template<typename U, typename T>
    void insertAASquare(U& dest, T center, int orientation, double size) {
      auto vertices = getAASquareVertices(center, orientation, size);
      dest.insert(dest.end(), vertices.begin(), vertices.end());
    }

    template<typename T>
    std::array<T, 8> getPrism(
        T center, int orientation, 
        double size1, double size2, double shift1, double shift2
    ) {
      T dir(0, 0, 0); dir[orientation] = 1; 

      std::array<T, 8> vertices;
      auto fQuad = getAASquareVertices(center + shift1 * dir, orientation, size1);
      auto sQuad = getAASquareVertices(center + shift2 * dir, orientation, size2);

      std::copy(fQuad.begin(), fQuad.end(), vertices.begin());
      std::copy(sQuad.begin(), sQuad.end(), vertices.begin() + fQuad.size());
      return vertices;
    }

    template<typename T, typename U>
    void insertPrism(U& dest, T center, int orientation, 
                     double scale1, double scale2, double shift1, double shift2) {
      auto vertices = getPrism(center, orientation, scale1, scale2, shift1, shift2);
      dest.insert(dest.end(), vertices.begin(), vertices.end());
    }
  } // drawutils

  ///////////////////////////////////////////////////////////////////////////
  ///////////////////////////// GENERAL COMMANDS ////////////////////////////

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::clear() {
    endCurrentGroup();
  
    myToRender.clear();
    planes.clear();
    data.clear();

    clearView();
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::setCallback(typename Display3D<Space, KSpace>::Callback* callback) {
      this->myCallback = callback;
      if (this->myCallback) {
        this->myCallback->viewer = this;
        this->myCallback->OnAttach(this);
      }
    }

  ///////////////////////////// GENERAL COMMANDS ////////////////////////////
  ///////////////////////////////////////////////////////////////////////////
  
  ///////////////////////////////////////////////////////////////////////////
  ///////////////////////////// GROUP MANAGEMENT ////////////////////////////

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::newList(const std::string& name, size_t eSize) {
    static const std::string token = "{i}";

    auto it = data.find(name);
    std::string newName = name;

    size_t idx = name.find(token);
    if (it != data.end() || idx != std::string::npos) {
      std::string prefix = name;

      if (idx == std::string::npos) {
        idx = prefix.size() + 1;
        prefix = prefix + "_" + token;
      }

      size_t i = 1;
      do {
        std::string tmpPrefix = prefix;
        newName = tmpPrefix.replace(idx, token.size(), std::to_string(i));

        i += 1;
      } while (data.find(newName) != data.end());
    }
    
    // Insert a new empty container
    DisplayData<RealPoint> newData;

    // Set properties
    newData.style = currentStyle;
    newData.elementSize = eSize;

    myCurrentData = &data.emplace(newName, std::move(newData)).first->second;
    myCurrentName = newName;
    // Add to render queue
    myToRender.push_back(myCurrentName);
    // Return computed name 
    return newName;
  }

  template <typename Space, typename KSpace>
  bool Display3D<Space, KSpace>::setCurrentList(const std::string& name) {
    auto it = data.find(name);
    if (it == data.end()) 
      return false;
    
    myCurrentData = &it->second;
    myCurrentName = name;
    return true;
  }

  template <typename Space, typename KSpace>
  bool Display3D<Space, KSpace>::canCreateNewList(size_t elementSize) const {
    if (!myCurrentData) return true;
    if (myCurrentData->elementSize != elementSize) return true;
    return !allowReuseList;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::createOrReuseList(const std::string& name, size_t elementSize) {
    if (canCreateNewList(elementSize)) {
      return newList(name, elementSize);
    }
    return myCurrentName;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::endCurrentGroup() {
    myCurrentData = nullptr;
    myCurrentName = "";
  }

  ///////////////////////////// GROUP MANAGEMENT /////////////////////////////
  ////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////// DRAW MODIFIERS //////////////////////////////

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const DGtal::Color& color, const std::string& name) {
    ((void) name);
    drawColor(color);
    return "";
  }
  
  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawColor(const DGtal::Color& color) {
    currentStyle.color = color;
    currentStyle.useDefaultColors = false;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::setDefaultColors() {
    currentStyle.useDefaultColors = true;
  }
  
  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawAdjacencies(bool toggle) {
    if (toggle) currentStyle.mode |=  DisplayStyle::ADJACENCIES;
    else        currentStyle.mode &= ~DisplayStyle::ADJACENCIES;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawAsSimplified(bool toggle) {
    if (toggle) currentStyle.mode |=  DisplayStyle::SIMPLIFIED;
    else        currentStyle.mode &= ~DisplayStyle::SIMPLIFIED;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawAsGrid(bool toggle) {
    if (toggle) currentStyle.mode |=  DisplayStyle::GRID;
    else        currentStyle.mode &= ~DisplayStyle::GRID;
  }
  
  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::defaultStyle() {
    currentStyle.mode = DisplayStyle::DEFAULT;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawAsPaving() {
    currentStyle.mode &= ~DisplayStyle::BALLS;
    currentStyle.mode |= DisplayStyle::PAVING;
  }

  template <typename Space, typename KSpace>
  void Display3D<Space, KSpace>::drawAsBalls() {
    currentStyle.mode &= ~DisplayStyle::PAVING;
    currentStyle.mode |=  DisplayStyle::BALLS;
  }

  ////////////////////////////// DRAW MODIFIERS //////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////// DRAW COMMANDS ///////////////////////////////

  template <typename Space, typename KSpace>
  template<typename Obj>
  Display3D<Space, KSpace>& Display3D<Space, KSpace>::operator<<(const Obj& obj) {
    draw(obj);
    return *this;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const Point& p, const std::string& uname) {
    return draw(myEmbedder.embed(p), uname);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const RealPoint& rp, const std::string& uname) {
    std::string name = myCurrentName;

    if (currentStyle.mode & DisplayStyle::BALLS) {
      name = createOrReuseBallList(uname);
      myCurrentData->vertices.push_back(rp);
    } else {
      name = createOrReuseCubeList(uname);
      drawutils::insertCubeVertices(myCurrentData->vertices, rp, myCurrentData->style.width);
    }
    return name;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const std::pair<RealPoint, RealPoint>& arrow, const std::string& uname) {
    // Warning, this function draw arrows, not lines !
    std::string name = createOrReuseBallList(uname);
    myCurrentData->vertices.push_back(arrow.first);
    myCurrentData->vectorQuantities[QuantityScale::VERTEX]["value"].push_back(arrow.second);
    return name;
  }

  template <typename Space, typename KSpace>
  template<typename T>
  std::string Display3D<Space, KSpace>::draw(const std::vector<T>& range, const std::string& uname) {
    return drawGenericRange(range, uname);
  }

  template <typename Space, typename KSpace>
  template<typename A, typename B, typename C>
  std::string Display3D<Space, KSpace>::draw(const ConstRangeAdapter<A, B, C> range, const std::string& uname) {
    return drawGenericRange(range, uname);
  }

  template <typename Space, typename KSpace>
  template<typename A, typename B, typename C>
  std::string Display3D<Space, KSpace>::draw(const ConstIteratorAdapter<A, B, C>& adapter, const std::string& uname) {
    if (uname.empty()) {
      // Use default value of draw
      return draw(*adapter);
    }
    return draw(*adapter, uname);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const GridCurve<KSpace>& curve, const std::string& uname) {
    return draw(curve.getSCellsRange(), uname);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const typename GridCurve<KSpace>::MidPointsRange& range, const std::string& uname) {
    return drawGenericRange(range, uname);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const typename GridCurve<KSpace>::ArrowsRange& range, const std::string& uname) {
    return drawGenericRange(range, uname);
  }

  template <typename Space, typename KSpace>
  template <DGtal::Dimension emb, DGtal::Dimension amb, typename Algebra, typename Int>
  std::string Display3D<Space, KSpace>::draw(const DiscreteExteriorCalculus<emb, amb, Algebra, Int>& calc, const std::string& uname) {
    bool save = allowReuseList;
    allowReuseList = true;

    // Maintains multiple names it contains any dimension type
    std::string list0   = newBallList(uname + "_0d");
    std::string list1   = newLineList(uname + "_1d");
    std::string list2_1 = newQuadList(uname + "_2d");
    std::string list2_2 = newVolumetricList(uname + "_2d_signed");
    std::string list3   = newCubeList(uname + "_3d");

    const std::string* const lists[4] = { &list0, &list1, &list2_2, &list3 };

    for (auto it = calc.begin(); it != calc.end(); ++it) {
      const auto& cell = it->first;
      const bool& flip = it->second.flipped;

      const SCell displayed = calc.myKSpace.signs(cell, flip ? KSpace::NEG : KSpace::POS);

      const bool xodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(displayed.preCell().coordinates[0]) & 1);
      const bool yodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(displayed.preCell().coordinates[1]) & 1);
      const bool zodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(displayed.preCell().coordinates[2]) & 1);
      
      const int dim = xodd + yodd + zodd;

      setCurrentList(*lists[dim]);
      if ((dim == 2) && (currentStyle.mode & DisplayStyle::SIMPLIFIED))
        setCurrentList(list2_1);

      const auto rp = mySCellEmbedder.embed(displayed);
      drawKCell(*lists[dim], rp, xodd, yodd, zodd, true, displayed.preCell().positive);
    }

    allowReuseList = save;
    endCurrentGroup();
    return list2_2; // Return one of the name
  }

  template <typename Space, typename KSpace>
  template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
  std::string Display3D<Space, KSpace>::draw(const KForm<Calculus, order, duality>& kform, const std::string& uname) {
    bool save = allowReuseList;
    allowReuseList = true;

    // using CSCell = Calculus::SCell;
    using Scalar = typename Calculus::Scalar;
    
    std::string list0   = newBallList(uname + "_0d");
    std::string list1   = newLineList(uname + "_1d");
    std::string list2_1 = newQuadList(uname + "_2d");
    std::string list2_2 = newVolumetricList(uname + "_2d_signed");
    std::string list3   = newCubeList(uname + "_3d");

    const std::string* lists[4] = { &list0, &list1, &list2_2, &list3 };

    for (typename Calculus::Index i = 0; i < kform.length(); ++i) {
      const SCell cell = kform.getSCell(i);
      const Scalar val = kform.myContainer(i);

      const bool xodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[0]) & 1);
      const bool zodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[2]) & 1);
      const bool yodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[1]) & 1);
      
      const int dim = xodd + yodd + zodd;
      if (!std::isfinite(val)) continue;

      setCurrentList(*lists[dim]);
      if ((dim == 2) && (currentStyle.mode & DisplayStyle::SIMPLIFIED))
        setCurrentList(list2_1);
      
      // Automatically decide the scalle of the quantity
      draw(WithQuantity(cell, "value", val));
    }

    allowReuseList = save;
    endCurrentGroup();
    return list2_2; // Return one of the name
  }


  template <typename Space, typename KSpace>
  template <typename Calculus, DGtal::Duality dual> 
  std::string Display3D<Space, KSpace>::draw(const VectorField<Calculus, dual>& field, const std::string& uname) {
    std::string name = newBallList(uname);
    
    myCurrentData->style.width = 0.; // Make ball diseapear
    myCurrentData->vertices.reserve(field.length());
    myCurrentData->vectorQuantities[QuantityScale::VERTEX]["value"].reserve(field.length());

    for (typename Calculus::Index i = 0; i < field.length(); ++i) {
      const auto& origin = mySCellEmbedder.embed(field.getSCell(i));
      const auto vector = field.getVector(i);

      if (std::isfinite(vector[0]) && std::isfinite(vector[1]) && std::isfinite(vector[2])) {
        myCurrentData->vertices.push_back(origin);
        myCurrentData->vectorQuantities[QuantityScale::VERTEX]["value"].push_back(vector);
      }
    }

    endCurrentGroup();
    return name;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const KCell& cell, const std::string& name) {
    const RealPoint rp = myCellEmbedder.embed(cell);
    
    const bool xodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[0]) & 1);
    const bool yodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[1]) & 1);
    const bool zodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[2]) & 1);
      
    return drawKCell(name, rp, xodd, yodd, zodd, false, false);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const SCell& cell, const std::string& name) {
    const RealPoint rp = mySCellEmbedder.embed(cell);
    
    const bool xodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[0]) & 1);
    const bool yodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[1]) & 1);
    const bool zodd = (NumberTraits<typename KSpace::Integer>::castToInt64_t(cell.preCell().coordinates[2]) & 1);
    
    return drawKCell(name, rp, xodd, yodd, zodd, true, cell.preCell().positive);
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const HyperRectDomain<Space>& domain, const std::string& uname) {
   
    std::string name;
    
    if (currentStyle.mode & DisplayStyle::GRID) {
      name = newLineList(uname);
      
      // Faces YX
      for (auto z = domain.myLowerBound[2]; z <= domain.myUpperBound[2]; z++) {
        for (auto x = domain.myLowerBound[0];  x <= domain.myUpperBound[0]; x++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(x, domain.myLowerBound[1], z) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(x, domain.myUpperBound[1], z) );
          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }

        for (auto y = domain.myLowerBound[1]; y <= domain.myUpperBound[1]; y++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(domain.myLowerBound[0], y, z) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(domain.myUpperBound[0], y, z) );
          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }
      }

      // Faces XZ
      for (auto y = domain.myLowerBound[1]; y <= domain.myUpperBound[1]; y++) {
        for (auto x = domain.myLowerBound[0]; x <= domain.myUpperBound[0]; x++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(x, y, domain.myLowerBound[2]) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(x, y, domain.myLowerBound[2]) );

          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }
        for (auto z =  domain.myLowerBound[2]; z <= domain.myUpperBound[2]; z++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(domain.myLowerBound[0], y, z) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(domain.myUpperBound[0], y, z) );

          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }
      }

      // Faces YZ
      for (auto x = domain.myLowerBound[0]; x <= domain.myUpperBound[0]; x++) {
        for (auto y = domain.myLowerBound[1];  y <= domain.myUpperBound[1]; y++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(x, y, domain.myLowerBound[2]) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(x, y, domain.myUpperBound[2]) );

          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }
        for (auto z = domain.myLowerBound[2]; z <= domain.myUpperBound[2]; z++) {
          DGtal::Z3i::RealPoint rp1 = myEmbedder.embed( DGtal::Z3i::Point(x, domain.myLowerBound[1], z) );
          DGtal::Z3i::RealPoint rp2 = myEmbedder.embed( DGtal::Z3i::Point(x, domain.myLowerBound[1], z) );

          myCurrentData->vertices.push_back(rp1);
          myCurrentData->vertices.push_back(rp2);
        }
      }
    }
    else
    {
      name = drawGenericRange(domain, uname);
      if (!(currentStyle.mode & DisplayStyle::BALLS))
      {
        data[name].style.useDefaultColors=false;
        data[name].style.color.alpha(64);
      }
    }

    endCurrentGroup();
    return name;
  }

  template <typename Space, typename KSpace>
  template <typename Vec>
  std::string Display3D<Space, KSpace>::drawPolygon(const std::vector<Vec>& vertices, const std::string& uname) {
    std::string name = createOrReusePolygonList(uname);
    
    std::vector<unsigned> indices;
    indices.reserve(vertices.size());

    size_t count = myCurrentData->vertices.size();
    for (const auto& vert : vertices) {
      myCurrentData->vertices.push_back(vert);
      indices.push_back(count++);
    }
    myCurrentData->indices.push_back(std::move(indices));
    return name;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::drawBall(const RealPoint& c, const std::string& uname) {
    std::string name = createOrReuseBallList(uname);
    myCurrentData->vertices.push_back(c);
    return name;
  }
  
  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::drawLine(const RealPoint& a, const RealPoint& b, const std::string& uname) {
    std::string name = createOrReuseLineList(uname);

    myCurrentData->vertices.push_back(a);
    myCurrentData->vertices.push_back(b);
    return name;
  }

  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::drawQuad(const RealPoint& a, const RealPoint& b, const RealPoint& c, const RealPoint& d, const std::string& uname) {
    // Not a draw specialization as it would be confusing with a drawing call of
    // an array of points, or other primitives
    std::string name = createOrReuseQuadList(uname);

    myCurrentData->vertices.push_back(a);
    myCurrentData->vertices.push_back(b);
    myCurrentData->vertices.push_back(c);
    myCurrentData->vertices.push_back(d);

    return name;
  }

  template <typename Space, typename KSpace>
  template <typename Obj, typename Cont>
  std::string Display3D<Space, KSpace>::draw(const DigitalSetByAssociativeContainer<Obj, Cont>& set, const std::string& name) {
    return drawGenericRange(set, name);
  }

  template <typename Space, typename KSpace>
  template <typename D, typename T>
  std::string Display3D<Space, KSpace>::draw(const ImageContainerBySTLVector<D, T>& image, const std::string& name) {
    return drawImage(name, image);
  }
  
  template <typename Space, typename KSpace>
  template <typename TImageContainer,
            typename TNewDomain,
            typename TFunctorD,
            typename TNewValue,
            typename TFunctorV,
            typename TFunctorVm1>
  std::string Display3D<Space, KSpace>::draw(const ImageAdapter<TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV, TFunctorVm1>& adapter, const std::string& name) {
    return drawImageAdaptDom(name, adapter);
  }
        
  template <typename Space, typename KSpace>
  template <typename TImageContainer,
            typename TNewDomain,
            typename TFunctorD,
            typename TNewValue,
            typename TFunctorV>
  std::string Display3D<Space, KSpace>::draw(const ConstImageAdapter<TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV>& adapter, const std::string& name) {
    return drawImageAdaptDom(name, adapter);
  }

  template <typename Space, typename KSpace>
  template <typename Adj, typename Set>
  std::string Display3D<Space, KSpace>::draw(const DGtal::Object<Adj, Set>& obj, const std::string& uname) {
    std::string name = drawGenericRange(obj, uname);

    // Draw adjacency if needed
    if (currentStyle.mode & DisplayStyle::ADJACENCIES) {
      newLineList(name + "_adj");
      
      for (auto it = obj.begin(); it != obj.end(); ++it) {
          auto neig = obj.properNeighborhood(*it);

          const RealPoint p = myEmbedder.embed(*it);
          for (auto it2 = neig.begin(); it2 != neig.end(); ++it2) {
            auto p2 = myEmbedder.embed(*it2);

            myCurrentData->vertices.push_back(p);
            myCurrentData->vertices.push_back(p2);
          }
      }
    }
    endCurrentGroup();
    return name;
  }
  
  template <typename Space, typename KSpace>
  template <typename T, typename Type>
  std::string Display3D<Space, KSpace>::draw(const WithQuantity<T, Type>& props, const std::string& uname) {
    std::string name;
    if (uname.empty())
      name = draw(props.object);
    else
      name = draw(props.object, uname);

    QuantityScale sloc = props.scale;
    
    // Tries to find an appropriate scale
    if (sloc == QuantityScale::UNKNOWN)
      sloc = data[name].getDefaultQuantityLevel(data[name].elementSize);

    if (sloc == QuantityScale::UNKNOWN) {
      trace.error() << "Unable to find suitable quantity scale, defaulting to vertex (for: '" << name << "')\n";
      sloc = QuantityScale::VERTEX;
    }

    addQuantity(name, props.name, props.values, sloc);
    return name;
  }
  
  template <typename Space, typename KSpace>
  template <typename Type>
  void Display3D<Space, KSpace>::addQuantity(const std::string& oName, const std::string& qName, const Type& value, QuantityScale scale) {
    std::vector<Type> values = {value};
    addQuantity(oName, qName, values, scale);
  }

  template <typename Space, typename KSpace>
  template <typename Type>
  void Display3D<Space, KSpace>::addQuantity(const std::string& oName, const std::string& qName, const std::vector<Type>& values, QuantityScale scale) {
    if (scale == QuantityScale::UNKNOWN)
      scale = data[oName].getDefaultQuantityLevel(data[oName].elementSize);

    if (scale == QuantityScale::UNKNOWN) {
      trace.error() << "Unable to find suitable quantity scale, defaulting to vertex (for: '" << oName << "')\n";
      scale = QuantityScale::VERTEX;
    }

    if constexpr (std::is_scalar_v<Type>) {
      auto& loc = data[oName].scalarQuantities[scale][qName];
      loc.insert(loc.end(), values.begin(), values.end());
    }
    else if constexpr(std::is_same_v<RealPoint, Type>) {
      auto& loc = data[oName].vectorQuantities[scale][qName];
      loc.insert(loc.end(), values.begin(), values.end());
    }  
    else if constexpr(std::is_same_v<Color , Type>) {
      auto& loc = data[oName].colorQuantities[scale][qName];
      loc.insert(loc.end(), values.begin(), values.end());
    }
    else {
      trace.error() << "Unknown quantity type (for: '" << oName << "')\n";
    }

  }

  template <typename Space, typename KSpace>
  template <typename Pt>
  std::string Display3D<Space, KSpace>::draw(const Mesh<Pt>& mesh, const std::string& uname) {
    // A mesh may have quad faces, therefore we render it as a polygonal mesh
    std::string name = newPolygonList(uname);

    myCurrentData->vertices.reserve(mesh.nbVertex());

    myCurrentData->indices.reserve(mesh.nbFaces());
    myCurrentData->colorQuantities[QuantityScale::FACE]["color"].reserve(mesh.nbFaces());

    // Can not insert directly vectors because of type mismatch
    for (auto it = mesh.vertexBegin(); it != mesh.vertexEnd(); ++it) {
      myCurrentData->vertices.push_back(*it);
    }
    for (size_t i = 0; i < mesh.nbFaces(); ++i) {
      const auto& face = mesh.getFace(i);
      std::vector<unsigned int> fIdx;
      fIdx.reserve(face.size());
      for (auto j : face) {
        fIdx.push_back(j);
      }
      myCurrentData->indices.push_back(std::move(fIdx));
      myCurrentData->colorQuantities[QuantityScale::FACE]["color"].push_back(mesh.getFaceColor(i));
    }
    endCurrentGroup();
    return name;
  }

  template <typename Space, typename KSpace>
  template <typename It, typename Int, int Con>
  std::string Display3D<Space, KSpace>::draw(const StandardDSS6Computer<It, Int, Con>& computer, const std::string& uname) {
    std::string name;
    if (currentStyle.mode & DisplayStyle::BALLS) {
      name = newBallList(uname);

      for (auto it = computer.begin(); it != computer.end(); ++it) {
        const auto rp = myEmbedder.embed(*it);
        myCurrentData->vertices.push_back(rp);
      }
    } else { // Default mode
      name = newLineList(uname);

      auto it = computer.begin();
      RealPoint a = myEmbedder.embed(*it);
      RealPoint b = a;

      for (++it; it != computer.end(); ++it) {
        b = myEmbedder.embed(*it);
        myCurrentData->vertices.push_back(a);
        myCurrentData->vertices.push_back(b);

        std::swap(a, b);
      }
    }
    
    endCurrentGroup();
    return name;
  }
  
  template <typename Space, typename KSpace>
  template<typename It, typename Int, int Con>
  std::string Display3D<Space, KSpace>::draw(const Naive3DDSSComputer<It, Int, Con>& computer, const std::string& uname) {
    std::string name = drawGenericRange(computer, uname);
    endCurrentGroup();

    if (currentStyle.mode & DisplayStyle::ADJACENCIES) {
      newLineList(uname + "_links");

      auto it = computer.begin();
      auto prev = myEmbedder(*it);
      ++it;

      for (; it != computer.end(); ++it) {
        auto p = myEmbedder(*it);
        myCurrentData->vertices.push_back(prev);
        myCurrentData->vertices.push_back(p);
        prev = p;
      }

      endCurrentGroup();
    }
    return name;
  }
      
  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::draw(const ClippingPlane& plane, const std::string& uname) {
    ((void) uname);
    planes.push_back(plane);
    planes.back().style = currentStyle;
    return "";
  }

  template <typename Space, typename KSpace>
  template <typename T>
  std::string Display3D<Space, KSpace>::draw(const SphericalAccumulator<T> accumulator, const std::string& uname) {
    std::string name = newQuadList(uname);

    typedef typename SphericalAccumulator<T>::Size Size;
    typedef typename SphericalAccumulator<T>::RealVector Vec;

    Size i, j;
    Vec a, b, c, d;
    for (auto it = accumulator.begin(); it != accumulator.end(); ++it) {
      accumulator.binCoordinates(it, i, j);

      if (accumulator.isValidBin(i, j)) {
        accumulator.getBinGeometry(i, j, a, b, c, d);

        myCurrentData->vertices.push_back(a);
        myCurrentData->vertices.push_back(b);
        myCurrentData->vertices.push_back(c);
        myCurrentData->vertices.push_back(d);
        myCurrentData->scalarQuantities[QuantityScale::FACE]["value"].push_back(accumulator.count(i, j));
      }
    }
    return name;
  }      

  // Generic functions
  template <typename Space, typename KSpace>
  template <typename Range> 
  std::string Display3D<Space, KSpace>::drawGenericRange(const Range& range, const std::string& uname) {
    bool save = allowReuseList;

    endCurrentGroup();
    allowReuseList = true;

    auto it = range.begin();

    std::string name = myCurrentName; 
    if (uname.empty()) {
      name = draw(*it);
    } else {
      name = draw(*it, uname);
    }

    myCurrentData->vertices.reserve(
      myCurrentData->vertices.size() +
      myCurrentData->elementSize * std::distance(range.begin(), range.end())
    );

    for (++it; it != range.end(); ++it) {
      draw(*it, name);
    }

    endCurrentGroup();
    allowReuseList = save; 
    return name;
  }

  template <typename Space, typename KSpace>
  template <typename T>
  std::string Display3D<Space, KSpace>::drawImage(const std::string& uname, const T& image) {
    std::string name = newCubeList(uname);

    size_t total = image.domain().size();

    auto it = image.domain().begin();
    auto itend = image.domain().end();
    constexpr size_t dim = T::Domain::Space::dimension;
    
    myCurrentData->vertices.reserve(8 * total);
    myCurrentData->scalarQuantities[QuantityScale::CELL]["value"].reserve(total);
    for(; it != itend; ++it) {
      RealPoint rp;
      if constexpr (dim == 3) {
        rp = myEmbedder.embed(*it);
      } else {
        // We accept to draw theses 2D image, do ask to parametrize to also the myEmbedder...
        rp = myEmbedder.embed(Z3i::Point((*it)[0], (*it)[1], 0)); 
      }
      myCurrentData->scalarQuantities[QuantityScale::CELL]["value"].push_back(image(*it));
      drawutils::insertCubeVertices(myCurrentData->vertices, rp, myCurrentData->style.width);
    }
    return name;
  }
  
  template <typename Space, typename KSpace>
  template <typename T>
  std::string Display3D<Space, KSpace>::drawImageAdaptDom(const std::string& uname, const T& image) {
    std::string name = newCubeList(uname);

    size_t total = image.domain().size();

    auto it = image.domain().begin();
    auto itend = image.domain().end();
    constexpr size_t dim = T::Domain::Space::dimension;
    
    myCurrentData->vertices.reserve(8 * total);
    myCurrentData->scalarQuantities[QuantityScale::CELL]["value"].reserve(total);
    for(; it != itend; ++it) {
      RealPoint rp;
      if constexpr (dim == 3) {
        rp = myEmbedder.embed(*it);
      } else {
        // We accept to draw theses 2D image, do ask to parametrize to also the myEmbedder...
        rp = myEmbedder.embed(image.sourceDomainPoint(Z2i::Point((*it)[0], (*it)[1]))); 
      }
      myCurrentData->scalarQuantities[QuantityScale::CELL]["value"].push_back(image(*it));
      drawutils::insertCubeVertices(myCurrentData->vertices, rp, myCurrentData->style.width);
    }
    return name;
  }

  
  template <typename Space, typename KSpace>
  std::string Display3D<Space, KSpace>::drawKCell(std::string uname, const RealPoint& rp, bool xodd, bool yodd, bool zodd, bool hasSign, bool sign) {
    std::string name = myCurrentName;
    static const std::string TOKEN = "{d}";
    static const double scale = 0.9;
    static const double shift = 0.05;
    static const double smallScale = 0.3;
    static const double smallShift = 0.15;
    // For 2D cell, this indicates if the big quad is 
    // inside the cell or outside
    static const int orientationPermut[3][2] = {
      {1, 0}, {0, 1}, {1, 0}
    };

    const unsigned int dim = xodd + yodd + zodd;

    auto tokenPos = uname.find(TOKEN);
    if (tokenPos != std::string::npos) 
      uname.replace(uname.find(TOKEN), TOKEN.size(), std::to_string(dim));

    switch(dim) {
      case 0: {
        name = createOrReuseBallList(uname);
        if (myCurrentData->vertices.size() == 0)
            myCurrentData->style.width *= scale;

        myCurrentData->vertices.push_back(rp);
      }
      break;
      case 1: {
        name = createOrReuseLineList(uname);

        const RealPoint newshift(xodd, yodd, zodd);
        myCurrentData->vertices.push_back(rp - 0.5 * newshift);
        myCurrentData->vertices.push_back(rp + 0.5 * newshift);
      }
      break;
      case 2: {
        const unsigned int orientation = (!xodd ? 0 : (!yodd ? 1 : 2));
        if (currentStyle.mode & DisplayStyle::SIMPLIFIED || !hasSign) {
          name = createOrReuseQuadList(uname);

          const double scale1 = myCurrentData->style.width * scale;

          drawutils::insertAASquare(myCurrentData->vertices, rp, orientation, scale1);
        } else {
          name = createOrReuseVolumetricList(uname);
          
          const double scales[2] = {
            scale      * myCurrentData->style.width, 
            smallScale * myCurrentData->style.width
          };
          
          // Decide where the big quad goes, in the interior or the exterior
          // of the cell depending on sign and the orientation
          int permut = orientationPermut[orientation][sign];
          double scale1 = scales[    permut];
          double scale2 = scales[1 - permut];
          double shift1 = shift;
          double shift2 = smallShift;

          drawutils::insertPrism(myCurrentData->vertices, rp, orientation, scale1, scale2, shift1, shift2);
        }
      }
      break;
      case 3: {
        name = createOrReuseCubeList(uname);
        drawutils::insertCubeVertices(myCurrentData->vertices, rp, myCurrentData->style.width);
      };
      break;
    };

    return name;
  }


} // DGtal
