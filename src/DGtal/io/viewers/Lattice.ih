/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Lattice.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/12/06
 *
 * Implementation of inline methods defined in Lattice.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * @return the dimension of the lattice space.
 */
template <typename TSpace>
inline
typename TSpace::Dimension
DGtal::Lattice<TSpace>::n() const
{ 
  return myN;
}

/**
 * @return the dimension of the target space.
 */
template <typename TSpace>
inline
typename TSpace::Dimension
DGtal::Lattice<TSpace>::m() const
{
  return myM;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace>
inline
void
DGtal::Lattice<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[Lattice n=" << myN << " m=" << myM << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace>
inline
bool
DGtal::Lattice<TSpace>::isValid() const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////
// Standard services - public :

/**
 * Destructor. 
 */
template <typename TSpace>
inline
DGtal::Lattice<TSpace>::~Lattice()
{
  if ( myX0 != 0 ) delete[] myX0;
  if ( myV != 0 ) delete[] myV;
}


/**
 * Constructor.
 */
template <typename TSpace>
inline
DGtal::Lattice<TSpace>::Lattice()
  : myN( 0 ), myM( 0 ), myX0( 0 ), myV( 0 )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template <typename TSpace>
DGtal::Lattice<TSpace>::Lattice ( const Lattice<Space> & other )
  : myN( other.myN ), myM( other.myM ), myX0( 0 ), myV( 0 )
{
  if ( ( myN == 0 ) || ( myM == 0 ) ) return;
  myX0 = new double[ myM ];
  myV = new double[ myM * myN ];
  for ( Dimension j = 0; j < myM; j++ )
    myX0[ j ] = other.myX0[ j ];
  for ( Dimension i = 0; i < myN; i++ )
    {
      for ( Dimension j = 0; j < myM; j++ )
  myV[ m*i + j ] = other.myV[ m*i + j ];
    }
}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 */
template <typename TSpace>
inline
DGtal::Lattice<TSpace> & 
DGtal::Lattice<TSpace>::operator= ( const Lattice<Space> & other )
{
  if ( this != &other )
    {
      if ( ( other.myM != myM ) || ( other.myN != myN ) )
  {
    if ( myX0 != 0 ) delete[] myX0;
    if ( myV != 0 ) delete[] myV;
    myN = other.myN;
    myM = other.myM;
    if ( ( myN == 0 ) || ( myM == 0 ) ) 
      {
        myX0 =0;
        myV = 0;
      }
    else
      {
        myX0 = new double[ myM ];
        myV = new double[ myM * myN ];
      }
  }
      for ( Dimension j = 0; j < myM; j++ )
  myX0[ j ] = other.myX0[ j ];
      for ( Dimension i = 0; i < myN; i++ )
  {
    for ( Dimension j = 0; j < myM; j++ )
      myV[ m*i + j ] = other.myV[ m*i + j ];
  }
    }
  return *this;
}

/**
 * Defines the standard lattice when n=m, the standard injection
 * when n < m, and when m > n, vectors are overlapping.
 *
 * @param n the dimension of the lattice space
 * @param m the dimension of the target space where the lattice is represented.
 * @param dh the length of the elementary displacement.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::init( Dimension aN, Dimension aM, double dh )
{
  ASSERT( aN > 0 );
  ASSERT( aM > 0 );
  if ( ( aM != myM ) || ( aN != myN ) )
    {
      myN = aN;
      myM = aM;
      if ( myX0 != 0 ) delete[] myX0;
      if ( myV != 0 ) delete[] myV;
      myX0 = new double[ aM ];
      myV = new double[ aM*aN ];
    }
  for ( Dimension j = 0; j < aM; j++ )
    myX0[ j ] = 0.0;
  for ( Dimension i = 0; i < aN; i++ )
    {
      for ( Dimension j = 0; j < aM; j++ )
  myV[ aM*i + j ] = ( j == ( i % aM ) ) ? dh : 0.0;  
    }
}

template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::clear()
{
  if ( myX0 != 0 ) delete[] myX0;
  if ( myV != 0 ) delete[] myV;
  myX0 = 0;
  myV = 0;
  myN = 0;
  myM = 0;
}

/**
 * Sets the origin of the space.
 * @param x is a vector of size m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::setOrigin( const double* x )
{
  for ( Dimension j = 0; j < myM; j++ )
    myX0[ j ] = x[ j ];
}


/**
 * Sets the elementary vector along direction i
 * @param i is a coordinate between 0 and n-1.
 * @param v is a vector of size m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::setVector( Dimension i, const double* v )
{
  double* off_v = myV + myM*i;
  for ( Dimension j = 0; j < myM; j++ )
    off_v[ j ] = v[ j ];
}


/**
 * Immerse a point of the lattice into the target space of dimension m.
 *
 * @param p the n coordinates of a point in the lattice.
 * @param x (returns) its m coordinates in the target space of dimension m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::immerse( const Integer* p, double* x ) const
{
  for ( Dimension j = 0; j < myM; j++ )
    x[ j ] = myX0[ j ];

  double* off_v = myV;
  for ( Dimension i = 0; i < myN; i++ )
    {
      Integer pi = p[ i ];
      for ( Dimension j = 0; j < myM; j++ )
  {
    x[ j ] += (*off_v) * pi;
    ++off_v;
  }
    }  
}

/**
 * Immerse a point of the lattice into the target space of dimension m.
 *
 * @param p the n coordinates of a point in the lattice.
 * @param x (returns) its m coordinates in the target space of dimension m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::immerse( const Point & p, double* x ) const
{
  for ( Dimension j = 0; j < myM; j++ )
    x[ j ] = myX0[ j ];

  double* off_v = myV;
  for ( Dimension i = 0; i < myN; i++ )
    {
      Integer pi = p[ i ];
      for ( Dimension j = 0; j < myM; j++ )
  {
    x[ j ] += (*off_v) * pi;
    ++off_v;
  }
    }  
}

/**
 * Immerse a point of the lattice into the target space of dimension m.
 *
 * @param p the n coordinates of a point in the lattice.
 * @param x (returns) its m coordinates in the target space of dimension m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::immerse( const Integer* p, float* x ) const
{
  for ( Dimension j = 0; j < myM; j++ )
    x[ j ] = (float) myX0[ j ];

  double* off_v = myV;
  for ( Dimension i = 0; i < myN; i++ )
    {
      Integer pi = p[ i ];
      for ( Dimension j = 0; j < myM; j++ )
  {
    x[ j ] += (float) ((*off_v) * pi);
    ++off_v;
  }
    }  
}

/**
 * Immerse a point of the lattice into the target space of dimension m.
 *
 * @param p the n coordinates of a point in the lattice.
 * @param x (returns) its m coordinates in the target space of dimension m.
 */
template <typename TSpace>
inline
void 
DGtal::Lattice<TSpace>::immerse( const Point & p, float* x ) const
{
  for ( Dimension j = 0; j < myM; j++ )
    x[ j ] = (float) myX0[ j ];

  double* off_v = myV;
  for ( Dimension i = 0; i < myN; i++ )
    {
      Integer pi = p[ i ];
      for ( Dimension j = 0; j < myM; j++ )
  {
    x[ j ] += (float) ((*off_v) * pi);
    ++off_v;
  }
    }  
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const Lattice<TSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


