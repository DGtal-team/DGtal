/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MyApplication.ih
 * @author Anis Benyoub (\c anis.benyoub@insa-lyon.fr )
 * Liris CNRS
 *
 * @date 2012/08/31
 *
 * Implementation of inline methods defined in MyApplication.h
 *
 * This file is part of the DGtal library.
 */


///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#import "MyApplication.h"
//////////////////////////////////////////////////////////////////////////////



int MyApplicationMain(int argc, const char **argv)
{
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
	
  NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
  Class principalClass =
    NSClassFromString([infoDictionary objectForKey:@"NSPrincipalClass"]);


  NSApplication *applicationObject = [principalClass sharedApplication];
    

  [[NSNotificationCenter defaultCenter]
   postNotificationName:NSApplicationWillFinishLaunchingNotification
   object:NSApp];
  [[NSNotificationCenter defaultCenter]
   postNotificationName:NSApplicationDidFinishLaunchingNotification
   object:NSApp];
	
  int i=0;

  do
    {
      NSEvent *event =
        [applicationObject
         nextEventMatchingMask:NSAnyEventMask
         untilDate:[NSDate distantFuture]
         inMode:NSDefaultRunLoopMode
         dequeue:YES];
		
      [applicationObject sendEvent:event];
      [applicationObject updateWindows];
    } while (DGtal::InputListener::getSingletonPtr()->viewerIsRunning());
	
  return 0;
}

@implementation MyApplication


- (void)terminate:(id)sender
{
  shouldKeepRunning = NO;
}

@end

