/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file OFFWriter.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 *
 * @date 2012/07/08
 *
 * Implementation of inline methods defined in OFFWriter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <fstream>
#include "DGtal/io/Color.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


namespace DGtal {
  
  template<typename TPoint>
  bool 
  OFFWriter<TPoint>::export2OFF(const std::string & filename, const  std::vector<TPoint> &vectVertex,
				const std::vector<unsigned int > &vectFaces,	unsigned int numFaces,			  
			const std::vector<DGtal::Color> &vectColorFaces) throw(DGtal::IOException){
    DGtal::IOException dgtalio;
    ofstream out;
    try
      {
	out.open(filename.c_str());
      out << "OFF"<< endl;
      out << "# generated from OFFWriter from the DGTal library"<< endl;
      out << vectVertex.size() << " " << numFaces << " " << 0 << " " << endl;
      
      for(unsigned int i=0; i<vectVertex.size(); i++){
	out << vectVertex.at(i).x << " " << vectVertex.at(i).y << " "<< vectVertex.at(i).z << endl;	
      }
      int position=0;
      while(position < vectFaces.size()){
	unsigned int nbVertex = vectFaces.at(position);
	out << nbVertex << " " ;
	for(int j=0; j< nbVertex; j++){
	  out << vectFaces.at(position+j+1)<< " " ;
	}
	
	DGtal::Color col = vectColorFaces.at(position);
	out << (int) col.red() << " "<< (int) col.green() << " "<< (int) col.blue() << " " << (int) col.alpha()<< endl ;
	position+=nbVertex+1;
      }
      
      
      
    }catch( ... )
      {
	std::cout << "OFF writer IO error on export " << filename << endl;
	throw dgtalio;
      }
  
  
}
  


}//namespace
