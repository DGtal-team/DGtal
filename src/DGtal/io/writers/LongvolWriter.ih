/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file LongvolWriter.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/11
 *
 * Implementation of inline methods defined in LongvolWriter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <fstream>
#include "DGtal/io/Color.h"
#include <boost/iostreams/filtering_streambuf.hpp>
#include <boost/iostreams/copy.hpp>
#include <boost/iostreams/filter/zlib.hpp>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


namespace DGtal {
  template<typename I,typename C>
  bool
  LongvolWriter<I,C>::exportLongvol(const std::string & filename, const I & aImage, const bool compressed,
                                    const Functor  & aFunctor)
  {
    DGtal::IOException dgtalio;
    
    std::ofstream out;
    typename I::Domain domain = aImage.domain();
    const typename I::Domain::Point &upBound = domain.upperBound();
    const typename I::Domain::Point &lowBound = domain.lowerBound();
    typename I::Domain::Point p = I::Domain::Point::diagonal(1);
    typename I::Domain::Vector size =  (upBound - lowBound) + p;
    typename I::Domain::Vector center = lowBound + ((upBound - lowBound)/2);
    typename I::Value val;
    
    try
    {
      std::stringstream main;
      out.open(filename.c_str(), std::ios::out | std::ios::binary);
      
      //Longvol format
      out << "Center-X: " << center[0] <<std::endl;
      out << "Center-Y: " << center[1] <<std::endl;
      out << "Center-Z: " << center[2] <<std::endl;
      out << "X: "<< size[0]<<std::endl;
      out << "Y: "<< size[1]<<std::endl;
      out << "Z: "<< size[2]<<std::endl;
      out << "Lvoxel-Size: 4"<<std::endl; //not used in liblongvol but required
      out << "Alpha-Color: 0"<<std::endl;
      out << "Lvoxel-Endian: 0"<<std::endl;//not used in liblongvol but required
      out << "Int-Endian: 0123"<<std::endl;
      if (compressed)
      out << "Version: 3"<<std::endl;
      else
      out << "Version: 2"<<std::endl;
      out << "."<<std::endl;
      
      out.close();
      out.open(filename.c_str(),std::ios_base::binary | std::ios_base::app);
      
      //We scan the domain
      for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
          it!=itend;
          ++it)
      {
        val = aImage( (*it) );
        write_word(main,aFunctor(val));
      }
      
      if (compressed)
      {
        boost::iostreams::filtering_streambuf<boost::iostreams::input> out_compressed;
        out_compressed.push(boost::iostreams::zlib_compressor());
        out_compressed.push( main );
        boost::iostreams::copy(out_compressed, out);
        out.close();
      }
      else
      {
        out << main.str();
        out.close();
      }
      
      
      }
      catch( ... )
      {
        std::cout << "LongVol writer IO error on export " << filename << std::endl;
        throw dgtalio;
      }
      
      return true;
      }
      
      }//namespace
