/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file PNMWriter.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/22
 *
 * Implementation of inline methods defined in PNMWriter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <fstream>
#include "DGtal/io/Color.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


namespace DGtal {
template<typename I,typename C>
bool
PNMWriter<I,C>::exportPPM(const std::string & filename, const I & aImage,
			  const Value & minV, const Value & maxV, bool topbotomOrder)
{
  ///@todo  the Value of I should match with the one in C

  BOOST_STATIC_ASSERT(I::Domain::dimension == 2);
  
  ofstream out;
  typename I::Domain::Vector ext = aImage.extent();
  typename I::Domain domain = aImage.domain();
  typename I::Value val;
  C colormap(minV,maxV);
  Color col;
  
  out.open(filename.c_str());

  //PPM format
  out << "P3"<<endl;
  out << "#DGtal PNM Writer"<<endl<<endl;
  out << ext[0]<<" "<< ext[1]<<endl;
  out << "255" <<endl;

 if(!topbotomOrder){
   //We scan the domain instead of the image becaus we cannot
   //trust the image container Iterator
   for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
       it!=itend;
       ++it)
     {
       val = aImage( (*it) );
       col = colormap( val );
       out << (int)col.red()<<" "<<(int)col.green()<<" "<<(int)col.blue()<<" ";
     }
 }else{
     typename I::Domain::Point ptUpper=  domain.upperBound();
    
    for(typename HyperRectDomain<typename I::Domain::Space>::ConstSubRange::ConstReverseIterator itY = domain.subRange(1, ptUpper).rbegin(), itYend=domain.subRange(1, ptUpper).rend();  itY!=itYend; ++itY)
      {    
	typename I::Domain::Point ptUpperY=  *itY;
	
	for(typename HyperRectDomain<typename I::Domain::Space>::ConstSubRange::ConstIterator it = domain.subRange(0, ptUpperY).begin(), itend=domain.subRange(0, ptUpperY).end();
	    it!=itend;
	    ++it)
	  {
	     val = aImage( (*it) );
	     col = colormap( val );
	     out << (int)col.red()<<" "<<(int)col.green()<<" "<<(int)col.blue()<<" ";	    
	  }
      }
   
 }
  
  out.close(); 

  ///@todo catch IOerror excpetion
  return true;
}

template<typename I,typename C>
bool
PNMWriter<I,C>::exportPGM(const std::string & filename, const I & aImage,
			  const Value & minV, const Value & maxV,  bool saveASCII, bool topbotomOrder)
{
  ///@todo  the Value of I should match with the one in C

  BOOST_STATIC_ASSERT(I::Domain::dimension == 2);

  ofstream out;
  typename I::Domain::Vector ext = aImage.extent();
  typename I::Domain domain = aImage.domain();
  typename I::Value val;
  C colormap(minV,maxV);
  Color col;
  
  out.open(filename.c_str());

  //PPM format
  if(saveASCII){
    out << "P2"<<endl;
  }else{
    out << "P5"<<endl;
  }

  out << "#DGtal PNM Writer"<<endl<<endl;
  out << ext[0]<<" "<< ext[1]<<endl;
  out << "255" <<endl;
  
  if(!topbotomOrder){
    //We scan the domain instead of the image becaus we cannot
    //trust the image container Iterator
    for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
	it!=itend;
	++it)
      {

	val = aImage( (*it) );
	col = colormap( val );
	if(saveASCII){
	  out << ((int) (col.red()+(int)col.green()+(int)col.blue()) / 3)<<" ";
	}else{
	  out << ((char)((int) (col.red()+(int)col.green()+(int)col.blue()) / 3));
	}
      }
  }else{
    typename I::Domain::Point ptUpper=  domain.upperBound();
    
    for(typename HyperRectDomain<typename I::Domain::Space>::ConstSubRange::ConstReverseIterator itY = domain.subRange(1, ptUpper).rbegin(), itYend=domain.subRange(1, ptUpper).rend();  itY!=itYend; ++itY)
      {    
	typename I::Domain::Point ptUpperY=  *itY;
	
	for(typename HyperRectDomain<typename I::Domain::Space>::ConstSubRange::ConstIterator it = domain.subRange(0, ptUpperY).begin(), itend=domain.subRange(0, ptUpperY).end();
	    it!=itend;
	    ++it)
	  {
	    val = aImage( (*it) );
	    col = colormap( val );
	    if(saveASCII){
	      out << ((int) (col.red()+(int)col.green()+(int)col.blue()) / 3)<<" ";
	    }else{
	      out << ((char)((int) (col.red()+(int)col.green()+(int)col.blue()) / 3));
	    }
	    
	  }
      }
  }
  
  out.close(); 

  ///@todo catch IOerror excpetion
  return true;
}

template<typename I,typename C>
bool
PNMWriter<I,C>::exportPPM3D(const std::string & filename, const I & aImage,
          const Value & minV, const Value & maxV)
{
  ///@todo  the Value of I should match with the one in C

  BOOST_STATIC_ASSERT(I::Domain::dimension == 3);
  
  ofstream out;
  typename I::Domain::Vector ext = aImage.extent();
  typename I::Domain domain(aImage.lowerBound(), aImage.upperBound());
  typename I::Value val;
  C colormap(minV,maxV);
  Color col;
  
  out.open(filename.c_str());

  //PPM format
  out << "P3-3D"<<endl;
  out << "#DGtal PNM Writer"<<endl<<endl;
  out << ext[0]<<" "<< ext[1]<<" "<< ext[2] <<endl;
  out << "255" <<endl;

  //We scan the domain instead of the image becaus we cannot
  //trust the image container Iterator
  for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
      it!=itend;
      ++it)
    {

      val = aImage( (*it) );
      col = colormap( val );
      out << (int)col.red()<<" "<<(int)col.green()<<" "<<(int)col.blue()<<" ";
    }
  
  out.close(); 

  ///@todo catch IOerror excpetion
  return true;
}

template<typename I,typename C>
bool
PNMWriter<I,C>::exportPGM3D(const std::string & filename, const I & aImage,
        const Value & minV, const Value & maxV)
{
  ///@todo  the Value of I should match with the one in C

  BOOST_STATIC_ASSERT(I::Domain::dimension == 3);

  ofstream out;
  typename I::Domain::Vector ext = aImage.extent();
  typename I::Domain domain(aImage.lowerBound(), aImage.upperBound());
  typename I::Value val;
  C colormap(minV,maxV);
  Color col;
  
  out.open(filename.c_str());

  //PPM format
  out << "P2-3D"<<endl;
  out << "#DGtal PNM Writer"<<endl<<endl;
  out << ext[0]<<" "<< ext[1]<<" "<< ext[2]<<endl;
  out << "255" <<endl;

  //We scan the domain instead of the image becaus we cannot
  //trust the image container Iterator
  for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
      it!=itend;
      ++it)
    {

      val = aImage( (*it) );
      col = colormap( val );
      out << ((int) (col.red()+(int)col.green()+(int)col.blue()) / 3)<<" ";
    }
  
  out.close(); 

  ///@todo catch IOerror excpetion
  return true;
}


}//namespace
