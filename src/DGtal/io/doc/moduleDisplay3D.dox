

/*
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/**
 * @page moduleDisplay3D Display3D: a stream mechanism for displaying 3D DGtal objects
 *
 * This part of the manual describes how to visualize 3D objects and how to
 * import them from binary file (.obj or pgm3d)
 *

@author Bertrand Kerautret, Martial Tola, Aline Martin, David Coeurjolly, Bastien Doignies

[TOC]

  \section DGtalGLV_Display3D Display3D: a stream mechanism from abstract class Display3D

  The semi-abstract template class Display3D defines the stream
  mechanism to display 3d primitive (like PointVector,
  DigitalSetBySTLSet, Object ...). The PolyscopeViewer class permits 
  an interactive visualization (based on Polyscope (OpenGL backend)).

  Display3D have two template parameters which correspond to the
  digital space and the Khalimsky space used to put the figures. From
  the Digital Space and Khalimsky Space, we use the associated
  embedding mechanism to convert digital objects to structures in @f$
  \mathbb{R}^n@f$.


\section DGtalGLV_PolyscopeViewer Interactive visualization from PolyscopeViewer

The class PolyscopeViewer is a wrapper around the Polyscope library ( https://polyscope.run ).  
It permits displaying geometrical data such as Point, Lines and (volumetric) meshes. 
The library handles 3D scenes movement and allows to attributes of displayed objects 
(such as colors and colormaps). The graphical interface is based on ImGUI 
(https://github.com/ocornut/imgui) which can be  further extended.

 *

First to use the PolyscopeViewer stream, you need to include the following headers:
 *
@code
 #include "DGtal/io/3dViewers/PolyscopeViewer.h"
@endcode
 *
The following code snippet defines three points and a rectangular
domain in Z3. It then displays them in a PolyscopeViewer object. The
full code is in <a  href="io_2viewers_2viewer3D-1-points_8cpp-example.html">viewer3D-1-points.cpp</a>.
 *
 *

The first step to draw objects is to create an instance of the PolyscopeViewer class:
 @code
using namespace DGtal;
using namespace Z3i;

PolyscopeViewer<> viewer;
@endcode

Then we can display some 3D primitives:
@code
 Point p1( 0, 0, 0 );
 Point p2( 5, 5 ,5 );
 Point p3( 2, 3, 4 );
 Domain domain( p1, p2 );

 viewer << domain;
 viewer << p1 << p2 << p3;
 viewer.show();
@endcode

The *show()* method enters the visualization loop and should be call after all object are 
drawn with the viewer. You should obtain the following visualization:

\image html simple3dVisu1.png "Digital point visualization  with PolyscopeViewer."
\image latex simple3dVisu1.png "Digital point visualization  with PolyscopeViewer." width=5cm


\subsection  DGtalGLV_PolyscopeViewer_Rendering Interactive change of rendering   

Polyscope has its own default rendering settings. Many parameters can be changed either
programatically or at runtime directly within the viewer. This includes camera parameters
(up direction, far/near plane, ...), materials of objects, lighting and many more. See 
polyscope documentation for available options (https://polyscope.run). 

@note Some rendered image of this documentation may have altered parameters to improve
visibility such as scene extents or transparency mode.  

* \section DGtalGLV_VisualizationDigitalSet Visualization of DigitalSet and digital objects
*
*
* The PolyscopeViewer class also allows to display directly a \c DigitalSet. The first step is to create a \c DigitalSet for example from the Shape class.
*
*

@snippet io/viewers/viewer3D-2-sets.cpp ExampleViewer2dSet

*
* You should obtain the following visualization (see example: <a href="io_2viewers_2viewer3D-2-sets_8cpp-example.html">viewer3D-2-sets.cpp</a>):
*
* \image html simple3dVisu2.png "Digital point visualization  with PolyscopeViewer."
* \image latex simple3dVisu2.png "Digital point visualization  with PolyscopeViewer." width=5cm
*
*
*
* \section  DGtalGLV_ModeEx  Drawmode selection: the example of digital objects in 3D
*
*  As for Board2D, a mode can be chosen to display elements. The viewer has several 
*  methods to adjust how objects are drawn.
*
*@code
 viewer.drawAdjacencies(true /* or false to disable*/);
@endcode
*
*or change the pair of adjacencies
*
@code
 Object6_18 shape1( dt6_18, shape_set );
 Object18_6 shape2( dt18_6, shape_set );
 viewer << shape1;
 viewer << shape2;
@endcode

* You should obtain the two following visualizations (see example: <a href="io_2viewers_2viewer3D-3-objects_8cpp-example.html">viewer3D-3-objects.cpp</a>):

 \image html visu6-18Adj.png " 6-18 digital Adjacencies visualization  with PolyscopeViewer."
 \image latex visu6-18Adj.png " 6-18 digital Adjacencies visualization with PolyscopeViewer." width=5cm
 \image html visu18-6Adj.png " 18-6 digital Adjacencies visualization  with PolyscopeViewer."
 \image latex visu18-6Adj.png " 18-6 digital Adjacencies visualization  with PolyscopeViewer."  width=5cm


* Note that digital set was displayed with transparency by setting a custom color within the viewer.


* \section  DGtalGLV_Mode Useful modes for several 3D drawable elements

\subsection DGtalGLV_ModeListing Listing of different modes

As for \c Board2D the object can be displayed with different possible mode:


| Available modes | Description                 | Supported objects                                            | Method                                 |
|-----------------|-----------------------------|--------------------------------------------------------------|----------------------------------------|
| DEFAULT         | Default rendering           | Any                                                          | viewer.defaultStyle()                  |
| PAVING          | Draws points as cubes       | Point-based objects (Point, Domain, Object, DigitalSet, ...) | viewer.drawAsPaving()                  |
| BALL            | Draws points as spheres     | Point-based objects (Point, Domain, Object, DigitalSet, ...) | viewer.drawAsBalls()                   |
| GRID            | Draws object with gridlines | Domains                                                      | viewer.drawAsGrid(true \| false)       |
| ADJACENCIES     | Draws adjacencies relations | Objects                                                      | viewer.drawAdjacencies(true \| false)  |
| SIMPLIFIED      | Draws quad instead of prism | 2D Signed KCells                                             | viewer.drawAsSimplified(true \| false) |

\subsection DGtalGLV_ModeExamplesDomain Examples with Objet modes

The file <a href="io_2viewers_2viewer3D-4-modes_8cpp-example.html" >  viewer3D-4-modes.cpp </a> illustrates several  possible modes to display these objects:


We can display the set of point and the domain

@code
 Point p1( -1, -1, -2 );
 Point p2( 2, 2, 3 );
 Domain domain( p1, p2 );
 Point p3( 1, 1, 1 );
 Point p4( 2, -1, 3 );
 Point p5( -1, 2, 3 );
 Point p6( 0, 0, 0 );
 Point p0( 0, 2, 1 );
@endcode

without mode change (see image (a)):
@code
 viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
 viewer << domain;
@endcode

We can change the mode for displaying the domain (see image (b)):
@code
 viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
 viewer.drawAsGrid();
 viewer << domain;
@endcode

(Note that to avoid transparency displaying artifacts, we need to
display the domain after the voxel elements included in the domain)
<BR>

It is also possible to change the mode for displaying the voxels: (see image (c))
@code
// Domain AND points are drawn as balls
// Grid mode was not removed, domain grid are also drawn
viewer.drawAsBalls(); 
viewer << domain;
viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
@endcode


(Note to enhance visibility, domain nodes are colored in black)
<BR>
*
*
* we obtain the following visualizations:
*
\image html visuModeDefault.png "(a) Default visualization of a digital point sets with the associated domain "
\image latex visuModeDefault.png "(a) Default visualization of a digital point sets with the associated domain " width=5cm
 \image html  visuModePavingGridsDomain.png "(b) visualization using Paving and Grid mode for the domain."
 \image latex  visuModePavingGridsDomain.png "(b) visualization using Paving and Grid mode for the domain." width=5cm
 \image html  visuModeBalls.png "(c) visualization using Balls mode for the voxels."
 \image latex  visuModeBalls.png "(c) visualization using Balls mode for the voxels." width=5cm


\section  DGtalGLV_Custom Changing the style for displaying drawable elements.

As for Board2D, it is possible to custom the way to display 3D elements. By default, the colors of elements are given by
the viewer and can cycle through some of them. They can be changed directly in the user interface of the viewer. 
Colors can also be set programatically; 

@code
  viewer << Color(250, 0,0); // Alternatively: viewer.drawColor(color);
  viewer << p4 << p5 ;
  viewer.setDefaultColors(); // Reset to default colors
@endcode

The example <a  href="io_2viewers_2viewer3D-5-colors_8cpp-example.html"> viewer3D-5-colors.cpp </a> illustrates some possible customs :

\image html visuModeCustom.png "Example of several custom display." 
\image latex visuModeCustom.png "Example of several custom display." width=5cm


If colors depend on values, please see section about adding properties to object instead of manually setting colors. 

\section DGtalGLV_CLipping Adding clipping planes

It also possible through the stream mechanism to add a clipping plane
thanks to the object \c ClippingPlane. We just have to add the real plane
equation and add, as for displaying, an element. The file <a
href="io_2viewers_2viewer3D-6-clipping_8cpp-example.html"
>viewer3D-6-clipping.cpp</a> gives a simple example.

From displaying a digital set defined from a Norm2 ball,
@code
 Point p1( 0, 0, 0 );
 Point p2( 20, 20, 20 );
 Domain domain(p1, p2);
 DigitalSet shape_set( domain );

 Shapes<Domain>::addNorm2Ball( shape_set, Point( 10, 10, 10 ), 7 );

 viewer << shape_set;
 viewer << Color(250, 200,0, 20);
@endcode

we can add, for instance, two different clipping planes:

@code
 viewer << ClippingPlane(1,0,0,-4.9);
 viewer << ClippingPlane(0,1,0.3,-10);
@endcode

\image html visuClippingAll.png "(a) visualization of the initial set."  
\image latex visuClippingAll.png "(a) visualization of the initial set." width=5cm
 \image html  visuClipping1.png "(b) visualization after adding the first clipping plane (0,1,0.3,-10)."
 \image latex  visuClipping1.png "(b) visualization after adding the first clipping plane (0,1,0.3,-10)."  width=5cm
 \image html  visuClipping2.png "(c) visualization after adding a second clipping plane (1,0,0,-4.9) ."
\image latex  visuClipping2.png "(c) visualization after adding a second clipping plane (1,0,0,-4.9) ." width=5cm


It also possible to edit the clipping plane directly in the viewer (under View/Slice Planes) which allows to
change colors, positions and if they are drawn or not. 

\section DGtalGLV_Images Adding 2D image visualization in 3D

With the PolyscopeViewer class it is possible to display 2D slice image from a volume one. It can be done in a few steps (see example of <a href="io_2viewers_2viewer3D-8-2DSliceImages_8cpp-example.html">viewer3D-8-2DSliceImages.cpp</a>) :

@snippet io/viewers/viewer3D-8-2DSliceImages.cpp ExampleViewer3D2DImagesExtractImages

\image html  viewer3D-8.png  "Example of 2D image visualization" 
\image latex  viewer3D-8.png  "Example of 2D image visualization" width=5cm

\section DGtalGLV_Images3D Adding 3D image visualization

In the same way a 3D image can be displayed. By following the same stream operator, you will obtain such examples of display:
\image html  viewer3D-9.png  "Example of 3D image visualization with also digital sets." 
\image latex  viewer3D-9.png  "Example of 3D image visualization with also digital sets." width=5cm

See more details in the example:  <a
href="io_2viewers_2viewer3D-9-3Dimages_8cpp-example.html"
>io/viewers/viewer3D-9-3Dimages.cpp</a>



\section DGtalGLV_Groups Object names and groups

Each object that is drawn with the Display3D class is given a name as a string. This serves as a unique identifier and may also be used by viewers as user interface elements. It is possible to 
specify the name of an object with the *draw* function (internally, the stream operator will call 
this function).

@code
Point p1( 0, 0, 0 );
viewer.draw(p1, "Point name");
@endcode 

In order to ensure uniqueness, the given may be altered if necessary. For example: 

@code
Point p1( 0, 0, 0 );
Point p2( 1, 1, 1 );
std::string name1 = viewer.draw(p1, "Point name"); // name1 = "Point name"
std::string name2 = viewer.draw(p2, "Point name"); // name2 = "Point name_1"
@endcode 

It is possible to specify where the counter will be placed with the "{i}" token (only first occurence is replaced). For KCell, the token "{d}" can also be used for dimension. 

@code
Point p1( 0, 0, 0 );
Point p2( 1, 1, 1 );
std::string name1 = viewer.draw(p1, "Point_{i}_name"); // name1 = "Point_1_name"
std::string name2 = viewer.draw(p1, "Point_{i}_name"); // name2 = "Point_2_name"
@endcode 

%A common pattern when using the DGtal library is to iterate over a set of object, and then perform a computation and draw them (see tests/geometry/surfaces/testLocalConvolutionNormalVectorEstimator.cpp). 
However, this would imply having one object for each draw command, which can bloat the user interface and would make the viewer slow. It also limits the ability to have colormaps, since each 
value would be scattered across multiple objects. For this reason, a special variable can be set: 

@code
viewer.allowReuseList = true;
@endcode

This will group new objects into the current list. However, this might fail if
rendered objects change types (eg. alternating drawing lines and points). 
Therefore, the lists where the new objects should be pushed must be set manually with:

@code
viewer.setCurrentList(name);
@endcode

\section DGtalGLV_Properties Adding quantities to objects

The class Display3D supports adding properties to objects. These properties can be colors, scalar values or vector information. These can be useful to display curvature information and/or computed normals. There are two ways to add these quantities. The first one is with the stream API, which is most useful for quick display of a couple of quantities: 

@snippet io/viewers/viewer3D-12-quantities.cpp ExampleViewer3DQuantitiesStream 

The second approach, as powerful as the first one, requires the name of the object, but is more comfortable when the quantities are obtained after drawing.

@snippet io/viewers/viewer3D-12-quantities.cpp ExampleViewer3DQuantitiesAddQuantity 

Both methods can be used together and within loops:

@snippet io/viewers/viewer3D-12-quantities.cpp ExampleViewer3DQuantitiesLoop

These properties can be shown or hidden and their appearance modified directly in the graphical user interface. 

\image html  viewer3DQuantities.png  "Example of adding quantities to an object. Objects were shifted and quantities hidden to enhance visibility." 
\image latex  viewer3DQuantities.png  "Example of adding quantities to an object. Objects were shifted and quantities hidden to enhance visibility." width=5cm

It is also possible to add a last parameter to WithQuantity and addQuantity which is the element targeted by the quantity. For example, for a surface mesh, we may want to set the quantities at the vertices rather than on the faces when solving PDEs. However, the correct numbers of values should be supplied (eg. one per vertex and not one per face). Unfortunately, not every combination is supported (see table below). By default, it will use the scale corresponding to the dimension of the element (ie. right-most side in the "Supported Scale" column).

| Geometric display | Supported Scale              | Name                                                                     | DGtal object examples                         |
|-------------------|------------------------------|--------------------------------------------------------------------------|-----------------------------------------------|
| Point             | VERTEX                       | QuantityScale::VERTEX                                                    | (Real)Points in BALL mode, dim 0 KCell        |
| Lines             | VERTEX / EDGE                | QuantityScale::VERTEX, QuantityScale::EDGE                               | Adjacencies, dim 1 KCell                      |
| Surface mesh      | VERTEX / EDGE (Scalar)/ FACE | QuantityScale::VERTEX, QuantityScale::EDGE (Scalar), QuantityScale::FACE | dim 2 KCell in simplified mode                |
| Volume mesh       | VERTEX / CELL                | QuantityScale::VERTEX, QuantityScale::CELL                               | (Real)Points, Objects, Domains, dim 2/3 KCell |

\section DGtalGLV_Ext Extending the viewer

The viewer supports extensions that allow us to interact with the viewer at runtime. By default, 
PolyscopeViewer shows what object is clicked; but one may want to add custom UI, or enhance 
displayed information when an element is clicked. For this purpose, it is possible to set a
callback that will be triggered upon three events: attach (only once), UI and clicks. 

@code
class MyCustomCallback : public typename Display3D<Space, KSpace>::Callback {
  void OnAttach(void* viewer) {
    // Called when the callback is attached to the viewer
  }
  void OnUI(void* data) {
    // Called within the event loop and allows to draw some UI
  }
  void OnClick(const std::string& name, size_t index, const DisplayData<RealPoint>& data, void* viewerData) {
    // Called when an element is clicked
  }
};
@endcode


%A  useful method is Display3D::renderNewData that renders to the screen any newly added data. Another method, Display3D::renderAll can be used to (re)render every object; but run-time settings might be lost.

For PolyscopeViewer, user inputs and UI are managed with ImGUI. Also note that the viewer displays "by default", the name of the clicked polyscope structure.

\section DGtalGLV_OtherPrim Adding other standard primitive

The viewer can also display other standard primitives, like ball using the polyscope steps.
For instance, to display a set of ball with different radius, you can follows these steps:

@code
    // Coordinates of the ball centers
    std::vector<glm::vec3> points = { glm::vec3(0, 1, 2), glm::vec3(0, 1, 2) };
    auto* psCloud = polyscope::registerPointCloud("TwoBalls", points);

    // radius parameter
    std::vector<double> rayons = { 2.0, 3.0 };
    psCloud->setPointRadius(raduis, false); // false to keep scale not relative
    psCloud->setPointRenderMode(polyscope::PointRenderMode::Sphere);
@endcode


*/
}
