

/*
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/**
 * @page moduleDisplay3D Display3D: a stream mechanism for displaying 3D DGtal objects
 *
 * This part of the manual describes how to visualize 3D objects and how to
 * import them from binary file (.obj or pgm3d)
 *

@author Bertrand Kerautret, Martial Tola, Aline Martin, David Coeurjolly

[TOC]

  \section DGtalGLV_Display3D Display3D: a stream mechanism from abstract class Display3D

  The semi abstract template class Display3D defines the stream mechanism to
  display 3d primitive (like PointVector, DigitalSetBySTLSet, Object
  ...). The class Viewer3D and Board3DTo2D implement two different
  ways to display 3D objects. The first one (Viewer3D), permits an
  interactive visualization (based on OpenGL) and the second one
  (Board3DTo2D) provides 3D visualization to 2D vector format
  (based on the CAIRO library).

  Display3D have two template parameters which correspond to the
  digital space and the Khalimsky space used to put the figures. From
  the Digital Space and Khalimsky Space, we use the associated
  embedding mechanism to convert digital objects to structures in @f$
  \mathbb{R}^n@f$.


  Viewer3D and Board3DTo2D allow to set and change the camera point of
  view for the visualization.



\section DGtalGLV_Viewer3D Interactive visualization from Viewer3D

The class Viewer3D inherits from the base class QGLViewer (which is
 based on QGLwidget).  It permits to display simple 3D shapes.
 LibQGLViewer ( http://www.libqglviewer.com ) is a C++ library based
 on QT allowing to access to simple 3D features like camera moving,
 mouse, keyboard interaction, clipping plane .... etc.

It possess the additional functionality to display 2D slice image from a volume one.

 *

First to use the Viewer3D stream, you need to include the following headers:
 *
@code
 #include "DGtal/io/3dViewers/Viewer3D.h"
@endcode
 *
The following code snippet defines three points and a rectangular
domain in Z3. It then displays them in a Viewer3D object. The
full code is in <a  href="io_2viewers_2viewer3D-1-points_8cpp-example.html">viewer3D-1-points.cpp</a>.
 *
 *

The first step to visualize 3D object with Viewer3D is to create a QApplication from the main():
 @code
using namespace DGtal;
using namespace Z3i;

QApplication application(argc,argv);
Viewer3D<> viewer;
viewer.show();
@endcode

Then we can display some 3D primitives:
@code
 Point p1( 0, 0, 0 );
 Point p2( 5, 5 ,5 );
 Point p3( 2, 3, 4 );
 Domain domain( p1, p2 );

 viewer << domain;
 viewer << p1 << p2 << p3;
 viewer << Viewer3D<>::updateDisplay;


* @endcode
*
* You should obtain the following visualization:
*
* \image html simple3dVisu1.png "Digital point visualization  with Viewer3D."
* \image latex simple3dVisu1.png "Digital point visualization  with Viewer3D." width=5cm
*
@note Note that you can display the camera settings in the console
(key C) which can be used in Board2Dto3D described in the following.



\section DGtalGLV_Boas3DTo2D Static visualization from Board2Dto3D


 The same visualization can be obtain with the Board2Dto3D class. You
just need to adapt the camera settings (see example: <a href="io_2boards_2dgtalBoard3DTo2D-1-points_8cpp-example.html"> dgtalBoard3DTo2D-1-points.cpp</a> ).


@code
Board3DTo2D<> board;
board << domain;
board << p1 << p2 << p3;

board << CameraPosition(2.500000, 2.500000, 16.078199)
       << CameraDirection(0.000000, 0.000000, -1.000000)
       << CameraUpVector(0.000000, 1.000000, 0.000000);
board << CameraZNearFar(4.578200, 22.578199);
board.saveCairo("dgtalCairo-1-points.pdf", Board3DTo2D::CairoPDF, 600*2, 400*2);
@endcode

This example should provides a comparable visualization.









* \section DGtalGLV_VisualizationDigitalSet Visualization of DigitalSet and digital objects
*
*
* The Viewer3D class allows also to display directly a \c DigitalSet. The first step is to create a \c DigitalSet for example from the Shape class.
*
*
* @code

 QApplication application(argc,argv);
 Viewer3D<> viewer;
 viewer.show();

 Point p1( 0, 0, 0 );
 Point p2( 10, 10 , 10 );
 Domain domain( p1, p2 );
 viewer << domain;

 DigitalSet shape_set( domain );
 Shapes<Domain>::addNorm1Ball( shape_set, Point( 5, 5, 5 ), 2 );
 Shapes<Domain>::addNorm2Ball( shape_set, Point( 3, 3, 3 ), 2 );

 shape_set.erase(Point(3,3,3));
 shape_set.erase(Point(6,6,6));
 viewer << shape_set << Viewer3D<>::updateDisplay;

 @endcode
*
* You should obtain the following visualization (see example: <a href="io_2viewers_2viewer3D-2-sets_8cpp-example.html">viewer3D-2-sets.cpp </a>):
*
* \image html simple3dVisu2.png "Digital point visualization  with Viewer3D."
* \image latex simple3dVisu2.png "Digital point visualization  with Viewer3D." width=5cm
*
*
*
* \section  DGtalGLV_ModeEx  Mode selection: the example of digital objects in 3D
*
*  As for Board2D, a mode can be choosen to display elements (\c
*  SetMode3D). You just have to specify the classname (the easiest way
*  is to call the method \c className() on an instance of the correct
*  type and the desired mode (a string).
*
*
*@code
 Object6_18 shape( dt6_18, shape_set );
 viewer << SetMode3D( shape.className(), "DrawAdjacencies" );
 viewer << shape;
@endcode
*
*or change the couple of adjacency
*
@code
 Object18_6 shape2( dt18_6, shape_set );
 viewer << SetMode3D( shape2.className(), "DrawAdjacencies" );
 viewer << shape2;
@endcode

* You should obtain the two following visualizations (see example: <a href="io_2viewers_2viewer3D-3-objects_8cpp-example.html">viewer3D-3-objects.cpp </a>):

 \image html visu6-18Adj.png " 6-18 digital Adjacencies visualization  with Viewer3D."
 \image latex visu6-18Adj.png " 6-18 digital Adjacencies visualization with Viewer3D." width=5cm
 \image html visu18-6Adj.png " 18-6 digital Adjacencies visualization  with Viewer3D."
 \image latex visu18-6Adj.png " 18-6 digital Adjacencies visualization  with Viewer3D."  width=5cm


* Note that digital set was displayed with transparency by setting a custom colors.




* \section  DGtalGLV_Mode Useful modes for several 3D drawable elements


\subsection DGtalGLV_ModeListing Listing of different modes

As for \c Board2D the object can be displayed with different possible mode:

  - class PointVector, modes: "" / "Both", "Paving" (default), "Grid"
  - class DigitalSetBySTLSet and DigitalSetBySTLVector : "",  "" / "Both", "Paving" (default), "PavingTransp", "Grid".
  - class Object, modes: "" /"Basic" (default), "DrawAdjacencies", "PavingTransp".
  - class HyperRectDomain 3D, modes: "" / "Grid" (default), "Paving", "PavingPoints", "PavingGrids", "BoundingBox".
  - class HyperRectDomain 2D, modes: "" / "BoundingBox"  (default), "Grid", "InterGrid" **.
  - class KhalimskyCell  ,  modes: ""(default) /  "Highlighted" ,  "Transparent", "Basic", "Illustration",  "IllustrationCustomColor".
  - class SignedKhalimskyCell  ,  modes: "" (default) /  "Highlighted" , "Basic", "Transparent", "Illustration", "IllustrationCustomColor".
  - class ArithmeticalDSS3d  ,  modes: "" (default) /  "Points", "BoundingBox *".
  - class Mesh, modes:  "" (default) /  "Faces *".
  - class ImageContainerBySTLVector, ImageContainerBySTLMap 2D/3D modes:  "", (default), "BoundingBox", "Grid", "InterGrid"  . **
  - class ImageAdapter, ConstImageAdapter 2D/3D modes:  "", (default), "BoundingBox", "Grid", "InterGrid"  . **


Note that for KhalimskyCell and SignedKhalimskyCell the default colors
(with CustomColors3D objects) can be changed only with the empty mode
("") and the "IllustrationCustomColor" mode.

"*": partially for (Board3DTo2D), see issue <a href="https://github.com/DGtal-team/DGtal/issues/582"> 582</a>.
"**":  only for Viewer3D.

\subsection DGtalGLV_ModeExamplesDomain Examples with Objet modes

The file <a href="io_2viewers_2viewer3D-4-modes_8cpp-example.html" >  viewer3D-4-modes.cpp </a> illustrates several  possible modes to display these objects:


We can display the set of point and the domain

@code
 Point p1( -1, -1, -2 );
 Point p2( 2, 2, 3 );
 Domain domain( p1, p2 );
 Point p3( 1, 1, 1 );
 Point p4( 2, -1, 3 );
 Point p5( -1, 2, 3 );
 Point p6( 0, 0, 0 );
 Point p0( 0, 2, 1 );
@endcode

without mode change (see image (a)):
@code
 viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
 viewer << domain;
@endcode

We can change the mode for displaying the domain (see image (b)):
@code
 viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
 viewer << SetMode3D(domain.className(), "PavingGrids");
 viewer << domain;
@endcode
(Note that to avoid transparency displaying artifacts, we need to
display the domain after the voxel elements included in the domain)
<BR>

It is also possible to change the mode for displaying the voxels: (see image (c))
@code
viewer << domain;
viewer <<  SetMode3D( p1.className(), "Grid" );
viewer << p1 << p2 << p3<< p4<< p5 << p6 << p0;
@endcode
*
*
* we obtain the following visualizations:
*
\image html visuModeDefault.png "(a) Default visualization of a digital point sets with the associated domain "
\image latex visuModeDefault.png "(a) Default visualization of a digital point sets with the associated domain " width=5cm
 \image html  visuModePavingGridsDomain.png "(b) visualization using Paving mode for the domain."
 \image latex  visuModePavingGridsDomain.png "(b) visualization using Paving mode for the domain." width=5cm
 \image html  visuModeGridVoxel.png "(c) visualization using Paving mode for the voxels."
 \image latex  visuModeGridVoxel.png "(c) visualization using Paving mode for the voxels." width=5cm




\subsection DGtalGLV_ModeOtherExamples Illustrating  KhalimskyCell  with the "Illustration" mode


The "Illustration" mode is defined to construct illustrations composed
of KhalimskyCell. In particular it permits to increase the space
between cells and improve the display visibility. It can be used typically as
follows:
First you need to add the following header:

@snippet io/viewers/viewer3D-4bis-illustrationMode.cpp SetKSIllustrationMode3DHeader


From a SignedKhalimskyCell  (SCell in DGtal::Z3i) you have to select the "Illustration" mode :

 @snippet io/viewers/viewer3D-4bis-illustrationMode.cpp SetKSIllustrationMode3D

Then, to display a surfel with its associated voxel, you need to
transform the surfel by constructing a shifted and resized version (DGtal::TransformedKSSurfel) according to its associated voxel:


@snippet io/viewers/viewer3D-4bis-illustrationMode.cpp KSIllustrationModeTransformed


You will obtain such type of illustration (obtained from the example <a href="io_2viewers_2viewer3D-4bis-illustrationMode_8cpp-example.html">  viewer3D-4bis-illustrationMode.cpp </a>).




 \image html view3D-4bis-illustrationMode.png  "Illustration of the \"Illustration\" KhalimskyCell mode."
 \image latex  view3D-4bis-illustrationMode.png "Illustration of the \"Illustration\" KhalimskyCell mode."






\section  DGtalGLV_Custom Changing the style for displaying drawable elements.

As for Board2D, it is possible to custom the way to display 3D elements by using an instance of the following classes:


-  CustomColors3D: to change the color used to display surface primitive (GL_QUADS) and the pen color (LINE/POINTS) ;



The custom color can be applied by an instance of the CustomColors3D as follow:

@code
  viewer << CustomColors3D(Color(250, 0,0),Color(250, 0,0));
  viewer << p4 << p5 ;
@endcode



The example <a  href="io_2viewers_2viewer3D-5-custom_8cpp-example.html"> viewer3D-5-custom.cpp </a> illustrates some possible customs :




\image html visuModeCustom.png "Example of several custom display ." width=5cm





\section DGtalGLV_CLipping Adding clipping planes

It also possible through the stream mechanism to add clipping plane
with the object \c ClippingPlane. We just have to add the real plane
equation and adding as for displaying an element. The file <a
href="io_2viewers_2viewer3D-6-clipping_8cpp-example.html"
>viewer3D-6-clipping.cpp</a> gives a simple example.

From displaying a digital set defined from a Norm2 ball,
@code
 Point p1( 0, 0, 0 );
 Point p2( 20, 20, 20 );
 Domain domain(p1, p2);
 DigitalSet shape_set( domain );

 Shapes<Domain>::addNorm2Ball( shape_set, Point( 10, 10, 10 ), 7 );

 viewer << SetMode3D( shape_set.className(), "Both" );
 viewer << shape_set;
 viewer << CustomColors3D(Color(250, 200,0, 100),Color(250, 200,0, 20));
 viewer <<  SetMode3D( p1.className(), "Paving" );
@endcode

we can add for instance two differents clipping planes:

@code
 viewer << ClippingPlane(1,0,0,-4.9);
 viewer << ClippingPlane(0,1,0.3,-10);
@endcode

\image html visuClippingAll.png "(a) visualization of the initial set." width=5cm
\image latex visuClippingAll.png "(a) visualization of the initial set."
 \image html  visuClipping1.png "(b) visualization after adding the first clipping plane (0,1,0.3,-10)."
 \image latex  visuClipping1.png "(b) visualization after adding the first clipping plane (0,1,0.3,-10)."  width=5cm
 \image html  visuClipping2.png "(c) visualization after adding a second clipping plane (1,0,0,-4.9) ."
\image latex  visuClipping2.png "(c) visualization after adding a second clipping plane (1,0,0,-4.9) ." width=5cm


It also possible to remove the visualization of the transparent clipping plane by adding boolean option:

@code
 viewer << ClippingPlane(0,1,0.3,-10, false);
@endcode

\section DGtalGLV_Images Adding 2D slice image visualization

With the Viewer3D class it is possible to display 2D slice image from a volume one. It can be done in few steps (see example of io/viewers/viewer3D-8-2Dimages.cpp) :

@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DImagesExtractImages

And the display them using the classic stream operator:

@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DImagesDisplayImages

Finally you can adjust the image setting with the Display3DModifier UpdateImagePosition and UpdateImageData object:

@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DModifImages

You will obtain such a visualization:
 \image html  viewer3D-8.png  "Illustration of the 2D image slice visualization." width=5cm
 \image latex  viewer3D-8.png  "Illustration of the 2D image slice visualization."

You can also change the default mode by using:
@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DChangeMode
and by changing the "BoundingBox" mode by "InterGrid" you will obtain the following visualization:
 \image html  viewer3D-8InterGrid.png  "Illustration of the 2D image slice visualization with InterGrid mode." width=5cm
 \image latex  viewer3D-8InterGrid.png  "Illustration of the 2D image slice visualization."



See more details on this example io/viewers/viewer3D-8-2Dimages.cpp or from the DGtalTools repository with DGtalTools/visualization/3dImageViewer.cpp viewer.


\section DGtalGLV_Images3D Adding 3D  image visualization

In the same way a 3D image can be displayed. By following the same stream operator you will obtain such example of display:
\image html  viewer3D-9.png  "Example of 3D image visualization with also digital sets." width=5cm
\image latex  viewer3D-9.png  "Example of 3D image visualization with also digital sets."

See more details in  the example: io/viewers/viewer3D-8-2Dimages.cpp



\section DGtalGLV_Images3D Adding Custom  Image visualization in 3D

By default an image is displayed in gray scale levels from its scalar
values. However it is possible to display color texture image by using
the object AddTextureImage2DWithFunctor or AddTextureImage3DWithFunctor (of the
DrawWithDisplay3DModifier class) with the RGBmode which allows to
interpret the scalar as a color value. A color functor can also be
specified to generate a given color.

For instance the previous examples can easily displayed with color map:


First we generate a color functor to generate unsigned integer interpreted as RGB color:
- Adding the header to use  hueShadeMap:
@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DImagesExtractImagesColorHeader

with a functor to transform integer representing grayscale to integer representing color:
@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DImagesExtractImagesColorFct


- Instead to use directly the image and the stream operator we add the AddTextureImage2DWithFunctor object:
@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DImagesDisplayImagesColor


- Note that also can update the image position image data as in the previous example and we need to recall the functor function if we want to keep the same data interpretation :
@snippet io/viewers/viewer3D-8-2Dimages.cpp ExampleViewer3D2DModifImagesColor

You will obtain such a visualization:
 \image html  viewer3D-8Color.png  "Illustration of the 2D image slice visualization." width=5cm
 \image latex  viewer3D-8Color.png  "Illustration of the 2D image slice visualization."


*/


/**
Example of digital point visualization  with Viewer3D.
@see DGtalGLV_Viewer3D 
\example io/viewers/viewer3D-1-points.cpp
 \image html simple3dVisu1.png "Digital point visualization  with Viewer3D."
 *
*/

/**
Example of digital point visualization with Viewer3D.
@see \ref DGtalGLV_VisualizationDigitalSet
\example io/viewers/viewer3D-2-sets.cpp
\image html simple3dVisu2.png "Digital point visualization  with Viewer3D."   
*
*/


/**
Example of 6-18 digital Adjacencies visualization  with Viewer3D.
@see \ref DGtalGLV_ModeEx
\example io/viewers/viewer3D-3-objects.cpp
 \image html visu6-18Adj.png " 6-18 digital Adjacencies visualization  with Viewer3D."
*
*/

/*
Example of default visualization of a digital point sets with the associated domain
@see \ref DGtalGLV_ModeExamplesDomain
\example io/viewers/viewer3D-4-modes.cpp
\image html visuModeDefault.png "Default visualization of a digital point sets with the associated domain "
*
*/

/**
Example of a custom display
@see \ref DGtalGLV_Custom
\example io/viewers/viewer3D-5-custom.cpp
\image html visuModeCustom.png "Example of several custom display ." width=5cm
*/

/**
Example of visualization after adding two clipping planes
@see \ref DGtalGLV_CLipping
\image html  visuClipping2.png "Visualization after adding a second clipping plane (1,0,0,-4.9) ."
\example io/viewers/viewer3D-6-clipping.cpp
*
*/


/**
Example of digital point visualization with Board3DTo2D.
@see \ref DGtalGLV_VisualizationDigitalSet
\example io/boards/dgtalBoard3DTo2D-2-sets.cpp
\image html dgtalBoard3DTo2D-2-sets.png "Digital point visualization  with Board3DTo2D."   
*
*/

/**
Example of digital point visualization with Board3DTo2D (wireframe visualisation).
@see \ref DGtalGLV_VisualizationDigitalSet
\example io/boards/dgtalBoard3DTo2D-2bis-sets.cpp
\image html dgtalBoard3DTo2D-2bis-sets-wireframe.png "Digital point visualization  with Board3DTo2D (wireframe visualisation))."   
*
*/

/**
Example of 6-18 digital Adjacencies visualization  with Board3DTo2D.
@see \ref DGtalGLV_ModeEx
\example io/boards/dgtalBoard3DTo2D-3-objects.cpp
\image html dgtalBoard3DTo2D-3-objects.png " 6-18 digital Adjacencies visualization  with Board3DTo2D."
*
*/



/*
Example of default visualization of a digital point sets with the associated domain (with Board3DTo2D)
@see \ref DGtalGLV_ModeExamplesDomain
\example io/boards/dgtalBoard3DTo2D-4-modes.cpp
\image html visuModeDefault.png "Default visualization of a digital point sets with the associated domain (with Board3DTo2D) "
*
*/


/**
Example of a custom display (with Board3DTo2D)
@see \ref DGtalGLV_Custom
\example io/boards/dgtalBoard3DTo2D-5-custom.cpp
\image html dgtalBoard3DTo2D-5-custom.png "Example of several custom display  (with Board3DTo2D)." width=5cm 
*/

/**
Ball visualisation (with Board3DTo2D)
@see \ref DGtalGLV_CLipping
\image html  dgtalBoard3DTo2D-6.png "Ball visualization (with Board3DTo2D) ."
\example io/boards/dgtalBoard3DTo2D-6.cpp 
*
*/


/**
Khalimsky Signed Cell Visualization (with Board3DTo2D) 
@see \ref 
\image html dgtalBoard3DTo2D-KSCell.png "Khalimsky Signed Cell Visualization (with Board3DTo2D)"
\example io/boards/dgtalBoard3DTo2D-KSCell.cpp
*
*/

/**
   \image html  view3D-4bis-illustrationMode.png  "Illustration of the \"Illustration\" KhalimskyCell mode."
\example io/viewers/viewer3D-4bis-illustrationMode.cpp
*/

/**
   \image html  viewer3D-8Ex.png  "Illustration of the 2D image slice visualization."
   \example io/viewers/viewer3D-8-2Dimages.cpp

*
*/
/**
   \image html  viewer3D-9.png  "Illustration of the 3D image visualization."
   \example io/viewers/viewer3D-9-3Dimages.cpp
*
*/



}
