/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file
 * @author Pierre Gueth (\c pierre.gueth@gmail.com )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS,
 * UMR 5205), CNRS, France
 *
 *
 * @author Bertrand Kerautret (\c bertrand.kerautret@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Lorraine, France
 *
 * @date 2013/10/28
 *
 * Header file for module ITKReader.cpp
 *
 * This file is part of the DGtal library.
 */

#include "DGtal/images/ConstImageAdapter.h"
#if defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#endif
#include <itkImageFileReader.h>
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
#if defined(__GNUG__)
#pragma GCC diagnostic pop
#endif

namespace DGtal {

  template <typename I>
  template <typename TFunctor>
  I ITKReader<I>::importITK(
  const std::string & filename,
  const TFunctor & aFunctor )
  {
    typedef typename Image::Domain Domain;
    typedef itk::ImageIOBase::IOComponentType IOComponentType;
    BOOST_CONCEPT_ASSERT( (concepts::CUnaryFunctor<TFunctor, ValueOut, Value>));
    const IOComponentType componentType = getITKComponentType( filename );
    switch ( componentType )
    {

    default:
    case itk::ImageIOBase::UNKNOWNCOMPONENTTYPE:
      trace.warning() << "[ITKReader] Unknown and unsupported component type! "
	"File will be loaded with UCHAR component type" << std::endl;
      //fallthrough
    case itk::ImageIOBase::UCHAR:
    {
      typedef ImageContainerByITKImage<Domain, unsigned char> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::CHAR:
    {
      typedef ImageContainerByITKImage<Domain, char> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::USHORT:
    {
      typedef ImageContainerByITKImage<Domain, unsigned short> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::SHORT:
    {
      typedef ImageContainerByITKImage<Domain, short> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::UINT:
    {
      typedef ImageContainerByITKImage<Domain, unsigned int> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::INT:
    {
      typedef ImageContainerByITKImage<Domain, int> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::ULONG:
    {
      typedef ImageContainerByITKImage<Domain, unsigned long> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::LONG:
    {
      typedef ImageContainerByITKImage<Domain, long> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
#if (ITK_VERSION_MAJOR > 4)\
    || (ITK_VERSION_MAJOR == 4 && ITK_VERSION_MINOR >= 13)
    case itk::ImageIOBase::ULONGLONG:
    {
      typedef ImageContainerByITKImage<Domain, unsigned long long>
	DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::LONGLONG:
    {
      typedef ImageContainerByITKImage<Domain, long long> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
#endif
    case itk::ImageIOBase::FLOAT:
    {
      typedef ImageContainerByITKImage<Domain, float> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    case itk::ImageIOBase::DOUBLE:
    {
      typedef ImageContainerByITKImage<Domain, double> DGtalITKImage;
      return readDGtalImageFromITKtypes<DGtalITKImage>( filename, aFunctor );
    }
    }
  }

  template <typename I>
  itk::ImageIOBase::IOComponentType
  ITKReader<I>::getITKComponentType( const std::string & filename )
  {
    typedef itk::ImageIOBase::IOComponentType IOComponentType;
    IOComponentType componentType;
    try
    {
      itk::ImageIOBase::Pointer imageIO = itk::ImageIOFactory::CreateImageIO(
      filename.c_str(), itk::ImageIOFactory::ReadMode );
      if (imageIO)
      {
	imageIO->SetFileName( filename.c_str() );
	imageIO->ReadImageInformation();
	componentType = imageIO->GetComponentType();
      }
    }
    catch ( itk::ExceptionObject & e )
    {
      trace.error() << e;
      throw IOException();
    }
    return componentType;
  }

  template <typename I>
  template <typename Domain, typename PixelType>
  inline
  ImageContainerByITKImage<Domain, PixelType>
  ITKReader<I>::readDGtalITKImage(const std::string & filename)
  {
    typedef ImageContainerByITKImage<Domain, PixelType> TypeDGtalImage;
    const unsigned int dimension = Domain::dimension;
    typedef itk::Image<PixelType, dimension> ItkImage;
    typedef itk::ImageFileReader<ItkImage> ITKImageReader;
    typedef typename TypeDGtalImage::ITKImagePointer ITKImagePointer;
    ITKImagePointer itk_image = nullptr;

    try
    {
      typename ITKImageReader::Pointer reader = ITKImageReader::New();
      reader->SetFileName( filename );
      reader->Update();
      reader->GetOutput();

      itk_image = reader->GetOutput();
    }
    catch ( itk::ExceptionObject &e )
    {
      trace.error() << e;
      throw IOException();
    }
    
    const TypeDGtalImage image( itk_image );

    return image;
  }

  
  template <typename I>
  template <typename Image, typename Domain, typename OrigValue,
	    typename TFunctor, typename Value>
  Image
  ITKReader<I>::Aux<Image, Domain, OrigValue, TFunctor, Value>::
  readDGtalImageFromITKtypes(const std::string & filename,
			     const TFunctor & aFunctor )
  {
      typedef ImageContainerByITKImage<Domain, OrigValue> TypeDGtalImage;
      TypeDGtalImage dgtal_itk_image =
	ITKReader<I>::readDGtalITKImage<Domain, OrigValue>( filename );

      const Domain& domain = dgtal_itk_image.domain();

      typedef ConstImageAdapter<TypeDGtalImage, Domain, functors::Identity,
				Value, TFunctor> AdaptedImage;
      const functors::Identity identityFunctor{};
      const AdaptedImage adapted( dgtal_itk_image, domain, identityFunctor,
				 aFunctor );
      
      Image image( domain );
      std::copy( adapted.constRange().begin(), adapted.constRange().end(),
		 image.range().outputIterator() );
      return image;
  }


  //specialization
  template <typename I>
  template <typename Domain, typename OrigValue, typename TFunctor,
	    typename Value>
  ImageContainerByITKImage<Domain, Value>
  ITKReader<I>::Aux<ImageContainerByITKImage<Domain, Value>, Domain, OrigValue,
		    TFunctor, Value>::
  readDGtalImageFromITKtypes( const std::string & filename,
			      const TFunctor & aFunctor )
  {
    typedef ImageContainerByITKImage<Domain, Value> Image;
      
    typedef ImageContainerByITKImage<Domain, OrigValue> TypeDGtalImage;
    TypeDGtalImage dgtal_itk_image =
      ITKReader<I>::readDGtalITKImage<Domain, OrigValue>( filename );

    const Domain& domain = dgtal_itk_image.domain();

    typedef ConstImageAdapter<TypeDGtalImage, Domain, functors::Identity,
			      Value, TFunctor>
      AdaptedImage;
    const functors::Identity identityFunctor{};
    const AdaptedImage adapted( dgtal_itk_image, domain, identityFunctor,
			       	aFunctor );
      
    Image image( domain );
    std::copy( adapted.constRange().begin(), adapted.constRange().end(),
	       image.range().outputIterator() );

    //copy ITKImage spatial parameters
    image.getITKImagePointer()->SetOrigin(
      dgtal_itk_image.getITKImagePointer()->GetOrigin() );
    image.getITKImagePointer()->SetSpacing( 
      dgtal_itk_image.getITKImagePointer()->GetSpacing() );
    image.getITKImagePointer()->SetDirection(
      dgtal_itk_image.getITKImagePointer()->GetDirection() );
      
    return image;
  }



  template <typename I>
  template <typename TypeDGtalImage, typename TFunctor>
  typename ITKReader<I>::Image ITKReader<I>::
  readDGtalImageFromITKtypes( const std::string & filename,
			      const TFunctor & aFunctor )
  {
    typedef typename Image::Domain Domain;
    typedef typename TypeDGtalImage::Value OrigValue;

    return Aux<Image, Domain, OrigValue, TFunctor,
	       Value>::readDGtalImageFromITKtypes( filename, aFunctor );
  }

}//namespace
