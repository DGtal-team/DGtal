/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Clone.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/11/23
 *
 * Implementation of inline methods defined in Clone.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::~Clone()
{}
//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::Clone( const T & t ) 
  : myRefT( t )
{}
//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::Clone( const Clone<T> & other ) 
  : myRefT( other.myRefT )
{}
//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::Clone( const T* ptrT )
  : myRefT( *ptrT )
{
  ASSERT( ptrT != 0 );
}
//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::operator T() const
{ 
  return T( myRefT ); 
}
//-----------------------------------------------------------------------------
template <typename T>
inline
T*
DGtal::Clone<T>::allocate() const
{ 
  return new T( myRefT ); 
}
//-----------------------------------------------------------------------------
template <typename T>
inline
DGtal::Clone<T>::operator CountedPtr<T>() const
{ 
  return CountedPtr<T>( allocate() ); // duplicated once 
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //


//                                                                           //
///////////////////////////////////////////////////////////////////////////////


