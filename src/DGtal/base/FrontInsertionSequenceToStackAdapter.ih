/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FrontInsertionSequenceToStackAdapter.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/12/07
 *
 * Implementation of inline methods defined in FrontInsertionSequenceToStackAdapter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------
template <typename TSequence>
inline
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::
FrontInsertionSequenceToStackAdapter(Alias<Container> aContainer)
  : myContainerPtr(&aContainer)
{
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
typename DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::Size
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::size() const
{
  return myContainerPtr->size();
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
bool
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::empty() const
{
  return myContainerPtr->empty();
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
typename DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::Value&
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::top()
{
  return myContainerPtr->front();
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
const typename DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::Value&
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::top() const
{
  return myContainerPtr->front();
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
void
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::push(const Value& aValue)
{
  myContainerPtr->push_front(aValue); 
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
void
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::pop()
{
  myContainerPtr->pop_front(); 
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
void
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::selfDisplay ( std::ostream & out ) const
{
  out << "[FrontInsertionSequenceToStackAdapter]";
}

// ----------------------------------------------------------------------------
template <typename TSequence>
inline
bool
DGtal::FrontInsertionSequenceToStackAdapter<TSequence>::isValid() const
{
  return (myContainerPtr != 0);
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSequence>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const FrontInsertionSequenceToStackAdapter<TSequence> & object )
{
  object.selfDisplay( out );
  return out;
}


template <typename TSequence>
inline
DGtal::FrontInsertionSequenceToStackAdapter<TSequence> 
DGtal::frontStack ( TSequence& aSequence )
{
  return FrontInsertionSequenceToStackAdapter<TSequence>( aSequence ); 
}
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


