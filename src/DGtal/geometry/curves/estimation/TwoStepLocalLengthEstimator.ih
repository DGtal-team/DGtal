/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file TwoStepLocalLengthEstimator.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/27
 *
 * Implementation of inline methods defined in TwoStepLocalLengthEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename T>
inline
DGtal::TwoStepLocalLengthEstimator<T>::TwoStepLocalLengthEstimator(const double wdirect, const double wdiag)
  : myWeightDirect(wdirect), myWeightDiagonal(wdiag)
{}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename T>
inline
typename DGtal::TwoStepLocalLengthEstimator<T>::Quantity
DGtal::TwoStepLocalLengthEstimator<T>::eval(const ConstIterator& itb,
    const ConstIterator& ite, const double h) const
{
  ASSERT(h > 0);

  if ( DGtal::isEmpty(itb,ite) )
    return 0.;

  unsigned int nbDirect=0;
  unsigned int nbDiag=0;

  ConstIterator i = itb, ii = itb;
  ++ii;
 
  do
  {
    if ((i->second).dot(ii->second) == 0)
	    nbDiag++;
    else
	    nbDirect+=2;

    ++i;
    if (i == ite) 
	    continue;
    
    ++i; ++ii;

    if (ii == ite) 
	    continue;

    ++ii;
  }
  while ( (i != ite) && (ii != ite) );

  if ( i != ite )
    nbDirect++;
  
  return (nbDiag*myWeightDiagonal + nbDirect*myWeightDirect) * h;
}






// ------------------------------------------------------------------------
template <typename T>
inline
void
DGtal::TwoStepLocalLengthEstimator<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[TwoStepLocalLengthEstimator]";
  if (isValid()) 
    out <<" initialized";
  else
    out<< " not initialized";
}

// ------------------------------------------------------------------------
template <typename T>
inline
bool
DGtal::TwoStepLocalLengthEstimator<T>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const TwoStepLocalLengthEstimator<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


