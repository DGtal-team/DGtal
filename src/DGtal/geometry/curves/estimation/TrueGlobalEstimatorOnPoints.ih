/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/27
 *
 * Implementation of inline methods defined in TrueGlobalEstimatorOnPoints.h.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::TrueGlobalEstimatorOnPoints()
  : myFunctorPtr(nullptr) {}

// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::~TrueGlobalEstimatorOnPoints()
{
  if ( myFunctorPtr != nullptr )
    delete myFunctorPtr;
}

// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
void
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>
::attach(const ParametricShape& aShape) 
{
  if ( myFunctorPtr != nullptr )
    delete myFunctorPtr;
  myFunctorPtr = new ParametricShapeFunctor(aShape);
}

// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
typename DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::Quantity 
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::eval() const
{
  ASSERT(isValid());
  return myFunctorPtr->operator()();
}

// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
typename DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::Quantity 
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::eval(const ConstIterator& itb,
    const ConstIterator& ite,
    const double h) const
{
  ASSERT(isValid() && h>0.);

  ConstIterator lastPoint(ite);
  --lastPoint;

  RealPoint p( *itb );
  RealPoint p2( *lastPoint );

  return myFunctorPtr->operator()(p*h,p2*h);
}

// ------------------------------------------------------------------------
template <typename CIt, typename PShape, typename PShapeFunctor>
inline
bool
DGtal::TrueGlobalEstimatorOnPoints<CIt,PShape,PShapeFunctor>::isValid() const
{
    return myFunctorPtr != nullptr;
}


