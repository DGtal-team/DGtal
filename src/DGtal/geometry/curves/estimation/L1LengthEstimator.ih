/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file L1LengthEstimator.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/27
 *
 * Implementation of inline methods defined in L1LengthEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename T>
inline
typename DGtal::L1LengthEstimator<T>::Quantity
DGtal::L1LengthEstimator<T>::eval( const ConstIterator& itb,
    const ConstIterator& ite, const double h ) const
{
  ASSERT(h > 0.);
  
  Quantity val = 0.;
  
  if ( DGtal::isEmpty(itb,ite) )
    return val;

  ConstIterator i = itb;
  do
  {
    val += 1.;
    ++i;
  } 
  while (i != ite);  

  return val*h;
}




// ------------------------------------------------------------------------
template <typename T>
inline
void
DGtal::L1LengthEstimator<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[L1LengthEstimator]";
  if (isValid()) 
    out <<" initialized";
  else
    out<< " not initialized";
}

// ------------------------------------------------------------------------
template <typename T>
inline
bool
DGtal::L1LengthEstimator<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const L1LengthEstimator<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


