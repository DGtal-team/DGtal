/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file StandardDSS6Computer.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/01
 *
 * Implementation of inline methods defined in StandardDSS6Computer.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <boost/math/common_factor_rt.hpp>
#include "DGtal/io/Color.h"
//////////////////////////////////////////////////////////////////////////////





///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Default constructor.
 * not valid
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::StandardDSS6Computer()
{

  //projections
  std::vector<DGtal::Dimension> v1,v2,v3;
  v1.push_back(0);
  v1.push_back(1);
  v2.push_back(0);
  v2.push_back(2);
  v3.push_back(1);
  v3.push_back(2);
  
  myProjXY.init(v1.begin(),v1.end());
  myProjXZ.init(v2.begin(),v2.end());
  myProjYZ.init(v3.begin(),v3.end());

}

/**
 * Constructor with initialisation
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::StandardDSS6Computer(const ConstIterator& it)
{
  //projections
  std::vector<DGtal::Dimension> v1,v2,v3;
  v1.push_back(0);
  v1.push_back(1);
  v2.push_back(0);
  v2.push_back(2);
  v3.push_back(1);
  v3.push_back(2);
  
  myProjXY.init(v1.begin(),v1.end());
  myProjXZ.init(v2.begin(),v2.end());
  myProjYZ.init(v3.begin(),v3.end());

  init(it);
}

/**
 * Initialisation.
 * @param it an iterator on a sequence of points
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
void DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::init(const ConstIterator& it)
{

  //begin and end iterators
  myBegin = it;
  myEnd = it;
  
  myEnd++;
  
  //adapters and projections
  IteratorAdapter XYit(it,myProjXY); 
  myXYalgo.init(XYit);
  
  IteratorAdapter XZit(it,myProjXZ); 
  myXZalgo.init(XZit);
  
  IteratorAdapter YZit(it,myProjYZ); 
  myYZalgo.init(YZit);

}

/**
 * Copy constructor.
 * @param other the object to clone.
 * Forbidden by default.
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::StandardDSS6Computer ( 
									      const StandardDSS6Computer<TIterator,TInteger,connectivity> & other ) : 
  myProjXY(other.myProjXY), myProjXZ(other.myProjXZ), myProjYZ(other.myProjYZ),
  myXYalgo(other.myXYalgo), myXZalgo(other.myXZalgo), myYZalgo(other.myYZalgo),
  myBegin(other.myBegin), myEnd(other.myEnd) {}


/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 * Forbidden by default.
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity> &
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::operator= ( 
								      const StandardDSS6Computer<TIterator,TInteger,connectivity> & other ) 
{

  myProjXY = other.myProjXY;
  myProjXZ = other.myProjXZ; 
  myProjYZ = other.myProjYZ;
  myXYalgo = other.myXYalgo;
  myXZalgo = other.myXZalgo; 
  myYZalgo = other.myYZalgo;
  myBegin = other.myBegin;
  myEnd = other.myEnd;

  return *this;
}

template <typename TIterator, typename TInteger, int connectivity>
inline
typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::Self
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::getSelf() const {
  return Self();
} 


template <typename TIterator, typename TInteger, int connectivity>
inline
typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::Reverse
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::getReverse() const {
  return Reverse();
} 





/**
 * Equality operator.
 * @param other the object to compare with.
 * @return 'true' either if the points perfectly match
 * or if the first points match to the last ones
 * (same DSS scanned in the conversed way) 
 * and 'false' otherwise
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
bool
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::operator==( 
								      const StandardDSS6Computer<TIterator,TInteger,connectivity>& other ) const 
{
  return (  (	myXYalgo == other.myXYalgo ) &&
            (	myXZalgo == other.myXZalgo ) &&
            (	myYZalgo == other.myYZalgo ) &&
            (*myBegin == *other.myBegin) &&  
            (*myEnd == *other.myEnd) );
}

/**
 * Difference operator.
 * @param other the object to compare with.
 * @return 'false' if equal
 * 'true' otherwise
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
bool
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::operator!=( 
								      const StandardDSS6Computer<TIterator,TInteger,connectivity> & other ) const 
{
  return (!(*this == other));
}




/**
 * Tests whether the union between a point 
 * (adding to the front of the DSS 
 * with respect to the scan orientaion) 
 * and a DSS is a DSS. 
 * Computes the parameters of the new DSS 
 * with the adding point if true.
 * @param it an iterator on a sequence of points
 * @return 'true' if the union is a DSS, 'false' otherwise.
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
bool 
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::extendFront()
{
  if( isExtendableFront() ) {

    bool XYflag = myXYalgo.extendFront();
    bool XZflag = myXZalgo.extendFront();
    bool YZflag = myYZalgo.extendFront();
    ASSERT( (XYflag)&&(XZflag)&&(YZflag) );
    boost::ignore_unused_variable_warning(XYflag);
    boost::ignore_unused_variable_warning(XZflag);
    boost::ignore_unused_variable_warning(YZflag);

    myEnd++;
    return true;
  } else return false;
}



/** Tests whether the 3d DSS can be extended at the front. 
 *
 * @return 'true' if yes, 'false' otherwise
 */   
template <typename TIterator, typename TInteger, int connectivity>
inline
bool 
DGtal::StandardDSS6Computer<TIterator, TInteger,connectivity>::isExtendableFront()
{
  //projection on xy-plane
  bool XYflag = myXYalgo.isExtendableFront();
  
  //projection on xz-plane
  bool XZflag = myXZalgo.isExtendableFront();
  
  //projection on yz-plane
  bool YZflag = myYZalgo.isExtendableFront();
  
  if ( (XYflag)&&(XZflag)&&(YZflag) ) 
    return true;
  else return false;  
}




template <typename TIterator, typename TInteger, int connectivity>
inline
TIterator
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::begin() const {
  return myBegin;
}

template <typename TIterator, typename TInteger, int connectivity>
inline
TIterator
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::end() const {
  return myEnd;
}




//-----------------------------------------------------------------
/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */

template <typename TIterator, typename TInteger, int connectivity>
inline
bool
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::isValid() const
{
  return ( (myXYalgo.isValid())&&
           (myXZalgo.isValid())&&
           (myYZalgo.isValid()) );
}


/**
 * Computes the parameters 
 * (direction, intercept, thickness)
 * of the DSS
 * @param direction
 * @param intercept
 * @param thickness
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
void
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>
::getParameters ( Point3d& direction, PointR3d& intercept, PointR3d& thickness ) const
{

  //let us take the pair of projection planes for which
  //the common coordinate of the main vector cannot be 0

  if (myXYalgo.b() != 0) { //XY-plane, XZ-plane

    Integer a1 = myXYalgo.b();
    Integer b1 = myXYalgo.a();
    Integer a2 = myXZalgo.b();
    Integer c1 = myXZalgo.a();

    direction = Point3d(a1*a2,a2*b1,a1*c1);	

    Integer mu1 = myXYalgo.mu();
    Integer mu2 = myXZalgo.mu();
    intercept[0] = std::make_pair ( 0, 1 ); intercept[1] = std::make_pair ( -mu1, a1 ); intercept[2] = std::make_pair ( -mu2, a2 );

    Integer omega1 = myXYalgo.omega()-1;
    Integer omega2 = myXZalgo.omega()-1;
    thickness[0] = std::make_pair ( 0, 1 ); thickness[1] = std::make_pair ( -omega1, a1 ); thickness[2] = std::make_pair ( -omega2, a2 );

  } else {                     

    if (myXYalgo.a() != 0) {//XY-plane, YZ-plane

      Integer a1 = myXYalgo.b();
      Integer b1 = myXYalgo.a();
      Integer b2 = myYZalgo.b();
      Integer c2 = myYZalgo.a();

      direction = Point3d(b2*a1,b1*b2,b1*c2);

      Integer mu1 = myXYalgo.mu();
      Integer mu2 = myYZalgo.mu();
      intercept[0] = std::make_pair ( mu1, b1 ); intercept[1] = std::make_pair ( 0, 1 ); intercept[2] = std::make_pair ( -mu2, b2 );

      Integer omega1 = myXYalgo.omega()-1;
      Integer omega2 = myYZalgo.omega()-1;
      thickness[0] = std::make_pair ( omega1, b1 ); thickness[1] = std::make_pair ( 0, 1 ); thickness[2] = std::make_pair ( -omega2, b2 );

    } else {                  

      if (myYZalgo.a() != 0) {//YZ-plane, XZ-plane

	std::cerr << "YZ-XZ" << std::endl; 

        Integer b2 = myYZalgo.b();
        Integer c2 = myYZalgo.a();
        Integer a2 = myXZalgo.b();
        Integer c1 = myXZalgo.a();

        direction = Point3d(c2*a2,c1*b2,c1*c2);

        Integer mu1 = myYZalgo.mu();
        Integer mu2 = myXZalgo.mu();
        intercept[0] = std::make_pair ( mu2, c1 ); intercept[1] = std::make_pair ( mu1, c2 ); intercept[2] = std::make_pair ( 0, 1 );

        Integer omega1 = myYZalgo.omega()-1;
        Integer omega2 = myXZalgo.omega()-1;
        thickness[0] = std::make_pair ( omega2, c1 ); thickness[1] = std::make_pair ( omega1, c2 ); thickness[2] = std::make_pair ( 0, 1);

      } else {//degenerated case
        direction = Point3d(0,0,0);
        intercept[0] = std::make_pair ( 0, 1 ); intercept[1] = std::make_pair ( 0, 1 ); intercept[2] = std::make_pair ( 0, 1 );
        thickness[0] = std::make_pair ( 0, 1 ); thickness[1] = std::make_pair ( 0, 1 ); thickness[2] = std::make_pair ( 0, 1);
      }
    } 
  }

}

//-----------------------------------------------------------------------------
template <typename TIterator, typename TInteger, int connectivity>
inline
const typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::ArithmeticalDSSComputer2d &
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::arithmeticalDSS2dXY() const
{
  return myXYalgo;
}
//-----------------------------------------------------------------------------
template <typename TIterator, typename TInteger, int connectivity>
inline
const typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::ArithmeticalDSSComputer2d &
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::arithmeticalDSS2dXZ() const
{
  return myXZalgo;
}
//-----------------------------------------------------------------------------
template <typename TIterator, typename TInteger, int connectivity>
inline
const typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::ArithmeticalDSSComputer2d &
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::arithmeticalDSS2dYZ() const
{
  return myYZalgo;
}
//-----------------------------------------------------------------------------
template <typename TIterator, typename TInteger, int connectivity>
inline
const typename DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::ArithmeticalDSSComputer2d &
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::arithmeticalDSS2d( Dimension i ) const
{
  ASSERT( ( 0 <= i ) && ( i < 3 ) );
  switch ( i ) {
  case 0: return myYZalgo; break;
  case 1: return myXZalgo; break;
  default: return myXYalgo; break;
  }
}


/**
 * @return the style name used for drawing this object.
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
std::string
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::className() const
{
  return "StandardDSS6Computer";
}

//------------------------------------------------------------------------------
//   TEXT DISPLAY 

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TIterator, typename TInteger, int connectivity>
inline
void
DGtal::StandardDSS6Computer<TIterator,TInteger,connectivity>::selfDisplay ( std::ostream & out) const
{
  
  out << "[StandardDSS6Computer]" <<  std::endl;
  out << "[XYprojection]" <<  std::endl;
  out << myXYalgo <<  std::endl;
  out << "[XZprojection]" <<  std::endl;
  out << myXZalgo <<  std::endl;
  out << "[YZprojection]" <<  std::endl;
  out << myYZalgo <<  std::endl;
  out << "[End StandardDSS6Computer]" <<  std::endl;
  
}


//------------------------------------------------------------------------------
//   3D DRAWING 


