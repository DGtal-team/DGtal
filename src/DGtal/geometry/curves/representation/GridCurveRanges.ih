/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GridCurveRanges.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2011/09/06
 *
 *  @brief Implementation of ranges used in GridCurve.h, 
 * included in GridCurve class definition. 
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// class SCellsRange
///////////////////////////////////////////////////////////////////////////////


/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the signed d-cells of a grid curve.
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */


class SCellsRange
{

  // ------------------------- inner types --------------------------------
public: 
  typedef typename GridCurve::Storage Storage; 
  typedef typename GridCurve::Storage::const_iterator ConstIterator;
  typedef typename GridCurve::Storage::const_reverse_iterator ConstReverseIterator;
  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;
    
  /**
   * Default Constructor.
   */
  SCellsRange(){}

  /**
   * Constructor.
   * @param aStorage a range of cells.
   */
  SCellsRange( const Storage& aStorage ): myData(&aStorage){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  SCellsRange( const SCellsRange & aOther )
    : myData( aOther.myData ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  SCellsRange& operator= ( const SCellsRange & other )
  {  
    if ( this != &other )
      {
	myData = other.myData;
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~SCellsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const {
    return myData->size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[SCellsRange]" << std::endl;
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, ", ") );
    out << std::endl;
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'SCellsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'SCellsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const SCellsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const SCellsRange &scr)
  {
    return scr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const SCellsRange &scr, std::string /*mode*/)
  {
    return scr.defaultStyle();
  }
  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "SCellsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	aBoard << *it;
      }
  }
  friend void draw( Board2D &aBoard, const SCellsRange &scr)
  {
    scr.selfDraw(aBoard);
  }

  // ------------------------- private data --------------------------------
private: 
  /**
   * Pointer to the range of cells.
   */
  const typename GridCurve::Storage* myData;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return myData->begin();
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return myData->end();
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return myData->rbegin();
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return myData->rend();
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( myData->begin(), myData->begin(), myData->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }

};


///////////////////////////////////////////////////////////////////////////////
// end of class SCellsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class PointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the 0-cells of a grid curve,
 * viewed as points of integer coordinates. 
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class PointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToPoint<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,Point> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;

  // ------------------------- standard services --------------------------------


  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  PointsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)) {}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  PointsRange( const PointsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor) {}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  PointsRange& operator= ( const PointsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~PointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my0SCells.size();
  }
  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[PointsRange]" << std::endl;
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, ", ") );
    out << std::endl;
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'PointsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'PointsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const PointsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const PointsRange &pr)
  {
    return pr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const PointsRange &pr, std::string /*mode*/)
  {
    return pr.defaultStyle();
  }

  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "PointsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	aBoard << SetMode(it->className(),"Grid")
	       << *it;
      }
  }
  friend void draw( Board2D &aBoard, const PointsRange &pr)
  {
    pr.selfDraw(aBoard);
  }

  // ------------------------- private data --------------------------------
private:
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */    
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a digital point
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my0SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my0SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class PointsRange
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class MidPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the signed 1-cells of a grid curve, 
 * viewed as points of half-integer coordinates. 
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class MidPointsRange
{

  // ------------------------- inner types --------------------------------
public: 
  
  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToMidPoint<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,
			       typename KSpace::Space::RealPoint> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;

  // ------------------------- standard services --------------------------------

  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  MidPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  MidPointsRange( const MidPointsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor) {}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  MidPointsRange& operator= ( const MidPointsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~MidPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }
  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[MidPointsRange]" << std::endl; 
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, ", ") ); 
    out << std::endl; 
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'MidPointsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'MidPointsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const MidPointsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const MidPointsRange &mpr)
  {
    return mpr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const MidPointsRange &mpr, std::string /*mode*/)
  {
    return mpr.defaultStyle();
  }
  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "MidPointsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	typename IteratorCirculatorTraits<ConstIterator>::Value p(*it); 
	double s = 0.1; 
	aBoard.drawLine( p[0]-s, p[1]-s, p[0]+s, p[1]+s ); 
	aBoard.drawLine( p[0]-s, p[1]+s, p[0]+s, p[1]-s ); 
      }
  }
  friend void draw( Board2D &aBoard, const MidPointsRange &mpr)
  {
    mpr.selfDraw(aBoard);
  }

  // ------------------------- private data --------------------------------
private: 
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a real point
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class MidPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class ArrowsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the signed 1-cells of a grid curve,
 * viewed as pairs (point - shift vector), both in integer coordinates.
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class ArrowsRange
{

  // ------------------------- inner types --------------------------------
public: 

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToArrow<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor, 
			       std::pair<Point,Vector> > ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;
 
  // ------------------------- standard services --------------------------------

  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  ArrowsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)) {}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  ArrowsRange( const ArrowsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  ArrowsRange& operator= ( const ArrowsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~ArrowsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }

  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    ConstIterator it( this->begin() ); 
    ConstIterator itEnd( this->end() ); 
    out << "[ArrowsRange]" << std::endl; 
    out << "\t"; 
    for ( ; it != itEnd; ++it) 
      {
	typename IteratorCirculatorTraits<ConstIterator>::Value pair(*it); 
	out << pair.first << pair.second << ", "; 
      }
    out << std::endl; 
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'ArrowsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'ArrowsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const ArrowsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const ArrowsRange &ar)
  {
    return ar.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const ArrowsRange &ar, std::string /*mode*/)
  {
    return ar.defaultStyle();
  }

  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "ArrowsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	typename IteratorCirculatorTraits<ConstIterator>::Value pair(*it); 
	Vector shift( pair.second );
	aBoard << CustomStyle( shift.className(), 
			       new CustomPen( Color::Black, Color::Black, 1.0, 
					      Board2D::Shape::SolidStyle,
					      Board2D::Shape::RoundCap,
					      Board2D::Shape::RoundJoin ) );       
	draw(aBoard, shift, pair.first);
      }
  }
  friend void draw( Board2D &aBoard, const ArrowsRange &ar)
  {
    ar.selfDraw(aBoard);
  }

  // ------------------------- private data --------------------------------
private: 
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into an arrow (pair point-vector)
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class ArrowsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class InnerPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the 2-cells (viewed as points
 * of integer coordinates) that are directly incident to the
 * signed 1-cells of a 2d grid curve.
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class InnerPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToInnerPoint<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,Point> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;

  // ------------------------- standard services --------------------------------


  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  InnerPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  InnerPointsRange( const InnerPointsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor) {}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  InnerPointsRange& operator= ( const InnerPointsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~InnerPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[InnerPointsRange]" << std::endl;
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, ", ") );
    out << std::endl;
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'InnerPointsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'InnerPointsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const InnerPointsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }

  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const InnerPointsRange &ipr)
  {
    return ipr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const InnerPointsRange &ipr, std::string /*mode*/)
  {
    return ipr.defaultStyle();
  }

  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "InnerPointsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	aBoard << SetMode( it->className(), "Both" )
	       << CustomStyle( it->className(), 
			       new CustomFillColor( Color::Blue ) )
	       << *it;
      }
  }
  friend void draw( Board2D &aBoard, const InnerPointsRange &ipr)
  {
    ipr.selfDraw(aBoard);
  }

  // ------------------------- private data --------------------------------
private: 
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a digital point
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }
};

///////////////////////////////////////////////////////////////////////////////
// end of class InnerPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class OuterPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the 2-cells (viewed as points
 * of integer coordinates) that are indirectly incident to the
 * signed 1-cells of a 2d grid curve.
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class OuterPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToOuterPoint<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,Point> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;

  // ------------------------- standard services --------------------------------

  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  OuterPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  OuterPointsRange( const OuterPointsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  OuterPointsRange& operator= ( const OuterPointsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~OuterPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[OuterPointsRange]" << std::endl;
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, ", ") );
    out << std::endl;
  }
  /**
   * Overloads 'operator<<' for displaying objects of class 'OuterPointsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'OuterPointsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const OuterPointsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const OuterPointsRange &opr)
  {
    return opr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const OuterPointsRange &opr, std::string /*mode*/)
  {
    return opr.defaultStyle();
  }
  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "OuterPointsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	aBoard << SetMode( it->className(), "Both" )
	       << CustomStyle( it->className(), 
			       new CustomFillColor( Color::Green ) )
	       << *it;
      }
  }
  friend void draw( Board2D &aBoard, const OuterPointsRange &opr)
  {
    opr.selfDraw(aBoard);
  }
  
  // ------------------------- private data --------------------------------
private:
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */    
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a digital point
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }
};

///////////////////////////////////////////////////////////////////////////////
// end of class OuterPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class IncidentPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the two 2-cells (viewed as points
 * of integer coordinates) that are (directly and indirectly) 
 * incident to the signed 1-cells of a 2d grid curve.
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class IncidentPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToIncidentPoints<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,
			       std::pair<Point,Point> > ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;
 
  // ------------------------- standard services --------------------------------

  /**
   * Constructor.
   * @param aGridCurve a grid curve.
   */
  IncidentPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  IncidentPointsRange( const IncidentPointsRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  IncidentPointsRange& operator= ( const IncidentPointsRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~IncidentPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }

  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    ConstIterator it( this->begin() ); 
    ConstIterator itEnd( this->end() ); 
    out << "[IncidentPointsRange]" << std::endl; 
    out << "\t"; 
    for ( ; it != itEnd; ++it) 
      {
	typename IteratorCirculatorTraits<ConstIterator>::Value pair(*it); 
	out << pair.first << pair.second << ", "; 
      }
    out << std::endl; 
  }

  /**
   * Overloads 'operator<<' for displaying objects of class 'IncidentPointsRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'IncidentPointsRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const IncidentPointsRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  
  /**
   * Default drawing style object.
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const IncidentPointsRange &ipr)
  {
    return ipr.defaultStyle();
  }
  /**
   * Default drawing style object.
   * @param mode the drawing mode
   * @return the dyn. alloc. default style for this object.
   */
  DGtal::DrawableWithBoard2D* defaultStyle( std::string /*mode*/ ) const
  {
    return new DrawableWithBoard2D; 
  }
  friend DGtal::DrawableWithBoard2D* defaultStyle(const IncidentPointsRange &ipr, std::string /*mode*/)
  {
    return ipr.defaultStyle();
  }
  /**
   * @return the style name used for drawing this object.
   */
  std::string className() const
  {
    return "IncidentPointsRange";
  }
  
  /**
     Draw the object on a Board2D board
     @param board the output board where the object is drawn.
  */
  void selfDraw(Board2D & aBoard) const
  {
    ConstIterator it ( this->begin() ); 
    ConstIterator itEnd ( this->end() ); 
    for( ; it != itEnd; ++it)
      {
	typename IteratorCirculatorTraits<ConstIterator>::Value pair(*it); 
	aBoard << SetMode( pair.first.className(), "Both" )
	       << CustomStyle( pair.first.className(), 
			       new CustomFillColor( Color::Blue ) )
	       << pair.first 
	       << CustomStyle( pair.second.className(), 
			       new CustomFillColor( Color::Green ) )
	       << pair.second; 
      }
  }
  friend void draw( Board2D &aBoard, const IncidentPointsRange &ipr)
  {
    ipr.selfDraw(aBoard);
  }
  
  // ------------------------- private data --------------------------------
private: 
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a pair of digital points
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }
};

///////////////////////////////////////////////////////////////////////////////
// end of class IncidentPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class CodesRange
///////////////////////////////////////////////////////////////////////////////

/**
 * @brief Aim: model of CConstRange that provides services
 * to (circularly)iterate over the 1-cells of a 2d grid curve,
 * viewed as chain codes: 
 * - 0 for a shift to the right
 * - 2 for a shift to the left
 * - 1 for a shift to the up
 * - 3 for a shift to the bottom
 * 
 * (Included in GridCurve.h)
 *
 * @see GridCurve.h exampleGridCurve2d.cpp testGridCurve.cpp
 */
class CodesRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToCode<KSpace> Functor; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Functor,char> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  typedef Circulator<ConstIterator> ConstCirculator;
  typedef std::reverse_iterator<ConstCirculator> ConstReverseCirculator;
  // ------------------------- standard services --------------------------------

  /**
   * Constructor.
   */
  CodesRange(const GridCurve* aGridCurve ): myC(aGridCurve), myFunctor(Functor(myC->myK)){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  CodesRange( const CodesRange & aOther )
    : myC( aOther.myC ), myFunctor( aOther.myFunctor ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  CodesRange& operator= ( const CodesRange & other )
  {  
    if ( this != &other )
      {
	myC = other.myC;
	myFunctor = other.myFunctor; 
      }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~CodesRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  /**
   * Checks the validity/consistency of the object.
   * @return 'true' if the object is valid, 'false' otherwise.
   */
  bool isValid() const { return true; }
  
  // ------------------------- display --------------------------------
  /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */
  void selfDisplay ( std::ostream & out ) const 
  {
    typedef typename IteratorCirculatorTraits<ConstIterator>::Value Value; 
    out << "[CodesRange]" << std::endl;
    out << "\t"; 
    std::copy( this->begin(), this->end(), ostream_iterator<Value>(out, "") );
    out << std::endl;
  }
  
  /**
   * Overloads 'operator<<' for displaying objects of class 'CodesRange'.
   * @param out the output stream where the object is written.
   * @param object the object of class 'CodesRange' to write.
   * @return the output stream after the writing.
   */
  friend ostream& operator <<(ostream & out, const CodesRange & object)
  {
    object.selfDisplay( out );
    return out;
  }
  // ------------------------- private data --------------------------------
private:
  /**
   * Private member @a myC is an aliasing pointer to any grid curve
   */    
  const GridCurve* myC;
  /**
   * Functor transforming a signed cell into a char containing its code
   */    
  Functor myFunctor; 

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), myFunctor );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), myFunctor );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

  /**
   * Circulator service.
   * @return a circulator
   */
  ConstCirculator c() const {
    return ConstCirculator( this->begin(), this->begin(), this->end() );
  }

  /**
   * Circulator service.
   * @return a reverse circulator
   */
  ConstReverseCirculator rc() const {
    return ConstReverseCirculator( this->c() );
  }
};

///////////////////////////////////////////////////////////////////////////////
// end of class CodesRange
///////////////////////////////////////////////////////////////////////////////
