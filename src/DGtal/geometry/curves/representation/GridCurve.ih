/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GridCurve.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2011/06/27
 *
 * @brief Implementation of inline methods defined in GridCurve.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
#include <sstream>

//////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


template <typename TKSpace>
inline
typename DGtal::GridCurve<TKSpace>::SCell
DGtal::GridCurve<TKSpace>::PointTo0SCell(const Point& aPoint) 
{
  return myK.sPointel(aPoint,myK.NEG);
}

template <typename TKSpace>
inline
typename DGtal::GridCurve<TKSpace>::SCell
DGtal::GridCurve<TKSpace>::PointVectorTo1SCell(const Point& aPoint, const Vector& aVector) 
{

  ASSERT( (aVector.norm(Vector::L_1) == 1) );

  SCell pointel( myK.sPointel(aPoint,myK.NEG) );

  typename KSpace::Space::Dimension d = 0;
  while ( aVector[d] == 0 ) ++d;
  return myK.sIncident( pointel,d,(aVector[d]>0)?myK.POS:myK.NEG );
}


template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::initFromVector( const std::vector<Point>& aVectorOfPoints )  throw(ConnectivityException) 
{

  my0SCells.clear(); 
  my1SCells.clear(); 
  
  //create sequence of grid points and grid edges
  typename std::vector<Point>::const_iterator i, j; 

  i = aVectorOfPoints.begin();
  j = i; ++j;

  for ( ; j != aVectorOfPoints.end(); ++i, ++j) {

    Point p = *i; 
    Vector v = *j - p;

    if (v.norm(Vector::L_1) != 1) { //disconnected !
      throw ConnectivityException(); 
    }

    my0SCells.push_back( PointTo0SCell(p) );
    my1SCells.push_back( PointVectorTo1SCell(p,v) );
  }


  Point first = *aVectorOfPoints.begin();
  Point last = *i;
  Vector v(first - last); 
  if (v.norm(Vector::L_1) == 1) {               
    my1SCells.push_back( PointVectorTo1SCell(last,v) );
    my0SCells.push_back( PointTo0SCell(last) );
  } else if (first != last) {
    my0SCells.push_back( PointTo0SCell(last) );
  }

  return true;
}

template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::initFromVectorStream(std::istream & in ) 
{
  
  std::vector<Point> v = PointListReader<Point>
    ::getPointsFromInputStream(in);
  
  if (v.size() == 0) throw IOException(); 
  
  try {
    return DGtal::GridCurve<TKSpace>::initFromVector(v);
  } catch (DGtal::ConnectivityException& e) {
    throw ConnectivityException();
    return false; 
  }
}

template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::initFromSCellsVector( const std::vector<SCell>& aVectorOfSCells ) throw(ConnectivityException)
{

  my0SCells.clear(); 
  my1SCells.clear(); 
  
  //create sequence of grid points and grid edges
  //aVectorOfSCells is assumed to be counter-clockwise oriented
  typename std::vector<SCell>::const_iterator it, itEnd; 
  it = aVectorOfSCells.begin();
  itEnd = aVectorOfSCells.end();
  SCell currentSCell; 

  //first scell
  if (it != itEnd)
  {
    currentSCell = *it;
    SCell firstPointel( myK.sIndirectIncident( currentSCell, *myK.sDirs( currentSCell ) ) );
    
    my0SCells.push_back( firstPointel );
    my1SCells.push_back( currentSCell );

    //other scells
    for (++it; it != itEnd; ++it) {

      SCell expectedPointel( myK.sDirectIncident( currentSCell, *myK.sDirs( currentSCell ) ) );
      currentSCell = *it; 
      SCell pointel( myK.sIndirectIncident( currentSCell, *myK.sDirs( currentSCell ) ) );

      if ( myK.sKCoords(pointel) != myK.sKCoords(expectedPointel) ) { //disconnected !
        throw ConnectivityException(); 
      }

      my0SCells.push_back( pointel );
      my1SCells.push_back( currentSCell );
    }

    //if open, add a pointel
    SCell lastPointel( myK.sDirectIncident( currentSCell, *myK.sDirs( currentSCell ) ) );
    if ( lastPointel != firstPointel )
    {
      my0SCells.push_back( lastPointel ); 
    }

    return true;
  } else return false; //empty range

}

template <typename TKSpace>
inline
void
DGtal::GridCurve<TKSpace>::writeVectorToStream( std::ostream & out ) 
{
  typename Storage::const_iterator i = my0SCells.begin();
  while (i != my0SCells.end()) {
    Point p = myK.sCoords(*i); 
    for (unsigned int k = 0; k < Point::dimension; ++k) {
      out << p[k] << " ";
    }
    out << std::endl;
    ++i;
  }  
}

template <typename TKSpace>
DGtal::GridCurve<TKSpace>::GridCurve( const GridCurve<KSpace> & aOther )
  : myK( aOther.myK ), my0SCells( aOther.my0SCells ), my1SCells( aOther.my1SCells )
{
}

template <typename TKSpace>
typename DGtal::GridCurve<TKSpace> & 
DGtal::GridCurve<TKSpace>::operator=( const GridCurve<KSpace> & aOther )
{
  if ( this != &aOther )
    {
      myK = aOther.myK;
      my0SCells = aOther.my0SCells;
      my1SCells = aOther.my1SCells;
    }
  return *this;
}

template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::isValid() const
{
  return ( my0SCells.size() > 0 ) 
    && ( my1SCells.size() > 0 )
    && ( (my0SCells.size() - my1SCells.size()) >= 1 )
    && ( (my0SCells.size() - my1SCells.size()) <= 0 );
}

template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::isClosed() const
{
  //closed grid curves have as many 0-cells as 1-cells
  //because the convention is that open grid curves
  //always begin and end with 0-cells
  return ( my0SCells.size() == my1SCells.size() );
}

template <typename TKSpace>
inline
bool
DGtal::GridCurve<TKSpace>::isOpen() const
{
  return (! isClosed() );
}


//------------------------------------------------------------------------------
// ---------------- DISPLAY ----------------------------------------------------
//------------------------------------------------------------------------------

template <typename TKSpace>
inline
void
DGtal::GridCurve<TKSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[GridCurve]" << std::endl;
  out << "#0-cell 1-cell" << std::endl;
  typename Storage::const_iterator i0 = my0SCells.begin();
  typename Storage::const_iterator i1 = my1SCells.begin();
  while (i1 != my1SCells.end()) 
  {
    out << *i0 << *i1<< std::endl;
    ++i1;
    ++i0;
  }
  if (i0 != my0SCells.end())
  {
    out << *i0 << std::endl;
  }
}
//------------------------------------------------------------------------------

template <typename TKSpace>
inline
DGtal::DrawableWithBoard2D*
DGtal::GridCurve<TKSpace>::defaultStyle( std::string /*mode*/ ) const
{
  return new DrawableWithBoard2D; 
}
//------------------------------------------------------------------------------
template <typename TKSpace>
inline
std::string
DGtal::GridCurve<TKSpace>::className() const
{
  return "GridCurve";
}
//------------------------------------------------------------------------------
template <typename TKSpace>
inline
void 
DGtal::GridCurve<TKSpace>::selfDraw(Board2D & aBoard) const
{
  for(unsigned int i=0; i< my0SCells.size(); i++){
    aBoard << my0SCells.at(i);
  }
  for(unsigned int i=0; i< my1SCells.size(); i++){
    aBoard << my1SCells.at(i);
  }
}







///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

template <typename TKSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
      const DGtal::GridCurve<TKSpace> & aObject )
{
  aObject.selfDisplay ( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


