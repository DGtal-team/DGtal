/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file EllipticHelix.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, A3SI, France
 *
 * @date 2014/10/01
 *
 * Implementation of inline methods defined in EllipticHelix.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

template <typename T>
inline
DGtal::EllipticHelix<T>::EllipticHelix ( long double rr, long double rl, long double bb ) : r1 ( rr ), r2 ( rl ) , b ( bb ) {}

template < typename T>
inline
typename DGtal::EllipticHelix<T>::RealPoint DGtal::EllipticHelix<T>::x ( const long double t ) const
{
    return RealPoint ( r1 * std::cos ( t ), r2 * std::sin ( t ), b * t );
}

template < typename T>
inline
typename DGtal::EllipticHelix<T>::RealPoint DGtal::EllipticHelix<T>::xp ( const long double t ) const
{
    return RealPoint ( -r1 * std::sin ( t ), r2 * std::cos ( t ), b );
}

template < typename T>
inline
long double DGtal::EllipticHelix<T>:: f ( const RealPoint & p ) const
{
    if ( p[1]  >= 0. )
    {
      long double value = std::acos ( p[0] / r1 );
      if ( std::isnan ( value ) )
	     throw std::runtime_error ( "Out of range!" );
	  return value;
    }
    else if ( p[1] < 0. )
    {
        long double value = std::acos ( p[0] / r1 );
	if ( std::isnan ( value ) )
	  throw std::runtime_error ( "Out of range!" );
	return  2.0 * M_PI - value;
    }
    else
      throw std::runtime_error ( "Out of range!" );
}

template < typename T>
inline
long double DGtal::EllipticHelix<T>:: g ( const RealPoint & p ) const
{
  if ( p[0] >= 0. && p[1] >= 0. )
  {
    long double value = std::asin ( p[1] / r2 );
    if ( std::isnan ( value ) )
      throw std::runtime_error ( "Out of range!" );
    return value;
  }
  else if ( p[0] < 0. )
  {
    long double value = std::asin ( p[1] / r2 );
    if ( std::isnan ( value ) )
      throw std::runtime_error ( "Out of range!" );
    return M_PI - value;
  }
  else if ( p[0] >= 0. && p[1] < 0. )
  {
    long double value = std::asin ( p[1]/ r2 );
    if ( std::isnan ( value ) )
      throw std::runtime_error ( "Out of range!" );
    return 2. * M_PI + value;
  }
  else
    throw std::runtime_error ( "Out of range!" );
}

template < typename T>
inline
long double DGtal::EllipticHelix<T>:: h ( const RealPoint & p ) const
{
  if ( std::abs ( b ) < 1E-20 )
    return 0.;
  else
    return p[2]/b;
}

template < typename T>
inline
double DGtal::EllipticHelix<T>::getPeriod()
{
    return PERIOD;
}


template < typename T>
inline
void DGtal::EllipticHelix<T>::selfDisplay ( std::ostream & out ) const
{
    out << "[EllipticHelix]";
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'EllipticHelix'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'EllipticHelix' to write.
 * @return the output stream after the writing.
 */
template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const EllipticHelix<T> & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


