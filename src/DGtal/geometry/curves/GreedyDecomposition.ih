/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GreedyDecomposition.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/10/25
 *
 * Implementation of inline methods defined in GreedyDecomposition.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class GreedyDecomposition::SegmentIterator
///////////////////////////////////////////////////////////////////////////////

// ------------------------- Standard services -----------------------



/**
 * Constructor.
 * Nb: complexity in O(n).
 *
 * @param anIterator an iterator on the digital curve
 * to decompose
 */
 template <typename TSegment>
inline
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::SegmentIterator ( 
  const GreedyDecomposition<TSegment> *aDec,
  const typename TSegment::ConstIterator& aBack, 
  const TSegment& aSegment)
  : myDec( aDec ), 
    myFront( aBack ), 
    myBack( aBack ),
    mySegment( aSegment ), 
    myFlagIntersectNext(false),
    myFlagIntersectPrevious(false)
{
  if (myBack != myDec->myEnd) {   //if at least one element

    ++myFront;
    if (myFront == myDec->myEnd) {//if only one element
      
      mySegment.init(myBack);  

    } else {                      //if strictly more than one element

      if (myDec->isClosed) { //if processed as closed
        //check is the first and last element form a valid segment
        Iterator tmpIt = myDec->myEnd; --tmpIt;
        Segment tmpSegment; tmpSegment.init(tmpIt);
        myFlagIntersectPrevious = tmpSegment.extendForward(myDec->myBegin);
      } else {              //if processed as open
        myFlagIntersectPrevious = false;
      }
      //computation of the longest segment from myBack
      this->longestSegment();  
  
    }

  }
}



/**
 * Copy constructor.
 * @param other the iterator to clone.
 */
  template <typename TSegment>
inline
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::SegmentIterator
( const SegmentIterator & aOther )
  : myDec( aOther.myDec ), 
    myFront( aOther.myFront ), 
    myBack( aOther.myBack ),
    mySegment( aOther.mySegment ),
    myFlagIntersectNext( aOther.myFlagIntersectNext ), 
    myFlagIntersectPrevious( aOther.myFlagIntersectPrevious )  
{
}
    
/**
 * Assignment.
 * @param other the iterator to copy.
 * @return a reference on 'this'.
 */
  template <typename TSegment>
inline
typename DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator& 
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::operator=
( const SegmentIterator & other )
{
  if ( this != &other )
    {
      myDec = other.myDec;
      myFront = other.myFront;
      myBack = other.myBack;
      mySegment = other.mySegment;
      myFlagIntersectNext = other.myFlagIntersectNext;
      myFlagIntersectPrevious = other.myFlagIntersectPrevious;
    }
  return *this;
}
    
/**
 * Destructor.
 * Does nothing
 */
  template <typename TSegment>
inline
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::~SegmentIterator()
{
}

///////////////////////////////////////////////////////////////////////////////
// ------------------------- iteration services -------------------------
    
      
/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::operator*() const
{
  return mySegment;
}

/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::get() const
{
  return mySegment;
}

/**
 * Pre-increment.
 * Goes to the next segment on a digital curve.
 */

  template <typename TSegment>
inline
typename DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator & 
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::operator++()
{
  this->next();
  return *this;
}
    
/**
 * @return TRUE if the current segment intersects
 * the next one, FALSE otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::intersectNext() const
{
  return myFlagIntersectNext;
}

/**
 * @return TRUE if the current segment intersects
 * the previous one, FALSE otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::intersectPrevious() const
{
  return myFlagIntersectPrevious;
}

/**
 * Checks if the current segment intersects the next one (if exists).
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::doesIntersectNext(const Iterator& it)
{
    Segment tmpSegment;
    Iterator previousIt = it; --previousIt;
    tmpSegment.init(previousIt);
    return tmpSegment.extendForward(it);
}

/**
 * Computes the longest possible segment from 
 * two consecutive points.
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::longestSegment()
{

    mySegment.init(myBack);

    //while my segment can be extended at the front
    while ( (myFront != myDec->myEnd) && 
            (mySegment.extendForward(myFront)) ) {
      ++myFront;
    }

    //if the end of the sequence is reached
    if (myFront == myDec->myEnd) {
      //if the sequence is processed as a closed one
      //the first element of the sequence is added if possible
      if (myDec->isClosed) {
        myFlagIntersectNext = mySegment.extendForward(myDec->myBegin);
      } else {
        myFlagIntersectNext = false;
      } 
    } else {
    //otherwise
      myFlagIntersectNext = doesIntersectNext(myFront);
    }

}

  
/**
 * Goes to the next segment on a digital curve.
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::next()
{

  if (myFront != myDec->myEnd) { //if not the end

    myBack = myFront;

    myFlagIntersectPrevious = myFlagIntersectNext;

    if (myFlagIntersectPrevious) {
      --myBack; 
    } else {
      ++myFront;
    }

    this->longestSegment();

  } else { //if the front of the segment is at the end of the sequence
    myBack = myDec->myEnd;
  }
}


/**
 * @return an iterator of the digital curve
 * at the front of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::ConstIterator
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::getFront() const
{
  return myFront;
}

/**
 * @return an iterator of the digital curve
 * at the back of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::ConstIterator
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::getBack() const
{
  return myBack;
}


/**
 * Equality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions coincide.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::operator==
( const SegmentIterator & aOther ) const
{
  return ( (myFront == aOther.myFront)&&(myBack == aOther.myBack) );
}

/**
 * Inequality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions differs.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator::operator!=
( const SegmentIterator & aOther ) const
{
  return ( (myFront != aOther.myFront)||(myBack != aOther.myBack) );
}


///////////////////////////////////////////////////////////////////////////////
// class GreedyDecomposition
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


/**
 * Constructor.
 * @param aBegin, begin iterator on a digital curve
 * @param aEnd, end iterator on a digital curve
 */
  template <typename TSegment>
DGtal::deprecated::GreedyDecomposition<TSegment>::GreedyDecomposition
(const Iterator& aBegin, const Iterator& aEnd, const Segment& aSegment, const bool& aFlag)
 : myBegin(aBegin),
   myEnd(aEnd),
   mySegment(aSegment),
   isClosed(aFlag)
{
}

/**
 * Init.
 * @param aBegin, begin iterator on a digital curve
 * @param aEnd, end iterator on a digital curve
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::GreedyDecomposition<TSegment>::init
(const Iterator& aBegin, const Iterator& aEnd, const Segment& aSegment, const bool& aFlag)
{
  myBegin = aBegin;
  myEnd = aEnd;
  mySegment = aSegment;
  isClosed = aFlag;
}

/**
 * Destructor.
 */
  template <typename TSegment>
inline
DGtal::deprecated::GreedyDecomposition<TSegment>::~GreedyDecomposition()
{
}

/**
 * Iterator service.
 * @return an iterator pointing on the first segment
 * of the digital curve.
 */
  template <typename TSegment>
inline
typename DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator 
DGtal::deprecated::GreedyDecomposition<TSegment>::begin() const
{
  return SegmentIterator(this, myBegin, mySegment);
}

/**
 * Iterator service.
 * @return an iterator pointing after the last segment
 * of the digital curve.
 */
  template <typename TSegment>
inline
typename DGtal::deprecated::GreedyDecomposition<TSegment>::SegmentIterator 
DGtal::deprecated::GreedyDecomposition<TSegment>::end() const
{
  return SegmentIterator(this, myEnd, mySegment);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::GreedyDecomposition<TSegment>::selfDisplay ( std::ostream & out ) const
{
  out << "[GreedyDecomposition]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::GreedyDecomposition<TSegment>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

  template <typename TSegment>
inline
std::ostream&
DGtal::deprecated::operator<< ( std::ostream & out, 
      const GreedyDecomposition<TSegment> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


