/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ArithDSSIterator.ih
 * @author Isabelle Sivignon (\c isabelle.sivignon@gipsa-lab.grenoble-inp.fr )
 * gipsa-lab Grenoble Images Parole Signal Automatique (CNRS, UMR 5216), CNRS, France
 *
 * @date 2012/11/26
 *
 * Implementation of inline methods defined in ArithDSSIterator.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

template<typename TInteger, int c>
inline
DGtal::ArithDSSIterator<TInteger,c>::ArithDSSIterator(const Integer a, const Integer b, const Integer mu, const Point & p)
{
  myA = a;
  myB = b;
  myMu = mu;
  myP = p;
}

template<typename TInteger, int c>
inline
DGtal::ArithDSSIterator<TInteger,c>::ArithDSSIterator(const ArithDSSIterator<TInteger,c> &other):myA(other.myA),myB(other.myB),myMu(other.myMu),myP(other.myP)
{

}



template<typename TInteger, int c>
inline
typename DGtal::ArithDSSIterator<TInteger,c>::Self & DGtal::ArithDSSIterator<TInteger,c>::operator=(const ArithDSSIterator<TInteger,c> & other)
{
  if (this != &other)
    {
      myA = other.myA;
      myB = other.myB;
      myMu = other.myMu;
      myP = other.myP;
    }
  return *this;
}





template<typename TInteger, int c>
inline
TInteger DGtal::ArithDSSIterator<TInteger,c>::remainder(const Point &Q)
{
  return myA*Q[0] - myB*Q[1];
}

template<typename TInteger, int c>
inline
typename DGtal::ArithDSSIterator<TInteger,c>::reference DGtal::ArithDSSIterator<TInteger,c>::operator*() const
{
  return myP;
}


template<typename TInteger, int c>
inline
typename DGtal::ArithDSSIterator<TInteger,c>::Self & DGtal::ArithDSSIterator<TInteger,c>::operator++()
{
  Integer r = remainder(myP);
  if(c == 8)
    {
      if(r + myA >= myB + myMu)
	++(myP[1]);
      ++(myP[0]);
    }
  else // connectivity = 4
    {
      if(r - myB >=myMu)
	++(myP[1]);
      else
	++(myP[0]);
    }
  return *this;
}

template<typename TInteger, int c>
inline
typename DGtal::ArithDSSIterator<TInteger,c>::Self DGtal::ArithDSSIterator<TInteger,c>::operator++(int)
{
  Self _tmp = *this;
  this->operator++();
  return _tmp;
}


template<typename TInteger, int c>
inline
bool DGtal::ArithDSSIterator<TInteger,c>::operator==(const ArithDSSIterator<TInteger,c> & other) const
{
  return myP == other.myP;
}


template<typename TInteger, int c>
inline
bool DGtal::ArithDSSIterator<TInteger,c>::operator!=(const ArithDSSIterator<TInteger, c> & other) const
{
  return ! (this->operator==(other));
}








///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ArithDSSIterator'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ArithDSSIterator' to write.
 * @return the output stream after the writing.
 */
// inline
// std::ostream&
// DGtal::operator<< ( std::ostream & out,
//                   const ArithDSSIterator & object )
// {
//     object.selfDisplay ( out );
//     return out;
// }

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
