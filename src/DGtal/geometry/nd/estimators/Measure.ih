/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Measure.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/25
 *
 * Implementation of inline methods defined in Measure.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template< typename TSet>
inline
void 
DGtal::Measure<TSet>::init(const double h, const TSet &aSet)
{
  myH = h;
  mySetSize =  aSet.size() ;
  myIsInitBefore = true;
}


template< typename TSet>
inline
typename DGtal::Measure<TSet>::Quantity
DGtal::Measure<TSet>::eval() const
{
  ASSERT(myIsInitBefore);
  ASSERT(myH > 0);

  double hd = std::pow(myH, (double)TSet::Domain::dimension);

  return mySetSize/(double)hd;
}


/**
 * Constructon.
 */
template < typename TSet>
inline
DGtal::Measure<TSet>::Measure()
{
  myIsInitBefore = false;
}


/**
 * Destructor.
 */
template < typename TSet>
inline
DGtal::Measure<TSet>::~Measure()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template < typename TSet>
inline
void
DGtal::Measure<TSet>::selfDisplay ( std::ostream & out ) const
{
  out << "[Measure] ";
  if (this->isValid())
    out << " myH="<< myH<<", mySetSize="<< mySetSize;
  else
    out <<" (not initialized)";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename TSet>
inline
bool
DGtal::Measure<TSet>::isValid() const
{
  return myIsInitBefore;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template < typename TSet>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const Measure<TSet> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


