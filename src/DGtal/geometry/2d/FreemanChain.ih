/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FreemanChain.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 * Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2010/07/01
 *
 * Implementation of inline methods defined in FreemanChain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
#include <sstream>

//////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Constructor.
 * @param s the chain code.
 * @param x the x-coordinate of the first point.
 * @param y the y-coordinate of the first point.
 */

template <typename TInteger>
DGtal::FreemanChain<TInteger>::FreemanChain( const std::string & s, int x, int y )
  : chain( s ), x0( x ), y0( y ), xn( x ), yn( y )
{
	DGtal::FreemanChain<TInteger>::computeLastPoint();
}


/**
 * Constructor.
 * @param in any input stream,
 */
template <typename TInteger>
DGtal::FreemanChain<TInteger>::FreemanChain(std::istream & in ){
  DGtal::FreemanChain<TInteger>::read(in, *this);
  xn = x0; yn = y0; 
  DGtal::FreemanChain<TInteger>::computeLastPoint();
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template <typename TInteger>
DGtal::FreemanChain<TInteger>::FreemanChain( const FreemanChain<TInteger> & aOther )
  : chain( aOther.chain ), x0( aOther.x0 ), y0( aOther.y0 ), 
    xn( aOther.xn), yn( aOther.yn)
{
}

/**
 * Constructor.
 *
 *
 */
template <typename TInteger>
DGtal::FreemanChain<TInteger>::
FreemanChain( const std::vector<Z2i::Point> vectPoints ){
  ostringstream oss;
  x0=vectPoints.at(0)[0];
  y0=vectPoints.at(0)[1];
  xn=vectPoints.at(vectPoints.size()-1)[0];
  yn=vectPoints.at(vectPoints.size()-1)[1];
  
 
  Z2i::Point pt;
  Z2i::Point ptSuiv;
  for(unsigned int i=0; i< vectPoints.size()-1; i++){
    pt = vectPoints.at(i);
    ptSuiv = vectPoints.at(i+1);
    int dx = ptSuiv[0] - pt[0]; 
    int dy = ptSuiv[1] - pt[1]; 
    char aCode = '0' + (char) ( dx != 0 ? (1 - dx) : (2 - dy) );
    oss << aCode;
  }
  chain = oss.str();

}

/**
 * Assignment.
 * @param aOther the object to copy.
 * @return a reference on 'this'.
 */
template <typename TInteger>
typename DGtal::FreemanChain<TInteger> & 
DGtal::FreemanChain<TInteger>::operator=( const FreemanChain<TInteger> & aOther )
{
  if ( this != &aOther )
    {
      chain = aOther.chain;
      x0 = aOther.x0;
      y0 = aOther.y0;
    }
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Drawing services                 //

//------------------------------------------------------------------------------
template <typename TInteger>
inline
DGtal::DrawableWithBoard2D*
DGtal::FreemanChain<TInteger>::defaultStyle( std::string mode ) const
{
  if ( ( mode == "" ) || ( mode == "Grid" ) ) 
    return new DefaultDrawStyleGrid;
  else 
    return new DefaultDrawStyleInterGrid;  
}
//------------------------------------------------------------------------------
template <typename TInteger>
inline
std::string
DGtal::FreemanChain<TInteger>::styleName() const
{
  return "FreemanChain";
}
//------------------------------------------------------------------------------
template <typename TInteger>
inline
void 
DGtal::FreemanChain<TInteger>::selfDraw(Board2D & aBoard) const
{
  std::string mode = aBoard.getMode( this->styleName() );
  ASSERT( (mode=="Grid" || mode=="" || mode=="InterGrid") ||
	  ("DGtal::FreemanChain<Integer>::selfDraw: Unknown mode "+mode)==""  );
  
  if ( mode == "Grid"  || ( mode == "" )  )
    selfDrawAsGrid( aBoard );
  else if ( mode == "InterGrid" )
    selfDrawAsInterGrid( aBoard );
  
}
//------------------------------------------------------------------------------
template <typename TInteger>
inline
void 
DGtal::FreemanChain<TInteger>::selfDrawAsGrid(Board2D & aBoard) const
{
  vector<typename FreemanChain<TInteger>::PointI2> aVContour;
  FreemanChain<TInteger>::getContourPoints(*this, aVContour);
  TInteger minX, minY, maxX, maxY;
  this->computeBoundingBox(minX, minY, maxX, maxY);
  
  vector<LibBoard::Point> contour;
  for(unsigned int i=0; i< aVContour.size(); i++){
    contour.push_back(LibBoard::Point(NumberTraits<TInteger>::castToInt64_t(aVContour[i][0]),
				      NumberTraits<TInteger>::castToInt64_t(aVContour[i][1])));
  }
  aBoard.drawPolyline(contour);
}
//------------------------------------------------------------------------------
template <typename TInteger>
inline
void 
DGtal::FreemanChain<TInteger>::selfDrawAsInterGrid(Board2D & aBoard) const
{
  vector<typename FreemanChain<TInteger>::PointI2> aVContour;
  FreemanChain<TInteger>::getContourPoints(*this, aVContour);
  TInteger minX, minY, maxX, maxY;
  this->computeBoundingBox(minX, minY, maxX, maxY);
  
  vector<LibBoard::Point> contour;
  for(unsigned int i=0; i< aVContour.size(); i++){
    contour.push_back(LibBoard::Point(NumberTraits<TInteger>::castToInt64_t(aVContour[i][0])-0.5,
				      NumberTraits<TInteger>::castToInt64_t(aVContour[i][1])+0.5));
  }
  aBoard.drawPolyline(contour);
}

///////////////////////////////////////////////////////////////////////////////
// Iterators services                 //


/**
 * Iterator service.
 * @return an iterator pointing on the first point of the chain.
 */
template <typename TInteger>
typename DGtal::FreemanChain<TInteger>::ConstIterator 
DGtal::FreemanChain<TInteger>::begin() const
{
  return ConstIterator( *this, 0 );
}

/**
 * Iterator service.
 * @return an iterator pointing after the last point of the chain.
 */
template <typename TInteger>
typename DGtal::FreemanChain<TInteger>::ConstIterator 
DGtal::FreemanChain<TInteger>::end() const
{
  return ConstIterator( *this, chain.size()+1 );
}


/**
 * @return the length of the Freeman chain code.
 */
template <typename TInteger>
unsigned int
DGtal::FreemanChain<TInteger>::size() const
{
  return chain.size();
}



/**
 * @param aPos a position in the chain code.
 * @return the code at position [aPos].
 */ 
template <typename TInteger>
unsigned int
DGtal::FreemanChain<TInteger>::code( unsigned int aPos ) const
{
  ASSERT( aPos < chain.size() );
  return chain[ aPos ] - '0';
}

/**
 * @param pos a position in the chain code.
 * @return the next position.
 */ 
template <typename TInteger>
unsigned int
DGtal::FreemanChain<TInteger>::next( unsigned int aPos ) const
{
  ++aPos;
  if ( aPos >= chain.size() )
    aPos = 0;
  return aPos;
}

/**
 * @param pos a position in the chain code.
 * @return the previous position.
 */ 
template <typename TInteger>
unsigned int
DGtal::FreemanChain<TInteger>::previous( unsigned int aPos ) const
{
  if ( aPos == 0 ) aPos = chain.size() - 1;
  else --aPos;
  return aPos;
}


///////////////////////////////////////////////////////////////////////////////
// Staic services

/**
 * Returns the displacement vector of a Freeman code.
 *
 * @param dx (returns) the x-displacement.
 * @param dy (returns) the x-displacement.
 * @param aCode the code.
 */
template <typename TInteger>
inline
void
DGtal::FreemanChain<TInteger>::displacement( int & dx, int & dy, unsigned int aCode )
{
  switch ( aCode ) 
    {
    case 0: dx = 1; dy = 0; break;
    case 1: dx = 0; dy = 1; break;
    case 2: dx = -1; dy = 0; break;
    case 3: dx = 0; dy = -1; break;
    }
}

/**
 * @param aCode a Freeman code (between 0-3).
 * Returns the displacement vector of the Freeman code.
 */
template <typename TInteger>
inline
typename DGtal::PointVector<2,TInteger>
DGtal::FreemanChain<TInteger>::displacement( unsigned int aCode )
{
  
#ifdef CPP0X_INITIALIZER_LIST  
  switch ( aCode ) 
    {
    case 0:  return PointI2({1,0}); 
    case 1:  return PointI2({0,1}); 
    case 2:  return PointI2({-1,0});
    case 3:  return PointI2({0,-1});
    }
  return  PointI2({0,0}); 
#else
   int t[2] = {0,0};
  
  switch ( aCode ) 
    {
    case 0:  t[0]++; return PointI2( t ); 
    case 1:  t[1]++; return PointI2( t ); 
    case 2:  t[0]--; return PointI2( t );
    case 3:  t[1]--; return PointI2( t );
    }
  return  PointI2( t ); 
#endif //CPP0X_INITIALIZER_LIST
}





/**
 * @param aCode any Freeman code
 * @param ccw when 'true' turns counterclockwise, otherwise turns clockwise.
 *
 * @return the turned code.
 */
template <typename TInteger>
inline
unsigned int
DGtal::FreemanChain<TInteger>::turnedCode( unsigned int aCode, bool ccw )
{
  if ( ccw ) return ( aCode + 1 ) & 0x3;
  else       return ( aCode - 1 ) & 0x3;
}



template <typename TInteger>
void 
DGtal::FreemanChain<TInteger>::movePointFromFC(PointI2 & aPoint, unsigned int aCode ){
  switch ( aCode )
    {
    case 0: aPoint.at(0)++; break;
    case 1: aPoint.at(1)++; break;
    case 2: aPoint.at(0)--; break;
    case 3: aPoint.at(1)--; break;
    }
}




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'FreemanChain'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'FreemanChain' to write.
 * @return the output stream after the writing.
 */
template <typename TInteger>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const FreemanChain<TInteger> & aObject )
{
    aObject.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


