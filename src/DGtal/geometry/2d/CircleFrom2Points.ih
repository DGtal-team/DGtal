/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file CircleFrom2Points.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/09/22
 *
 * @brief Implementation of inline methods defined in CircleFrom2Points.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TPoint>
inline
DGtal::CircleFrom2Points<TPoint>::~CircleFrom2Points()
{
}

template <typename TPoint>
inline
DGtal::CircleFrom2Points<TPoint>::CircleFrom2Points(const Point& aPole): myPole(aPole)
{
}

template <typename TPoint>
inline
void
DGtal::CircleFrom2Points<TPoint>::init(
        const Point& aFirstPoint, 
        const Point& aSecondPoint)
{
  myP = aFirstPoint;
  myQ = aSecondPoint;
}


template <typename TPoint>
inline
DGtal::CircleFrom2Points<TPoint>::CircleFrom2Points(
        const Point& aPole,
        const Point& aFirstPoint, 
        const Point& aSecondPoint):
        myPole(aPole),
        myP(aFirstPoint),
        myQ(aSecondPoint)
{
}


template <typename TPoint>
inline
DGtal::CircleFrom2Points<TPoint>::CircleFrom2Points(
        const CircleFrom2Points & other):
        myPole(other.myPole),
        myP(other.myP),
        myQ(other.myQ)
{
}


template <typename TPoint>
inline
DGtal::CircleFrom2Points<TPoint>&
DGtal::CircleFrom2Points<TPoint>::operator=(
        const CircleFrom2Points & other)
{
  myP = other.myP;
  myQ = other.myQ;
  myPole = other.myPole;
  return *this;
}



template <typename TPoint>
inline
typename DGtal::CircleFrom2Points<TPoint>::Distance
DGtal::CircleFrom2Points<TPoint>::signedDistance(const Point& aP) const
{
	CircleFrom3Points<Point> c(myPole,myP,myQ); 
	return c.signedDistance(aP);
}

template <typename TPoint>
inline
void
DGtal::CircleFrom2Points<TPoint>::getParameters(double& cx, double& cy, double& r) const
{
	CircleFrom3Points<Point> c(myPole,myP,myQ); 
  c.getParameters(cx,cy,r); 
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename TPoint>
inline
std::string
DGtal::CircleFrom2Points<TPoint>::className() const
{
  return "CircleFrom2Points";
}

template <typename TPoint>
inline
void
DGtal::CircleFrom2Points<TPoint>::selfDisplay ( std::ostream & out ) const
{
  out << "[CircleFrom2Points] passing through:\n";
  out << "pole " << myPole << " and " << myP << myQ;
}

template <typename TPoint>
inline
bool
DGtal::CircleFrom2Points<TPoint>::isValid() const
{
    return true;
}


