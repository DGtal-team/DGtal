/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DSSLengthEstimator.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2011/07/07
 *
 * Implementation of inline methods defined in DSSLengthEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor.
 */
template <typename T>
inline
DGtal::DSSLengthEstimator<T>::DSSLengthEstimator()
{
  myIsInitBefore = false;
}

/**
 * Destructor.
 */
template <typename T>
inline
DGtal::DSSLengthEstimator<T>::~DSSLengthEstimator()
{
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :



template <typename T>
inline
void
DGtal::DSSLengthEstimator<T>::init(const double h, 
     const ConstIterator& itb, const ConstIterator& ite, const bool& isClosed)
{
  myH = h;
  myIsInitBefore = true;
  myRep.clear();

  //segments into DSS
  DSSComputer computer; 
  deprecated::GreedyDecomposition<DSSComputer> decomposition ( itb, ite, computer, isClosed ); 

  //computes the resulting polygonal representation
  typename deprecated::GreedyDecomposition<DSSComputer>::SegmentIterator segIt = decomposition.begin(); 
  for ( ; segIt != decomposition.end(); ++segIt ) {
    myRep.push_back( *segIt.getBack() );
  } 
  //last point
  ConstIterator i( segIt.getFront() ); 
  myRep.push_back(*--i); 
}

template <typename T>
inline
typename DGtal::DSSLengthEstimator<T>::Quantity
DGtal::DSSLengthEstimator<T>::eval() const
{
  ASSERT(myH > 0);
  ASSERT(myIsInitBefore);

  Quantity val = 0;
  
  if (myRep.size() > 1) {

    typename std::vector<Point>::const_iterator i = myRep.begin();
    typename std::vector<Point>::const_iterator j = i;
    ++j; 
    for ( ; j != myRep.end(); ++i, ++j) {
      Vector v( *j - *i ); 
      val += v.norm(Vector::L_2);
    }

  }
  
  return val*myH;
}





/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::DSSLengthEstimator<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[DSSLengthEstimator]";
  if (myIsInitBefore) 
    out <<" myH="<<myH;
  else
    out<< " not initialized";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::DSSLengthEstimator<T>::isValid() const
{
    return myIsInitBefore;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const DSSLengthEstimator<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


