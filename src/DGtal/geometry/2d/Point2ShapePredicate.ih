/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Point2ShapePredicate.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/10/27
 *
 * Implementation of inline methods defined in Point2ShapePredicate.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename Shape, bool isUpward, bool isClosed>
inline
DGtal::Point2ShapePredicate<Shape,isUpward,isClosed>::~Point2ShapePredicate()
{
}

/**
 * Constructor.
 * @param firstPoint, secondPoint, two points
 * that uniquely define the Point2ShapePredicate
 */
template <typename Shape, bool isUpward, bool isClosed>
inline
DGtal::Point2ShapePredicate<Shape,isUpward,isClosed>::Point2ShapePredicate(
        const Shape& aShape):
        myS(aShape)
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template <typename Shape, bool isUpward, bool isClosed>
inline
DGtal::Point2ShapePredicate<Shape,isUpward,isClosed>::Point2ShapePredicate(
        const Point2ShapePredicate & other):
        myS(other.myS)
{
}




/**
 * Checks whether [aPoint] belongs to the Point2ShapePredicate or not 
 * @param aPoint, the point to be tested.
 * @return 'true' if [aPoint] belongs to the Point2ShapePredicate
 * 'false' otherwise.
 */
template <typename Shape, bool isUpward, bool isClosed>
inline
bool
DGtal::Point2ShapePredicate<Shape,isUpward,isClosed>
::operator()(const Point& aPoint) const
{
  DGtal::Point2ShapePredicateComparator<
    typename Shape::Coordinate,
    isUpward,
    isClosed> theComparator;

  return theComparator(myS.signedDistance(aPoint),0);
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename Shape, bool isUpward, bool isClosed>
inline
void
DGtal::Point2ShapePredicate<Shape,isUpward,isClosed>
::selfDisplay ( std::ostream & out ) const
{
  out << "[Point2ShapePredicate] :\n";
  out << myS << "\n";
  std::string orientation = (isUpward)?
          "upward oriented":"downward oriented";
  std::string closure = (isClosed)?
          "closed":"open";
  out << "(" << orientation << ", " << closure << ")\n";
 
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Shape, bool isUpward, bool isClosed>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const Point2ShapePredicate<Shape,isUpward,isClosed> & object )
{
  object.selfDisplay( out );
  return out;
}

