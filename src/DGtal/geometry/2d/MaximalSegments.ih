/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MaximalSegments.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/01/14
 *
 * Implementation of inline methods defined in MaximalSegments.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class MaximalSegments<TSegment>::SegmentIterator
///////////////////////////////////////////////////////////////////////////////

/**
 * Checks if the current segment intersects the next one (if exists).
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::doesIntersectNext(const Iterator& it)
{
    Segment tmpSegment;
    Iterator previousIt = it; --previousIt;
    tmpSegment.init(previousIt);
    return tmpSegment.extendForward(it);
}

/**
 * Retrieves the first maximal segment of the sequence.
 */
template <typename TSegment>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::firstMaximalSegment()
{

  mySegment.init(myBack);
  extension<Segment,Iterator>(mySegment,myFront,myCov->myEnd);

  if (myFront != myCov->myEnd) {
    
    if (myCov->isClosed) { //if processed as closed 

      myFlagIntersectNext = doesIntersectNext(myFront);
      nextMaximalSegment();
      myCov->myFirstMaximalSegmentBack = myBack;

    } else {               //if processed as open

      myFlagIntersectNext = doesIntersectNext(myFront);

    }

  }

}

/**
 * Goes to the next maximal segment on the sequence.
 */
template <typename TSegment>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::nextMaximalSegment()
{

  myFlagIntersectPrevious = myFlagIntersectNext;

  if (myFlag == false) {
    //if the current segment lies between 
    //the first and last elements 
    //of the sequence

    if (myFront != myCov->myEnd) { //if not the end

      //backward extension
      myBack = myFront;
      ++myBack;
      ReverseIterator ri(myBack);
      ReverseSegment rseg; rseg.init(ri);
      extension<ReverseSegment,ReverseIterator>(rseg,ri);
      myBack = ri.base();


      //forward extension
      myFront = myBack;
      mySegment.init(myFront);
      extension<Segment,Iterator>(mySegment,myFront,myCov->myEnd);



      if (myFront == myCov->myEnd) {

        if (myCov->isClosed) { //if processed as closed 
          //while my segment can be extended at the beginning
          myFront = myCov->myBegin;
          while (mySegment.extendForward(myFront)) {
            ++myFront;
          }
          //overlap
          if (myFront == myCov->myBegin) { 
            Iterator tmpIt = myCov->myEnd; --tmpIt;
            Segment tmpSegment; tmpSegment.init(tmpIt);
            myFlagIntersectNext = tmpSegment.extendForward(myFront);
          } else {
            myFlagIntersectNext = doesIntersectNext(myFront);
          }
          myFlag = true;
        } else {              //if processed as open
          //the current segment is the last one and 
          //does not have any next segment
          myFlagIntersectNext = false;
        }

      } else {
        myFlagIntersectNext = doesIntersectNext(myFront);
      }

    } else { //if the front of the segment is at the end
            // of the sequence
      myBack = myCov->myEnd;
    }
  
  } else {
    //if the current segment contains
    //the first and last element 
    //of the sequence


    //backward extension
    myBack = myFront;
    ++myBack;
    ReverseIterator ri(myBack);
    ReverseSegment rseg; rseg.init(ri);
    extensionInLoop<ReverseSegment,ReverseIterator>( 
                    rseg,ri,
                    ReverseIterator(myCov->myEnd),ReverseIterator(myCov->myBegin) );
    myBack = ri.base();
    if (myBack == myCov->myEnd) myBack = myCov->myBegin;

    if (myBack != myCov->myFirstMaximalSegmentBack) { //if not the end

      //forward extension
      myFront = myBack;
      mySegment.init(myFront);
      extensionInLoop<Segment,Iterator>(mySegment,myFront,myCov->myBegin,myCov->myEnd);

      //overlap
      if (myFront == myCov->myBegin) { 
        Iterator tmpIt = myCov->myEnd; --tmpIt;
        Segment tmpSegment; tmpSegment.init(tmpIt);
        myFlagIntersectNext = tmpSegment.extendForward(myFront);
      } else {
        myFlagIntersectNext = doesIntersectNext(myFront);
      }

    } else { //if the back of the segment is at the 
             //back of the first maximal segment 
      myFront = myCov->myEnd;
      myBack = myCov->myEnd;
    }

  }

}

/**
 * Extension of the segment along the sequence while it is possible.
 * Nb: complexity in O(n).
 */
 template <typename TSegment>
template <typename TypeSegment, typename TypeIterator>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::
       extension(TypeSegment& aSeg, TypeIterator& it, const TypeIterator& end) {
    do {
      ++it;
    } while ( (it != end) && 
            (aSeg.extendForward(it)) );
}



/**
 * Extension of the segment along the sequence while it is possible.
 * Nb: complexity in O(n).
 */
template <typename TSegment>
template <typename TypeSegment, typename TypeIterator>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::extension(TypeSegment& aSeg, TypeIterator& it) 
{
  do {
    ++it;
  } while (aSeg.extendForward(it));
}


/**
 * Extension of the segment along the (circular) sequence while it is possible.
 * Nb: complexity in O(n).
 */
 template <typename TSegment>
template <typename TypeSegment, typename TypeIterator>
inline
 void
 DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::
 extensionInLoop(TypeSegment& aSeg, TypeIterator& it, 
		 const TypeIterator& begin, const TypeIterator& end) {
   do {
     ++it;
   } while ( (it != end) && 
	     (aSeg.extendForward(it)) );
    //if it is one-element-past-the end, 
    //go on at the beginning
   if (it == end) {
      it = begin;
      while ( (it != end) && 
              (aSeg.extendForward(it)) ) {
        ++it;
      }     
    }
}
// ------------------------- Standard services -----------------------

/**
 * Constructor.
 * Nb: complexity in O(n).
 *
 * @param anIterator an iterator on the digital curve
 * to decompose
 */
template <typename TSegment>
inline
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::SegmentIterator(MaximalSegments<Segment> *aCov,
									       const Iterator& aBack,
									       const Segment& aSegment )
  : myCov( aCov ), 
    myFront( aBack ), 
    myBack( aBack ),
    mySegment( aSegment ), 
    myFlagIntersectNext(false),
    myFlagIntersectPrevious(false),
    myFlag(false)
{
  if (myBack != myCov->myEnd) {
    this->firstMaximalSegment();
  }
}


/**
 * Copy constructor.
 * @param other the iterator to clone.
 */
template <typename TSegment>
inline
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator
::SegmentIterator( const SegmentIterator & aOther )
  : myCov( aOther.myCov ), 
    myFront( aOther.myFront ), myBack( aOther.myBack ),
    mySegment( aOther.mySegment ), 
    myFlagIntersectNext( aOther.myFlagIntersectNext ), 
    myFlagIntersectPrevious( aOther.myFlagIntersectPrevious ),
    myFlag( aOther.myFlag )
{
}
    
/**
 * Assignment.
 * @param other the iterator to copy.
 * @return a reference on 'this'.
 */
template <typename TSegment>
inline
typename DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator& 
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::operator=
( const SegmentIterator & other )
{
  if ( this != &other )
    {
      myCov = other.myCov;
      myFront = other.myFront;
      myBack = other.myBack;
      mySegment = other.mySegment;
      myFlagIntersectNext = other.myFlagIntersectNext;
      myFlagIntersectPrevious = other.myFlagIntersectPrevious;
      myFlag = other.myFlag;
    }
  return *this;
}
    
/**
 * Destructor.
 * Does nothing
 */
  template <typename TSegment>
inline
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::~SegmentIterator()
{
}

///////////////////////////////////////////////////////////////////////////////
// ------------------------- iteration services -------------------------
    
      
/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::operator*() const
{
  return mySegment;
}

/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::get() const
{
  return mySegment;
}

/**
 * Pre-increment.
 * Goes to the next segment on a digital curve.
 */

  template <typename TSegment>
inline
typename DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::SegmentIterator& 
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::operator++()
{
  this->nextMaximalSegment();
  return *this;
}



/**
 * @return an iterator of the digital curve
 * at the front of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::ConstIterator
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::getFront() const
{
  return myFront;
}

/**
 * @return an iterator of the digital curve
 * at the back of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::ConstIterator
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::getBack() const
{
  return myBack;
}


/**
 * @return TRUE if the current segment intersects
 * the next one, FALSE otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::intersectNext() const
{
  return myFlagIntersectNext;
}

/**
 * @return TRUE if the current segment intersects
 * the previous one, FALSE otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::intersectPrevious() const
{
  return myFlagIntersectPrevious;
}

/**
 * Equality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions coincide.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::operator==
( const SegmentIterator & aOther ) const
{
  return ( (myFront == aOther.myFront)&&(myBack == aOther.myBack) );
}

/**
 * Inequality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions differs.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator::operator!=
( const SegmentIterator & aOther ) const
{
  return ( (myFront != aOther.myFront)||(myBack != aOther.myBack) );
}


///////////////////////////////////////////////////////////////////////////////
// class MaximalSegments<TSegment>
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Constructor.
 */
  template <typename TSegment>
DGtal::deprecated::MaximalSegments<TSegment>::MaximalSegments(
  const Iterator& aBegin, 
  const Iterator& aEnd, 
  const Segment& aSegment, 
  const bool& aFlag)
  : myBegin(aBegin),
    myEnd(aEnd),
    myFirstMaximalSegmentBack(aBegin),
    mySegment(aSegment),
    isClosed(aFlag)
{
}

/**
 * Init.
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::init(
  const Iterator& aBegin, 
  const Iterator& aEnd, 
  const Segment& aSegment, 
  const bool& aFlag) {

 myBegin = aBegin;
 myEnd = aEnd;
 myFirstMaximalSegmentBack = aBegin;
 mySegment = aSegment;
 isClosed = aFlag;

}

/**
 * Destructor.
 */
  template <typename TSegment>
inline
DGtal::deprecated::MaximalSegments<TSegment>::~MaximalSegments()
{
}

/**
 * Iterator service.
 * @return an iterator pointing on the first maximal segment
 * of the sequence.
 */
  template <typename TSegment>
inline
typename DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator 
DGtal::deprecated::MaximalSegments<TSegment>::begin() 
{
  return SegmentIterator(this, myBegin, mySegment);
}

/**
 * Iterator service.
 * @return an iterator pointing after the last maximal segment
 * of the sequence.
 */
  template <typename TSegment>
inline
typename DGtal::deprecated::MaximalSegments<TSegment>::SegmentIterator 
DGtal::deprecated::MaximalSegments<TSegment>::end() 
{
  return SegmentIterator(this, myEnd, mySegment);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
  template <typename TSegment>
inline
void
DGtal::deprecated::MaximalSegments<TSegment>::selfDisplay ( std::ostream & out ) const
{
  out << "[MaximalSegments]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::deprecated::MaximalSegments<TSegment>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

  template <typename TSegment>
inline
std::ostream&
DGtal::deprecated::operator<< ( std::ostream & out, 
      const MaximalSegments<TSegment> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


