/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file StraightLine.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/10/27
 *
 * Implementation of inline methods defined in StraightLine.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename TInteger>
inline
DGtal::StraightLine<TInteger>::~StraightLine()
{
}

/**
 * Constructor.
 * @param firstPoint, secondPoint, two points
 * that uniquely define the StraightLine
 */
template <typename TInteger>
inline
DGtal::StraightLine<TInteger>::StraightLine(
        const Point& aFirstPoint, 
        const Point& aSecondPoint):
        myP(aFirstPoint),
        myQ(aSecondPoint)
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template <typename TInteger>
inline
DGtal::StraightLine<TInteger>::StraightLine(
        const StraightLine & other):
        myP(other.myP),
        myQ(other.myQ)
{
}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 */
template <typename TInteger>
inline
DGtal::StraightLine<TInteger>&
DGtal::StraightLine<TInteger>::operator=(
        const StraightLine & other)
{
  myP = other.myP;
  myQ = other.myQ;
  return *this;
}


/**
 * Computes the signed distance of [aP] to the StraightLine
 * @param aP, the point to be tested.
 * @return the signed distance.
 */
template <typename TInteger>
inline
TInteger
DGtal::StraightLine<TInteger>::signedDistance(const Point& aP) const
{
  Vector pq = myQ - myP;
  Vector pr = aP - myP;
  //computation of det(pq, pr) 
  //(= twice the parallelogram area)
  return ((pq.at(0) * pr.at(1)) - (pq.at(1) * pr.at(0)));
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename TInteger>
inline
DGtal::DrawableWithBoard2D*
DGtal::StraightLine<TInteger>::defaultStyle( std::string /*mode*/ ) const
{
  return new DrawableWithBoard2D; 
}

template <typename TInteger>
inline
std::string
DGtal::StraightLine<TInteger>::styleName() const
{
  return "StraightLine";
}

template <typename TInteger>
inline
void 
DGtal::StraightLine<TInteger>::selfDraw(Board2D & aBoard) const
{
  aBoard.drawLine(myP[0],myP[1],myQ[0],myQ[1]);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TInteger>
inline
void
DGtal::StraightLine<TInteger>::selfDisplay ( std::ostream & out ) const
{
  out << "[StraightLine] passing through:\n";
  out << myP << myQ;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TInteger>
inline
bool
DGtal::StraightLine<TInteger>::isValid() const
{
    return true;
}


