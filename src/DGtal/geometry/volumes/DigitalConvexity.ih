/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DigitalConvexity.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2020/01/31
 *
 * Implementation of inline methods defined in DigitalConvexity.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/geometry/volumes/ConvexityHelper.h"
//////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::DigitalConvexity<TKSpace>::
DigitalConvexity( Clone<KSpace> K )
  : myK( K )
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::DigitalConvexity<TKSpace>::
DigitalConvexity( Point lo, Point hi )
{
  myK.init( lo, hi, true );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
const TKSpace&
DGtal::DigitalConvexity<TKSpace>::
space() const
{
  return myK;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::LatticePolytope
DGtal::DigitalConvexity<TKSpace>::
makeSimplex( PointIterator itB, PointIterator itE )
{
  return LatticePolytope( itB, itE );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::LatticePolytope
DGtal::DigitalConvexity<TKSpace>::
makeSimplex( std::initializer_list<Point> l )
{
  return LatticePolytope( l );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::RationalPolytope
DGtal::DigitalConvexity<TKSpace>::
makeRationalSimplex( Integer d, PointIterator itB, PointIterator itE )
{
  return RationalPolytope( d, itB, itE );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::RationalPolytope
DGtal::DigitalConvexity<TKSpace>::
makeRationalSimplex( std::initializer_list<Point> l )
{
  return RationalPolytope( l );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
bool
DGtal::DigitalConvexity<TKSpace>::
isSimplexFullDimensional( PointIterator itB, PointIterator itE )
{
  typedef SimpleMatrix<Integer,dimension,dimension> Matrix;
  const Dimension d = KSpace::dimension;
  std::vector<Point> pts( d+1 );
  Dimension k = 0;
  for ( ; itB != itE && k <= d; ++itB, ++k ) pts[ k ] = *itB;
  // A simplex has exactly d+1 vertices.
  if ( k != d+1 ) return false;
  Matrix M;
  for ( Dimension i = 0; i < d; ++i )
    for ( Dimension j = 0; j < d; ++j )
      M.setComponent( i, j, pts[ i ][ j ] - pts[ d ][ j ] );
  // A simplex has its vectors linearly independent.
  return M.determinant() != 0;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isSimplexFullDimensional( std::initializer_list<Point> l )
{
  return isSimplexFullDimensional( l.begin(), l.end() );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::SimplexType
DGtal::DigitalConvexity<TKSpace>::
simplexType( PointIterator itB, PointIterator itE )
{
  typedef SimpleMatrix<Integer,dimension,dimension> Matrix;
  const Dimension d = KSpace::dimension;
  std::vector<Point> pts( d+1 );
  Dimension k = 0;
  for ( ; itB != itE && k <= d; ++itB, ++k ) pts[ k ] = *itB;
  // A simplex has exactly d+1 vertices.
  if ( k != d+1 ) return SimplexType::INVALID;
  Matrix M;
  for ( Dimension i = 0; i < d; ++i )
    for ( Dimension j = 0; j < d; ++j )
      M.setComponent( i, j, pts[ i ][ j ] - pts[ d ][ j ] );
  // A simplex has its vectors linearly independent.
  auto V = M.determinant();
  return (V == 0) ? SimplexType::DEGENERATED
    : ( ((V == 1) || (V==-1)) ? SimplexType::UNITARY : SimplexType::COMMON );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
void
DGtal::DigitalConvexity<TKSpace>::
displaySimplex( std::ostream& out, std::initializer_list<Point> l )
{
  displaySimplex( out, l.begin(), l.end() );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
void
DGtal::DigitalConvexity<TKSpace>::
displaySimplex( std::ostream& out, PointIterator itB, PointIterator itE )
{
  typedef SimpleMatrix<Integer,dimension,dimension> Matrix;
  const Dimension d = KSpace::dimension;
  std::vector<Point> pts( d+1 );
  Dimension k = 0;
  for ( ; itB != itE && k <= d; ++itB, ++k ) pts[ k ] = *itB;
  // A simplex has exactly d+1 vertices.
  if ( k != d+1 ) { out << "[SPLX INVALID]"; return; }
  Matrix M;
  for ( Dimension i = 0; i < d; ++i )
    for ( Dimension k = 0; k < d; ++k )
      M.setComponent( i, k, pts[ i ][ k ] - pts[ d ][ k ] );
  // A simplex has its vectors linearly independent.
  auto V = M.determinant();
  out << "[SPLX V=" << V;
  for ( Dimension i = 0; i < d; ++i ) {
    out << " (";
    for ( Dimension j = 0; j < d; ++j )
      out << " " << M( i, j );
    out << " )";
  }
  out << " ]";
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::SimplexType
DGtal::DigitalConvexity<TKSpace>::
simplexType( std::initializer_list<Point> l )
{
  return simplexType( l.begin(), l.end() );
}


//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::PointRange
DGtal::DigitalConvexity<TKSpace>::
insidePoints( const LatticePolytope& polytope )
{
  PointRange pts;
  polytope.getPoints( pts );
  return pts;
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::PointRange
DGtal::DigitalConvexity<TKSpace>::
interiorPoints( const LatticePolytope& polytope )
{
  PointRange pts;
  polytope.getInteriorPoints( pts );
  return pts;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::PointRange
DGtal::DigitalConvexity<TKSpace>::
insidePoints( const RationalPolytope& polytope )
{
  PointRange pts;
  polytope.getPoints( pts );
  return pts;
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::PointRange
DGtal::DigitalConvexity<TKSpace>::
interiorPoints( const RationalPolytope& polytope )
{
  PointRange pts;
  polytope.getInteriorPoints( pts );
  return pts;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::CellGeometry
DGtal::DigitalConvexity<TKSpace>::
makeCellCover( PointIterator itB, PointIterator itE,
               Dimension i, Dimension k ) const
{
  ASSERT( 0 <= i );
  ASSERT( i <= k );
  ASSERT( k <= KSpace::dimension );
  CellGeometry cgeom( myK, i, k, false );
  cgeom.addCellsTouchingPoints( itB, itE );
  return cgeom;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::CellGeometry
DGtal::DigitalConvexity<TKSpace>::
makeCellCover( const LatticePolytope& P,
               Dimension i, Dimension k ) const
{
  ASSERT( 0 <= i );
  ASSERT( i <= k );
  ASSERT( k <= KSpace::dimension );
  CellGeometry cgeom( myK, i, k, false );
  cgeom.addCellsTouchingPolytope( P );
  return cgeom;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::CellGeometry
DGtal::DigitalConvexity<TKSpace>::
makeCellCover( const RationalPolytope& P,
               Dimension i, Dimension k ) const
{
  ASSERT( 0 <= i );
  ASSERT( i <= k );
  ASSERT( k <= KSpace::dimension );
  CellGeometry cgeom( myK, i, k, false );
  cgeom.addCellsTouchingPolytope( P );
  return cgeom;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::LatticePolytope 
DGtal::DigitalConvexity<TKSpace>::
makePolytope( const PointRange& X, bool safe ) const
{
  if ( safe )
    {
      typedef typename detail::ConvexityHelperInternalInteger< Integer, true >::Type
        InternalInteger;
      return ConvexityHelper< dimension, Integer, InternalInteger >::
        computeLatticePolytope( X, false, false );
    }
  else
    {
      typedef typename detail::ConvexityHelperInternalInteger< Integer, false >::Type
        InternalInteger;
      return ConvexityHelper< dimension, Integer, InternalInteger >::
        computeLatticePolytope( X, false, false );
    }
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::PointRange
DGtal::DigitalConvexity<TKSpace>::
U( Dimension i, const PointRange& X ) const
{
  PointRange Y( X );
  PointRange Z;
  Z.reserve( X.size() );
  auto add_one = [&i] ( Point & p ) { p[ i ] += 1; };
  std::for_each( Y.begin(), Y.end(), add_one );
  std::set_union( X.cbegin(), X.cend(), Y.cbegin(), Y.cend(),
                  std::back_inserter( Z ) );
  return  Z;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
is0Convex( const PointRange& X, bool safe ) const
{
  if ( X.empty() ) return true;
  const auto P = makePolytope( X, safe );
  return P.count() == X.size();
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullyConvex( const PointRange& Z, bool convex0, bool safe ) const
{
  ASSERT( dimension <= 64 );
  typedef DGtal::int64_t Direction;
  typedef std::vector< Direction > Directions;
  std::array< Directions, dimension > C;
  const bool cvx0 = convex0 ? true : is0Convex( Z, safe );
  if ( ! cvx0 ) return false;
  C[ 0 ].push_back( (Direction) 0 );
  std::map< Direction, PointRange > X;
  X[ 0 ] = Z;
  std::sort( X[ 0 ].begin(), X[ 0 ].end() );
  for ( Dimension k = 1; k < dimension; k++ )
    {
      for ( const auto beta : C[ k-1 ] )
        {
          for ( Dimension j = 0; j < dimension; j++ )
            {
              const Direction dir_j = Direction(1) << j;
              if ( beta < dir_j )
                {
                  const Direction alpha = beta | dir_j;
                  C[ k ].push_back( alpha );
                  X[ alpha ] = U( j, X[ beta ] );
                  if ( ! is0Convex( X[ alpha ] ) ) return false;
                }
            }
        }
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isKConvex( const LatticePolytope& P, const Dimension k ) const
{
  if ( k == 0 ) return true;
  auto S = insidePoints( P );
  auto touched_cells     = makeCellCover( S.begin(), S.end(), k, k );
  auto intersected_cells = makeCellCover( P, k, k );
  return intersected_cells.nbCells() == touched_cells.nbCells()
    && intersected_cells.subset( touched_cells );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullyConvex( const LatticePolytope& P ) const
{
  auto S = insidePoints( P );
  for ( Dimension k = 1; k < KSpace::dimension; ++ k )
    {
      auto touched_cells     = makeCellCover( S.begin(), S.end(), k, k );
      auto intersected_cells = makeCellCover( P, k, k );
      if ( ( intersected_cells.nbCells() != touched_cells.nbCells() )
           || ( ! intersected_cells.subset( touched_cells ) ) )
        return false;
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isKSubconvex( const LatticePolytope& P, const CellGeometry& C, const Dimension k ) const
{
  auto intersected_cells = makeCellCover( P, k, k );
  return intersected_cells.subset( C );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullySubconvex( const LatticePolytope& P, const CellGeometry& C ) const
{
  auto intersected_cells = makeCellCover( P, C.minCellDim(), C.maxCellDim() );
  return intersected_cells.subset( C );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isKSubconvex( const Point& a, const Point& b,
              const CellGeometry& C, const Dimension k ) const
{
  CellGeometry cgeom( myK, k, k, false );
  cgeom.addCellsTouchingSegment( a, b );
  return cgeom.subset( C );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullySubconvex( const Point& a, const Point& b,
                  const CellGeometry& C ) const
{
  CellGeometry cgeom( myK, C.minCellDim(), C.maxCellDim(), false );
  cgeom.addCellsTouchingSegment( a, b );
  return cgeom.subset( C );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isKConvex( const RationalPolytope& P, const Dimension k ) const
{
  if ( k == 0 ) return true;
  auto S = insidePoints( P );
  auto touched_cells     = makeCellCover( S.begin(), S.end(), k, k );
  auto intersected_cells = makeCellCover( P, k, k );
  return intersected_cells.nbCells() == touched_cells.nbCells()
    && intersected_cells.subset( touched_cells );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullyConvex( const RationalPolytope& P ) const
{
  auto S = insidePoints( P );
  for ( Dimension k = 1; k < KSpace::dimension; ++ k )
    {
      auto touched_cells     = makeCellCover( S.begin(), S.end(), k, k );
      auto intersected_cells = makeCellCover( P, k, k );
      if ( ( intersected_cells.nbCells() != touched_cells.nbCells() )
           || ( ! intersected_cells.subset( touched_cells ) ) )
        return false;
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isKSubconvex( const RationalPolytope& P, const CellGeometry& C,
              const Dimension k ) const
{
  auto intersected_cells = makeCellCover( P, k, k );
  return intersected_cells.subset( C );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
bool
DGtal::DigitalConvexity<TKSpace>::
isFullySubconvex( const RationalPolytope& P, const CellGeometry& C ) const
{
  auto intersected_cells = makeCellCover( P, C.minCellDim(), C.maxCellDim() );
  return intersected_cells.subset( C );
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace>
inline
void
DGtal::DigitalConvexity<TKSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[DigitalConvexity]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace>
inline
bool
DGtal::DigitalConvexity<TKSpace>::isValid() const
{
  return true;
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

//-----------------------------------------------------------------------------
template <typename TKSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const DigitalConvexity<TKSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
