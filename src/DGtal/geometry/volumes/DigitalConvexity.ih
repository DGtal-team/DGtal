/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DigitalConvexity.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2020/01/31
 *
 * Implementation of inline methods defined in DigitalConvexity.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::DigitalConvexity<TKSpace>::
DigitalConvexity( Clone<KSpace> K )
  : myK( K )
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::DigitalConvexity<TKSpace>::
DigitalConvexity( Point lo, Point hi )
{
  myK.init( lo, hi, true );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::Polytope
DGtal::DigitalConvexity<TKSpace>::
makeSimplex( PointIterator itB, PointIterator itE )
{
  return Polytope( itB, itE );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::DigitalConvexity<TKSpace>::Polytope
DGtal::DigitalConvexity<TKSpace>::
makeSimplex( std::initializer_list<Point> l )
{
  return Polytope( l );
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
typename DGtal::DigitalConvexity<TKSpace>::CellGeometry
DGtal::DigitalConvexity<TKSpace>::
makeCellCover( PointIterator itB, PointIterator itE,
	       Dimension i, Dimension k )
{
  ASSERT( 0 <= i );
  ASSERT( i <= k );
  ASSERT( k <= KSpace::dimension );
  CellGeometry cgeom( myK, i, k, false );
  cgeom.addCellsTouchingPoints( itB, itE );
  return cgeom;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace>
inline
void
DGtal::DigitalConvexity<TKSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[DigitalConvexity]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace>
inline
bool
DGtal::DigitalConvexity<TKSpace>::isValid() const
{
  return true;
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
inline
std::string
DGtal::DigitalConvexity<TKSpace>::className
() const
{
  return "DigitalConvexity";
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

//-----------------------------------------------------------------------------
template <typename TKSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const DigitalConvexity<TKSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
