/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file BoundedLatticePolytope.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2020/01/02
 *
 * Implementation of inline methods defined in BoundedLatticePolytope.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/math/linalg/SimpleMatrix.h"
#include "DGtal/geometry/volumes/BoundedLatticePolytopeCounter.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
clear()
{
  A.clear();
  B.clear();
  I.clear();
  myValidEdgeConstraints = false;
  D = Domain( Point::zero, Point::zero );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>::
BoundedLatticePolytope( std::initializer_list<Point> l )
{
  myValidEdgeConstraints = false;
  init( l.begin(), l.end() );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename PointIterator>
DGtal::BoundedLatticePolytope<TSpace>::
BoundedLatticePolytope( PointIterator itB, PointIterator itE )
{
  myValidEdgeConstraints = false;
  init( itB, itE );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename HalfSpaceIterator>
DGtal::BoundedLatticePolytope<TSpace>::
BoundedLatticePolytope( const Domain& domain,
			HalfSpaceIterator itB, HalfSpaceIterator itE,
                        bool valid_edge_constraints,
                        bool check_duplicate_constraints )
  : myValidEdgeConstraints( valid_edge_constraints )
{
  init( domain, itB, itE,
        valid_edge_constraints, check_duplicate_constraints );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename HalfSpaceIterator>
void
DGtal::BoundedLatticePolytope<TSpace>::
init( const Domain& domain,
      HalfSpaceIterator itB, HalfSpaceIterator itE,
      bool valid_edge_constraints,
      bool check_duplicate_constraints )
{
  clear();
  myValidEdgeConstraints = valid_edge_constraints;
  const Dimension d = dimension;
  const Point lo = domain.lowerBound();
  const Point hi = domain.upperBound();
  D = Domain( lo, hi );
  // Add constraints related to sup/inf in x.
  for ( Dimension s = 0; s < d; ++s )
    {
      Vector z = Vector::zero;
      z[ s ]   = NumberTraits<Integer>::ONE;
      A.push_back( z );
      B.push_back( hi[ s ] );
      z[ s ]   = -NumberTraits<Integer>::ONE;
      A.push_back( z );
      B.push_back( -lo[ s ] );
    }
  Integer nb_hp = 2*d;
  if ( check_duplicate_constraints )
    {
      // Add other halfplanes
      for ( auto it = itB; it != itE; ++it )
        {
          // Checks that is not inside.
          const auto a = it->N;
          const auto b = it->c;
          const auto itAE = A.begin()+2*d;
          const auto itF  = std::find( A.begin(), itAE , a );
          if ( itF == itAE )
            {
              A.push_back( a );
              B.push_back( b );
              ++nb_hp;
            }
          else
            {
              const auto k = itF - A.begin();
              B[ k ] = std::min( B[ k ], b );
            }
        }
    }
  else
    { // Add other halfplanes
      for ( auto it = itB; it != itE; ++it )
        { 
          A.push_back( it->N );
          B.push_back( it->c );
          ++nb_hp;
        }
    }
  I = std::vector<bool>( nb_hp, true ); // inequalities are large
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
internalInitFromTriangle3D( Point a, Point b, Point c )
{
  Vector ab = b - a;
  Vector bc = c - b;
  Vector ca = a - c;
  Vector  n = detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::
    crossProduct( ab, bc );
  if ( n == Vector::zero ) { clear(); return false; }
  A.push_back( n );
  B.push_back( a.dot( A.back() ) );
  Vector mn = -1 * n;
  A.push_back( mn );
  B.push_back( a.dot( A.back() ) );
  I = std::vector<bool>( B.size(), true ); // inequalities are large
  std::vector<Point> pts = { a, b, c };
  detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::
    addEdgeConstraint( *this, 0, 1, pts );
  detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::
    addEdgeConstraint( *this, 1, 2, pts );
  detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::
    addEdgeConstraint( *this, 2, 0, pts );
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
internalInitFromSegment3D( Point a, Point b )
{
  Vector ab = b - a;
  if ( ab == Vector::zero ) return true; // domain and constraints already computed
  Dimension nb = 0;
  for ( Dimension k = 0; k < 3; ++k )
    {
      const auto t = Vector::base( k );
      Vector  w = detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::
        crossProduct( ab, t );
      if ( w == Vector::zero ) continue;
      A.push_back( w );
      B.push_back( a.dot( w ) );
      A.push_back( -1 * w );
      B.push_back( a.dot( A.back() ) );
      nb += 2;
    }
  I = std::vector<bool>( 2 * 3 + nb, true ); // inequalities are large
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
internalInitFromSegment2D( Point a, Point b )
{
  Vector ab = b - a;
  if ( ab == Vector::zero ) return true; // domain and constraints already computed
  Vector  n( -ab[ 1 ], ab[ 0 ] );
  A.push_back( n );
  B.push_back( a.dot( n ) );
  A.push_back( -1 * n );
  B.push_back( a.dot( A.back() ) );
  I = std::vector<bool>( 2*2+2, true ); // inequalities are large
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename PointIterator>
bool
DGtal::BoundedLatticePolytope<TSpace>::
init( PointIterator itB, PointIterator itE )
{
  typedef SimpleMatrix<Integer,dimension,dimension> Matrix;
  clear();
  const Dimension d = dimension;
  std::vector<Point> pts;
  for ( ; itB != itE; ++itB ) pts.push_back( *itB );
  Point lo = pts[ 0 ];
  Point hi = pts[ 0 ];
  for ( Dimension s = 1; s < pts.size(); ++s )
    {
      lo = lo.inf( pts[ s ] );
      hi = hi.sup( pts[ s ] );
    }
  // Add constraints related to sup/inf in x.
  for ( Dimension s = 0; s < d; ++s )
    {
      Vector z = Vector::zero;
      z[ s ]   = NumberTraits<Integer>::ONE;
      A.push_back( z );
      B.push_back( hi[ s ] );
      z[ s ]   = -NumberTraits<Integer>::ONE;
      A.push_back( z );
      B.push_back( -lo[ s ] );
    }
  D = Domain( lo, hi );
  if ( pts.size() != d+1 )
    { // Some degenerated cases are taken into account.
      myValidEdgeConstraints = true;
      if ( d == 3 ) {
	if ( pts.size() == 3 )
	  return internalInitFromTriangle3D( pts[ 0 ], pts[ 1 ], pts[ 2 ] );
	else if ( pts.size() == 2 )
	  return internalInitFromSegment3D( pts[ 0 ], pts[ 1 ] );
      } else if ( d == 2 ) {
	if ( pts.size() == 2 )
	  return internalInitFromSegment2D( pts[ 0 ], pts[ 1 ] );
      }
      I = std::vector<bool>( 2*2, true ); // inequalities are large
      if ( pts.size() == 1 ) return true;
      clear();
      return false;
    }
  // Build Matrix A and Vector b through cofactors
  I = std::vector<bool>( 3*d+1, true ); // inequalities are large
  Vector a;
  Integer b;
  for ( Dimension s = 0; s <= d; ++s )
    {
      // Build matrix v composed of p_i and vectors p_k - p_i for i and k != p
      Matrix V;
      Dimension p = (s+1) % (d+1);
      for ( Dimension j = 0; j < d; ++j )
        V.setComponent( 0, j, pts[ p ][ j ] - pts[ s ][ j ] );
      for ( Dimension k = 1; k < d; ++k )
        {
          Dimension l = (p+k) % (d+1);
          for ( Dimension j = 0; j < d; ++j )
            V.setComponent( k, j, pts[ l ][ j ] - pts[ p ][ j ] );
        }
      b = V.determinant();
      if ( b == 0 ) 
        {
	  clear();
          D = Domain();
          return false;
        }
      // Form vector [b, 0, ..., 0]
      Vector z = Vector::zero;
      z[ 0 ]   = 1;
      a        = V.cofactor().transpose() * z;
      b       += a.dot( pts[ s ] );
      // Check sign
      if ( a.dot( pts[ s ] ) > b ) { a *= (Integer) -1; b *= (Integer) -1; }
      A.push_back( a );
      B.push_back( b );
    }
  myValidEdgeConstraints = ( dimension == 2 );
  if ( dimension == 3 )
    { // One should add edges
      for ( unsigned int i = 0; i < pts.size(); ++i )
	for ( unsigned int j = i+1; j < pts.size(); ++j ) {
	  detail::BoundedLatticePolytopeSpecializer< dimension, Integer >::addEdgeConstraint
	    ( *this, i, j, pts );
	}
      myValidEdgeConstraints = true;
    }
  // not implemented for dimension > 3
  return true;
}


//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::BoundedLatticePolytope<TSpace>::
interiorPolytope() const
{
  BoundedLatticePolytope P( *this );
  for ( auto it = P.I.begin(), itE = P.I.end(); it != itE; ++it )
    *it = false;
  return P;
} 

//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::BoundedLatticePolytope<TSpace>::
closurePolytope() const
{
  BoundedLatticePolytope P( *this );
  for ( auto it = P.I.begin(), itE = P.I.end(); it != itE; ++it )
    *it = true;
  return P;
} 

//-----------------------------------------------------------------------------
template <typename TSpace>
unsigned int 
DGtal::BoundedLatticePolytope<TSpace>::
cut( Dimension k, bool pos, Integer b, bool large )
{
  ASSERT( k < dimension );
  auto i = 2*k + (pos ? 0 : 1);
  B[ i ] = std::min( B[ i ], b );
  I[ i ] = large;
  Point L = D.lowerBound();
  Point U = D.upperBound();
  if ( pos ) U[ k ] =  B[ i ];
  else       L[ k ] = -B[ i ];
  D = Domain( L, U );
  return k;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
unsigned int 
DGtal::BoundedLatticePolytope<TSpace>::
cut( const Vector& a, Integer b, bool large, bool valid_edge_constraint )
{
  // Checks that is not inside.
  auto it = std::find( A.begin(), A.end(), a );
  if ( it == A.end() )
    {
      A.push_back( a );
      B.push_back( b );
      I.push_back( large );
      myValidEdgeConstraints = myValidEdgeConstraints && valid_edge_constraint; // a cut might invalidate an edge constraint
      return A.size() - 1;
    }
  else
    {
      auto k = it - A.begin();
      B[ k ] = std::min( B[ k ], b );
      I[ k ] = large;
      myValidEdgeConstraints = myValidEdgeConstraints && valid_edge_constraint; // a cut might invalidate an edge constraint
      return k;
    }
}
//-----------------------------------------------------------------------------
template <typename TSpace>
unsigned int 
DGtal::BoundedLatticePolytope<TSpace>::
cut( const HalfSpace& hs, bool large, bool valid_edge_constraint )
{
  auto a = hs.N;
  auto b = hs.c;
  return cut( a, b, large, valid_edge_constraint );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
void 
DGtal::BoundedLatticePolytope<TSpace>::
swap( BoundedLatticePolytope & other )
{
  A.swap( other.A );
  B.swap( other.B );
  I.swap( other.I );
  std::swap( D, other.D );
  std::swap( myValidEdgeConstraints, other.myValidEdgeConstraints );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
isInside( const Point& p ) const
{
  ASSERT( isValid() );
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      bool in_half_space =
	I[ i ]
	? A[ i ].dot( p ) <= B[ i ]
	: A[ i ].dot( p ) <  B[ i ];
      if ( ! in_half_space ) return false;
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
isDomainPointInside( const Point& p ) const
{
  ASSERT( isValid() );
  for ( Dimension i = 2*dimension; i < A.size(); ++i )
    {
      bool in_half_space =
	I[ i ]
	? A[ i ].dot( p ) <= B[ i ]
	: A[ i ].dot( p ) <  B[ i ];
      if ( ! in_half_space ) return false;
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
isInterior( const Point& p ) const
{
  ASSERT( isValid() );
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      bool in_half_space = A[ i ].dot( p ) <  B[ i ];
      if ( ! in_half_space ) return false;
    }
  return true;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::
isBoundary( const Point& p ) const
{
  ASSERT( isValid() );
  bool is_boundary = false;
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      auto Ai_dot_p = A[ i ].dot( p );
      if ( Ai_dot_p == B[ i ] ) is_boundary = true;
      if ( Ai_dot_p > B[ i ] ) return false;
    }
  return is_boundary;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator*=( Integer t )
{
  for ( Integer& b : B ) b *= t;
  D = Domain( D.lowerBound() * t, D.upperBound() * t );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( UnitSegment s )
{
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      if ( A[ i ][ s.k ] > NumberTraits<Integer>::ZERO )
        B[ i ] += A[ i ][ s.k ];
    }
  Vector z = Vector::zero;
  z[ s.k ] = NumberTraits<Integer>::ONE;
  D = Domain( D.lowerBound(), D.upperBound() + z );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( LeftStrictUnitSegment s )
{
  I[ 2*s.k + 1 ] = false;
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      if ( A[ i ][ s.k ] > NumberTraits<Integer>::ZERO )
        B[ i ] += A[ i ][ s.k ];
      if ( A[ i ][ s.k ] < NumberTraits<Integer>::ZERO )
	I[ i ] = false;
    }
  Vector z = Vector::zero;
  z[ s.k ] = NumberTraits<Integer>::ONE;
  D = Domain( D.lowerBound() + z, D.upperBound() + z );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( RightStrictUnitSegment s )
{
  I[ 2*s.k ] = false;
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      if ( A[ i ][ s.k ] > NumberTraits<Integer>::ZERO ) {
        B[ i ] += A[ i ][ s.k ];
	I[ i ]  = false;
      }
    }
  Vector z = Vector::zero;
  z[ s.k ] = NumberTraits<Integer>::ONE;
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( UnitCell c )
{
  for ( Dimension i = 0; i < c.dims.size(); ++i )
    *this += UnitSegment( c.dims[ i ] );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( RightStrictUnitCell c )
{
  for ( Dimension i = 0; i < c.dims.size(); ++i )
    *this += RightStrictUnitSegment( c.dims[ i ] );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Self&
DGtal::BoundedLatticePolytope<TSpace>::
operator+=( LeftStrictUnitCell c )
{
  for ( Dimension i = 0; i < c.dims.size(); ++i )
    *this += LeftStrictUnitSegment( c.dims[ i ] );
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
count() const
{
  BoundedLatticePolytopeCounter<Space> C( *this );
  return C.countAlongAxis( C.longestAxis() );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countInterior() const
{
  BoundedLatticePolytopeCounter<Space> C( *this );
  return C.countInteriorAlongAxis( C.longestAxis() );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countBoundary() const
{
  const auto clP = closurePolytope();
  return clP.count() - countInterior();
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countWithin( Point lo, Point hi ) const
{
  BoundedLatticePolytopeCounter<Space> C( *this );
  Dimension b = 0;
  lo = lo.sup( D.lowerBound() );
  hi = hi.inf( D.upperBound() );
  auto b_size = hi[ 0 ] - lo[ 0 ];
  for ( Dimension a = 1; a < dimension; a++ )
    {
      const auto a_size = hi[ a ] - lo[ a ];
      if ( b_size < a_size ) { b = a; b_size = a_size; }
    }
  hi[ b ] = lo[ b ];
  Integer nb = 0;
  Domain localD( lo, hi );
  for ( auto&& p : localD )
    {
      auto I = C.intersectionIntervalAlongAxis( p, b );
      nb    += I.second - I.first;
    }
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countUpTo( Integer max) const
{
  BoundedLatticePolytopeCounter<Space> C( *this );
  Dimension a = C.longestAxis();
  Integer nb  = 0;
  Point lo    = D.lowerBound();
  Point hi    = D.upperBound();
  hi[ a ]     = lo[ a ];
  Domain localD( lo, hi );
  for ( auto&& p : localD )
    {
      auto I = C.intersectionIntervalAlongAxis( p, a );
      nb    += I.second - I.first;
      if ( nb >= max ) return max;
    }
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getPoints( std::vector<Point>& pts ) const
{
  pts.clear();
  BoundedLatticePolytopeCounter<Space> C( *this );
  C.getPointsAlongAxis( pts, C.longestAxis() );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getKPoints( std::vector<Point>& pts, const Point& alpha_shift ) const
{
  pts.clear();
  BoundedLatticePolytopeCounter<Space> C( *this );
  Dimension a = C.longestAxis();
  Integer nb  = 0;
  Point lo    = D.lowerBound();
  Point hi    = D.upperBound();
  hi[ a ]     = lo[ a ];
  Domain localD( lo, hi );
  for ( auto&& p : localD )
    {
      auto I = C.intersectionIntervalAlongAxis( p, a );
      Point q( 2*p - alpha_shift );
      q[ a ] = 2*I.first - alpha_shift[ a ];
      for ( Integer x = I.first; x < I.second; x++ )
        {
          pts.push_back( q );
          q[ a ] += 2;
        }
    }  
}
//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename PointSet>
void
DGtal::BoundedLatticePolytope<TSpace>::
insertPoints( PointSet& pts_set ) const
{
  std::vector<Point> pts;
  getPoints( pts );
  pts_set.insert( pts.cbegin(), pts.cend() );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename PointSet>
void
DGtal::BoundedLatticePolytope<TSpace>::
insertKPoints( PointSet& pts_set, const Point& alpha_shift ) const
{
  BoundedLatticePolytopeCounter<Space> C( *this );
  Dimension a = C.longestAxis();
  Integer nb  = 0;
  Point lo    = D.lowerBound();
  Point hi    = D.upperBound();
  hi[ a ]     = lo[ a ];
  Domain localD( lo, hi );
  for ( auto&& p : localD )
    {
      auto I = C.intersectionIntervalAlongAxis( p, a );
      Point q( 2*p - alpha_shift );
      q[ a ] = 2*I.first - alpha_shift[ a ];
      for ( Integer x = I.first; x < I.second; x++ )
        {
          pts_set.insert( q );
          q[ a ] += 2;
        }
    }  
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getInteriorPoints( std::vector<Point>& pts ) const
{
  pts.clear();
  BoundedLatticePolytopeCounter<Space> C( *this );
  C.getInteriorPointsAlongAxis( pts, C.longestAxis() );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getBoundaryPoints( std::vector<Point>& pts ) const
{
  const auto clP = closurePolytope();
  BoundedLatticePolytopeCounter<Space> C  ( *this );  
  BoundedLatticePolytopeCounter<Space> clC( clP );  
  pts.clear();
  const Dimension a = clC.longestAxis();
  Point lo = clP.getDomain().lowerBound();
  Point hi = clP.getDomain().upperBound();
  hi[ a ]  = lo[ a ];
  Domain localD( lo, hi );
  for ( auto&& p : localD )
    {
      auto I   = C  .interiorIntersectionIntervalAlongAxis( p, a );
      auto clI = clC.intersectionIntervalAlongAxis( p, a );
      auto nbI   = I.second - I.first;
      auto nbclI = clI.second - clI.first;
      if ( nbI == nbclI ) continue;
      if ( nbI >  nbclI )
        trace.error() << "BoundedLatticePolytope::getBoundaryPoints: bad count"
                      << std::endl;
      Point q = p;
      if ( nbI == 0 )
        {
          for ( Integer x = clI.first; x != clI.second; x++ )
            {
              q[ a ] = x;
              pts.push_back( q );
            }
        }
      else
        {
          if ( clI.first < I.first )
            {
              q[ a ] = clI.first;
              pts.push_back( q );
            }
          if ( clI.second > I.second )
            {
              q[ a ] = I.second;
              pts.push_back( q );
            }
        }
    }
}


//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countByScanning() const
{
  Integer nb = 0;
  for ( const Point & p : D )
    nb += isDomainPointInside( p ) ? NumberTraits<Integer>::ONE : NumberTraits<Integer>::ZERO;
  return nb;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countInteriorByScanning() const
{
  Integer nb = 0;
  for ( const Point & p : D )
    nb += isInterior( p ) ? NumberTraits<Integer>::ONE : NumberTraits<Integer>::ZERO;
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countBoundaryByScanning() const
{
  Integer nb = 0;
  for ( const Point & p : D )
    nb += isBoundary( p ) ? NumberTraits<Integer>::ONE : NumberTraits<Integer>::ZERO;
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countWithinByScanning( Point lo, Point hi ) const
{
  Integer nb = 0;
  Domain D1( lo.sup( D.lowerBound() ), hi.inf( D.upperBound() ) );
  for ( const Point & p : D1 )
    nb += isDomainPointInside( p ) ? NumberTraits<Integer>::ONE : NumberTraits<Integer>::ZERO;
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::
countUpToByScanning( Integer max) const
{
  Integer nb = 0;
  for ( const Point & p : D ) {
    nb += isDomainPointInside( p ) ? NumberTraits<Integer>::ONE : NumberTraits<Integer>::ZERO;
    if ( nb >= max ) return max;
  }
  return nb;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getPointsByScanning( std::vector<Point>& pts ) const
{
  pts.clear();
  for ( const Point & p : D )
    if ( isDomainPointInside( p ) ) pts.push_back( p );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
template <typename PointSet>
void
DGtal::BoundedLatticePolytope<TSpace>::
insertPointsByScanning( PointSet& pts_set ) const
{
  for ( const Point & p : D )
    if ( isDomainPointInside( p ) ) pts_set.insert( p );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getInteriorPointsByScanning( std::vector<Point>& pts ) const
{
  pts.clear();
  for ( const Point & p : D )
    if ( isInterior( p ) ) pts.push_back( p );
}
//-----------------------------------------------------------------------------
template <typename TSpace>
void
DGtal::BoundedLatticePolytope<TSpace>::
getBoundaryPointsByScanning( std::vector<Point>& pts ) const
{
  pts.clear();
  for ( const Point & p : D )
    if ( isBoundary( p ) ) pts.push_back( p );
}

//-----------------------------------------------------------------------------
template <typename TSpace>
const typename DGtal::BoundedLatticePolytope<TSpace>::Domain&
DGtal::BoundedLatticePolytope<TSpace>::getDomain() const
{
  return D;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
unsigned int
DGtal::BoundedLatticePolytope<TSpace>::nbHalfSpaces() const
{
  return A.size();
}

//-----------------------------------------------------------------------------
template <typename TSpace>
const typename DGtal::BoundedLatticePolytope<TSpace>::Vector&
DGtal::BoundedLatticePolytope<TSpace>::getA( unsigned int i ) const
{
  ASSERT( i < nbHalfSpaces() );
  return A[ i ];
}

//-----------------------------------------------------------------------------
template <typename TSpace>
typename DGtal::BoundedLatticePolytope<TSpace>::Integer
DGtal::BoundedLatticePolytope<TSpace>::getB( unsigned int i ) const
{
  ASSERT( i < nbHalfSpaces() );
  return B[ i ];
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::isLarge( unsigned int i ) const
{
  ASSERT( i < nbHalfSpaces() );
  return I[ i ];
}

//-----------------------------------------------------------------------------
template <typename TSpace>
const typename DGtal::BoundedLatticePolytope<TSpace>::InequalityMatrix&
DGtal::BoundedLatticePolytope<TSpace>::getA() const
{
  return A;
}
    
//-----------------------------------------------------------------------------
template <typename TSpace>
const typename DGtal::BoundedLatticePolytope<TSpace>::InequalityVector&
DGtal::BoundedLatticePolytope<TSpace>::getB() const
{
  return B;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
const std::vector<bool>&
DGtal::BoundedLatticePolytope<TSpace>::getI() const
{
  return I;
}

//-----------------------------------------------------------------------------
template <typename TSpace>
bool
DGtal::BoundedLatticePolytope<TSpace>::canBeSummed() const
{
  return myValidEdgeConstraints;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace>
inline
void
DGtal::BoundedLatticePolytope<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[BoundedLatticePolytope<" << Space::dimension << "> A.rows=" << A.size()
      << " valid_edge_constraints=" << myValidEdgeConstraints 
      << "]" << std::endl;
  for ( Dimension i = 0; i < A.size(); ++i )
    {
      out << "  [";
      for ( Dimension j = 0; j < dimension; ++j )
        out << " " << A[ i ][ j ];
      out << " ] . x <= " << B[ i ] << std::endl;
    }
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace>
inline
bool
DGtal::BoundedLatticePolytope<TSpace>::isValid() const
{
  return ! D.isEmpty();
}
//-----------------------------------------------------------------------------
template <typename TSpace>
inline
std::string
DGtal::BoundedLatticePolytope<TSpace>::className
() const
{
  return "BoundedLatticePolytope";
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

//-----------------------------------------------------------------------------
template <typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const BoundedLatticePolytope<TSpace> & object )
{
  object.selfDisplay( out );
  return out;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator* ( typename BoundedLatticePolytope<TSpace>::Integer t, 
                   const BoundedLatticePolytope<TSpace> & P )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q *= t;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::UnitSegment s )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += s;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::UnitCell c )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += c;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::RightStrictUnitSegment s )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += s;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::RightStrictUnitCell c )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += c;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::LeftStrictUnitSegment s )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += s;
  return Q;
}
//-----------------------------------------------------------------------------
template <typename TSpace>
DGtal::BoundedLatticePolytope<TSpace>
DGtal::operator+ ( const BoundedLatticePolytope<TSpace> & P,
                   typename BoundedLatticePolytope<TSpace>::LeftStrictUnitCell c )
{
  BoundedLatticePolytope<TSpace> Q = P;
  Q += c;
  return Q;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
