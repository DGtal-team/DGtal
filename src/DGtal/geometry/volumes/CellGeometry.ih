/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file CellGeometry.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2020/01/02
 *
 * Implementation of inline methods defined in CellGeometry.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <string>
#include <sstream>
#include "DGtal/base/SetFunctions.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::CellGeometry<TKSpace>::
CellGeometry()
  : myK(), myCC( myK ), myMinCellDim( 0 ), myMaxCellDim( KSpace::dimension )
{
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
DGtal::CellGeometry<TKSpace>::
CellGeometry( const KSpace & K,
	      Dimension min_cell_dim, Dimension max_cell_dim, bool verbose )
  : myK( K ), myCC( myK ),
    myMinCellDim( min_cell_dim ), myMaxCellDim( max_cell_dim ),
    myVerbose( verbose )
{
  ASSERT( 0 <= myMinCellDim );
  ASSERT( myMinCellDim <= myMaxCellDim );
  ASSERT( myMaxCellDim <= myK.dimension );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
void
DGtal::CellGeometry<TKSpace>::
init( const KSpace & K,
      Dimension min_cell_dim, Dimension max_cell_dim, bool verbose )
{
  ASSERT( 0 <= myMinCellDim );
  ASSERT( myMinCellDim <= myMaxCellDim );
  ASSERT( myMaxCellDim <= myK.dimension );
  myK = K;
  myCC.clear(); // myCC already references myK
  myMinCellDim = min_cell_dim;
  myMaxCellDim = max_cell_dim;
  myVerbose = verbose;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointIterator>
void
DGtal::CellGeometry<TKSpace>::
addCellsTouchingPoints( PointIterator itB, PointIterator itE )
{
  if ( ( myMinCellDim == 0 ) && ( myMaxCellDim == KSpace::dimension ) ) {
    for ( auto it = itB; it != itE; ++it )
      {
	auto pointel = myK.uPointel( *it );
	auto cofaces = myK.uCoFaces( pointel );
	myCC.insertCell( 0, pointel );
	myCC.insertCells( cofaces.begin(), cofaces.end() );
      }
  } else {
    for ( auto it = itB; it != itE; ++it )
      {
	auto pointel = myK.uPointel( *it );
	auto cofaces = myK.uCoFaces( pointel );
	myCC.insertCell( 0, pointel );
	for ( auto&& f : cofaces ) {
	  Dimension d = myK.uDim( f );
	  if ( ( myMinCellDim <= d ) && ( d <= myMaxCellDim ) )
	    myCC.insertCell( d, f );
	}
      }
  }    
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
template <typename PointelIterator>
void
DGtal::CellGeometry<TKSpace>::
addCellsTouchingPointels( PointelIterator itB, PointelIterator itE )
{
  if ( ( myMinCellDim == 0 ) && ( myMaxCellDim == KSpace::dimension ) ) {
    for ( auto it = itB; it != itE; ++it )
      {
	auto pointel = *it;
	auto cofaces = myK.uCoFaces( pointel );
	myCC.insertCell( 0, pointel );
	myCC.insertCells( cofaces.begin(), cofaces.end() );
      }
  } else {
    for ( auto it = itB; it != itE; ++it )
      {
	auto pointel = *it;
	auto cofaces = myK.uCoFaces( pointel );
	myCC.insertCell( 0, pointel );
	for ( auto&& f : cofaces ) {
	  Dimension d = myK.uDim( f );
	  if ( ( myMinCellDim <= d ) && ( d <= myMaxCellDim ) )
	    myCC.insertCell( d, f );
	}
      }
  }    
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
void
DGtal::CellGeometry<TKSpace>::
addCellsTouchingPolytopePoints( const Polytope& polytope )
{
  std::vector< Point > points;
  polytope.getPoints( points );
  addCellsTouchingPoints( points.begin(), points.end() );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
void
DGtal::CellGeometry<TKSpace>::
addCellsTouchingPolytope( const Polytope& polytope )
{
  std::vector< Point > points;
  for ( Dimension i = myMinCellDim; i <= myMaxCellDim; ++i )
    {
      auto cells = getIntersectedCells( polytope, i );
      myCC.insertCells( i, cells.begin(), cells.end() );
    }
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
typename DGtal::CellGeometry<TKSpace>::Size
DGtal::CellGeometry<TKSpace>::
nbCells( Dimension k ) const
{
  return myCC.nbCells( k );
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
const typename DGtal::CellGeometry<TKSpace>::CubicalComplex&
DGtal::CellGeometry<TKSpace>::
cubicalComplex() const
{
  return myCC;
}


//-----------------------------------------------------------------------------
template <typename TKSpace>
bool 
DGtal::CellGeometry<TKSpace>::
subset( const CellGeometry& other ) const
{
  for ( Dimension k = myMinCellDim; k <= myMaxCellDim; ++k )
    if ( ! subset( other, k ) ) return false;
  return true;
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
bool 
DGtal::CellGeometry<TKSpace>::
subset( const CellGeometry& other, const Dimension k ) const
{
  if ( myMaxCellDim < k ) return true;
  if ( other.myMaxCellDim < k ) return cubicalComplex().nbCells( k ) == 0;
  if ( k < other.myMinCellDim ) return cubicalComplex().nbCells( k ) == 0;
  return functions::isSubset( cubicalComplex().getCells( k ),
			      other.cubicalComplex().getCells( k ) );
}


//-----------------------------------------------------------------------------
template <typename TKSpace>
std::vector< typename DGtal::CellGeometry<TKSpace>::Cell >
DGtal::CellGeometry<TKSpace>::
getIntersectedCells( const Polytope& polytope,
		     const Dimension i ) const
{
  ASSERT( polytope.canBeSummed() );
  if ( ! polytope.canBeSummed() )
    trace.warning() << "[CellGeometryFunctions::getIntersectedCells]"
		    << " Polytope is not valid for Minkowski sums. " << std::endl;
  static const Dimension d = KSpace::dimension;
  std::vector< Cell >      result;
  std::vector< Point >     points;
  std::vector< Polytope  > polytopes( i+1, polytope );
  std::vector< Dimension > extensions( i+1, 0 );
  for ( Dimension k = 1; k < extensions.size(); ++k )
    {
      extensions[ k ] = k - 1;
      polytopes [ k ] = polytopes[ k - 1 ] + typename Polytope::UnitSegment( k - 1 );
    }
  // We have to build several dilated polytopes which corresponds
  // to the binom(d,i) possible cell types.
  while ( true )
    {
      if ( myVerbose )
	{
	  std::string str;
	  std::ostringstream ostr( str );
	  ostr << "Dilating Polytope along directions {";
	  for ( Dimension k = 1; k < extensions.size(); ++k )
	    ostr << " + " << extensions[ k ];
	  ostr << "}" ;
	  trace.info() << ostr.str() << std::endl;
	}
      // Intersected cells are bijective to points in a dilated polytope.
      polytopes.back().getPoints( points );
      // For each point, build its cell and push it into result.
      for ( auto p : points ) {
	auto cell = myK.uPointel( p );
	for ( Dimension k = 1; k < extensions.size(); ++k )
	  cell = myK.uIncident( cell, extensions[ k ], false );
	result.push_back( cell );
      }
      // Go to next type of cell
      Dimension   k    = i;
      extensions[ k ] += 1;
      // will quit when k == 0
      while ( k > 0 && extensions[ k ] >= d+k-i ) extensions[ --k ] += 1;
      if ( k == 0 ) break; // finished
      for ( Dimension l = k + 1; l < extensions.size(); ++l )
	extensions[ l ] = extensions[ l - 1 ] + 1;
      // Recomputes polytopes
      for ( ; k < extensions.size(); ++k )
	polytopes [ k ] = polytopes[ k - 1 ]
	  + typename Polytope::UnitSegment( extensions[ k ] );
    } // while ( true )
  return result;
}

//-----------------------------------------------------------------------------
template <typename TKSpace>
std::vector< typename DGtal::CellGeometry<TKSpace>::Cell >
DGtal::CellGeometry<TKSpace>::
getTouchedCells( const std::vector< Point >& points, const Dimension i ) const
{
  std::unordered_set< Cell > cells;
  if ( i == 0 )
    cells = CellGeometryFunctions< KSpace, 0, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else if ( i == 1 )
    cells = CellGeometryFunctions< KSpace, 1, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else if ( i == 2 )
    cells = CellGeometryFunctions< KSpace, 2, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else if ( i == 3 )
    cells = CellGeometryFunctions< KSpace, 3, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else if ( i == 4 )
    cells = CellGeometryFunctions< KSpace, 4, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else if ( i == 5 )
    cells = CellGeometryFunctions< KSpace, 5, KSpace::dimension>
      ::getIncidentCellsToPoints( myK, points.begin(), points.end() );
  else trace.error() << "[DGtal::CellGeometry<TKSpace>::getTouchedCells]"
		     << " Computation are limited to n-D, n <= 5" << std::endl;
  return std::vector< Cell >( cells.begin(), cells.end() );
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace>
inline
void
DGtal::CellGeometry<TKSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[CellGeometry]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace>
inline
bool
DGtal::CellGeometry<TKSpace>::isValid() const
{
  return true;
}
//-----------------------------------------------------------------------------
template <typename TKSpace>
inline
std::string
DGtal::CellGeometry<TKSpace>::className
() const
{
  return "CellGeometry";
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

//-----------------------------------------------------------------------------
template <typename TKSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const CellGeometry<TKSpace> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
