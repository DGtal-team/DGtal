/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2019/10/25
 *
 * Implementation of inline methods defined in DigitalSurfaceRegularization.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::DigitalSurfaceRegularization<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[DigitalSurfaceRegularization] alpha="<<myAlpha<<" beta="<<myBeta<<" gamma="<<myGamma;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::DigitalSurfaceRegularization<T>::isValid() const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //
///////////////////////////////////////////////////////////////////////////////

template <typename T>
inline
void DGtal::DigitalSurfaceRegularization<T>::init(const double alpha,
                                                  const double beta,
                                                  const double gamma)
{
  myAlpha = alpha;
  myBeta  = beta;
  myGamma = gamma;
  myInit = true;
  
}
///////////////////////////////////////////////////////////////////////////////

template <typename T>
inline
double
DGtal::DigitalSurfaceRegularization<T>::regularize(const unsigned int nbIters,
                                                   const double epsilon)
{
  
}




template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                   const DGtal::DigitalSurfaceRegularization<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


