/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file IntegralInvariantGaussianCurvatureEstimator_0memory.ih
 * @author Jeremy Levallois (\c jeremy.levallois@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systèmes d'information - LIRIS (CNRS, UMR 5205), INSA-Lyon, France
 * LAboratoire de MAthématiques - LAMA (CNRS, UMR 5127), Université de Savoie, France
 *
 * @date 2012/07/10
 *
 * Implementation of inline methods defined in IntegralInvariantGaussianCurvatureEstimator_0memory.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
inline
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::IntegralInvariantGaussianCurvatureEstimator_0memory ( const KSpace & space, const ShapeCellFunctor & shapeFunctor )
    : myKernelFunctor( NumberTraits< Quantity >::ONE ),
      myConvolver( shapeFunctor, myKernelFunctor, space )
{}

template< typename TKSpace, typename TShapeFunctor >
inline
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::IntegralInvariantGaussianCurvatureEstimator_0memory ( const KSpace & space, const ShapeCellFunctor & shapeFunctor )
    : myKernelFunctor( NumberTraits< Quantity >::ONE ),
      myConvolver( shapeFunctor, myKernelFunctor, space )
{}

template< typename TKSpace, typename TShapeFunctor >
inline
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::IntegralInvariantGaussianCurvatureEstimator_0memory ( const KSpace & space, const ShapeCellFunctor & shapeFunctor )
    : myKernelFunctor( NumberTraits< Quantity >::ONE),
      myConvolver( shapeFunctor, myKernelFunctor, space )
{}






template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::init ( const double _h, const double re )
{
    trace.error() << "Not available yet.";
}

template< typename TKSpace, typename TShapeFunctor >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::init ( const double _h, const double re )
{
    h = _h;
    radius = re;

    gaussFunctor.init( h, radius );

    RealPoint rOrigin = RealPoint ( 0.0, 0.0 );
    Domain::Point pOrigin = Domain::Point( 0, 0 );
    kernel = new KernelSupport( rOrigin, radius );
    digKernel = new DigitalShapeKernel();
    digKernel->attach( *kernel );
    digKernel->init( kernel->getLowerBound(), kernel->getUpperBound(), RealPoint( h, h ) );

    kernels = std::vector< PairIterators > ( 9 );
    kernelsSet = std::vector< DigitalSet* >( 9 );

    /// Computation of shifting masks
    for( int y = -1; y <= 1; ++y )
    {
        for( int x = -1; x <= 1; ++x )
        {
            unsigned int offset = ( x + 1 ) + (( y + 1 ) * 3 );

            if( offset == 4 ) // Full kernel, already done
            {
                continue;
            }
            else
            {
                RealPoint shiftPoint = rOrigin + RealPoint( x * h , y * h );
                KernelSupport * kernelShifted = new KernelSupport( shiftPoint, radius );

                EuclideanMinus * current = new EuclideanMinus( *kernel, *kernelShifted );
                DigitalShape digCurrent;
                digCurrent.attach( *current );
                digCurrent.init( kernel->getLowerBound(), kernel->getUpperBound(), h );

                kernelsSet[ offset ] = new DigitalSet( digCurrent.getDomain() );
                Shapes< Domain>::digitalShaper ( *(kernelsSet[ offset ]), digCurrent );

                kernels[ offset ].first = kernelsSet[ offset ]->begin();
                kernels[ offset ].second = kernelsSet[ offset ]->end();

                delete current;
                delete kernelShifted;
            }
        }
    }
    /// End of computation of masks

    myConvolver.init( pOrigin, digKernel, kernels );
}

template< typename TKSpace, typename TShapeFunctor >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::init ( const double _h, const double re )
{
    h = _h;
    radius = re;

    gaussFunctor.init( h, radius );

    RealPoint rOrigin = RealPoint ( 0.0, 0.0, 0.0 );
    Domain::Point pOrigin = Domain::Point( 0, 0, 0 );
    kernel = new KernelSupport( rOrigin, radius );
    digKernel = new DigitalShapeKernel();
    digKernel->attach( *kernel );
    digKernel->init( kernel->getLowerBound(), kernel->getUpperBound(), h );

    kernels = std::vector< PairIterators >( 27 );
    kernelsSet = std::vector< DigitalSet* >( 27 );

    /// Computation of masks
    for( int z = -1; z <= 1; ++z )
    {
        for( int y = -1; y <= 1; ++y )
        {
            for( int x = -1; x <= 1; ++x )
            {
                unsigned int offset = ( x + 1 ) + (( y + 1 ) * 3 ) + (( z + 1 ) * 9 );

                if( offset == 13 ) // Full kernel
                {
                    continue;
                }
                else
                {
                    RealPoint shiftPoint = rOrigin + RealPoint( x * h, y * h, z * h );
                    KernelSupport * kernelShifted = new KernelSupport( shiftPoint, radius );

                    EuclideanMinus * current = new EuclideanMinus( *kernel, *kernelShifted );
                    DigitalShape digCurrent;
                    digCurrent.attach( *current );
                    digCurrent.init( kernel->getLowerBound(), kernel->getUpperBound(), h );

                    kernelsSet[ offset ] = new DigitalSet( digCurrent.getDomain() );
                    Shapes< Domain>::digitalShaper ( *(kernelsSet[ offset ]), digCurrent );

                    kernels[ offset ].first = kernelsSet[ offset ]->begin();
                    kernels[ offset ].second = kernelsSet[ offset ]->end();

                    delete current;
                    delete kernelShifted;
                }
            }
        }
    }
    /// End of computation of masks

    myConvolver.init( pOrigin, digKernel, kernels );
}






template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
template< typename ConstIteratorOnCells >
inline
typename DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::Quantity
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::eval ( const ConstIteratorOnCells & it )
{
    Quantity measure( 0 );
    trace.error() << "IntegralInvariantGaussianCurvatureEstimator_0memory@eval() : Not available yet.";
    return measure;
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells >
inline
typename DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::Quantity
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::eval ( const ConstIteratorOnCells & it )
{
    Quantity measure = ( Quantity )myConvolver.eval( it );
    return gaussFunctor( measure );
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells >
inline
typename DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::Quantity
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::eval ( const ConstIteratorOnCells & it )
{
    Matrix3x3 covarianceMatrix = myConvolver.evalCovarianceMatrix( it );
    return gaussFunctor( covarianceMatrix );
}


template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename Shape >
inline
typename DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::Quantity
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::eval ( const ConstIteratorOnCells & it,
                                                                                        const Shape & shape )
{
    Quantity measure = ( Quantity )myConvolver.eval( it, shape, h );
    return gaussFunctor( measure );
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename Shape >
inline
typename DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::Quantity
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::eval ( const ConstIteratorOnCells & it,
                                                                                        const Shape & shape )
{
    Matrix3x3 covarianceMatrix = myConvolver.evalCovarianceMatrix( it, shape, h );
    return gaussFunctor( covarianceMatrix );
}




template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
template< typename ConstIteratorOnCells, typename OutputIterator >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::eval ( const ConstIteratorOnCells & itb,
                                                                                                const ConstIteratorOnCells & ite,
                                                                                                OutputIterator & result )
{
    trace.error() << "IntegralInvariantGaussianCurvatureEstimator_0memory@eval() : Not available yet.";
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename OutputIterator >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::eval ( const ConstIteratorOnCells & itb,
                                                                                        const ConstIteratorOnCells & ite,
                                                                                        OutputIterator & result )
{
    myConvolver.eval( itb, ite, result, gaussFunctor );

    /*std::vector< Quantity > quantities;
    std::back_insert_iterator< std::vector< Quantity > > quantitiesIterator( quantities );
    myConvolver.eval ( itb, ite, filename );

    Quantity measure;

    std::ifstream input( filename.c_str() );
    ASSERT( input.is_open() );

    std::ofstream result( file.c_str() );
    ASSERT( result.is_open() );

    std::string line;

    DGtal::Dimension qsize = quantities.size();
    for( DGtal::Dimension i = 0; i < qsize; ++i )
    {
        std::getline( input, line );

        string2Quantity( line, measure );
        measure *= dh2;
        result << d3_r * ( dPI_2 - d1_r2 * measure );
        result << '\n';
    }

    result.close();
    input.close();*/
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename OutputIterator >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::eval ( const ConstIteratorOnCells & itb,
                                                                                        const ConstIteratorOnCells & ite,
                                                                                        OutputIterator & result )
{
    myConvolver.evalCovarianceMatrix( itb, ite, result, gaussFunctor );

    /*Quantity k1,k2;

    std::vector< Matrix3x3 > vCovarianceMatrix;
    std::back_insert_iterator< std::vector< Matrix3x3 > > coMatrixIterator( vCovarianceMatrix );
    myConvolver.evalCovarianceMatrix( itb, ite, filename );

    Matrix3x3 currentMatrix;

    std::ifstream input( filename.c_str() );
    ASSERT( input.is_open() );

    std::ofstream result( file.c_str() );
    ASSERT( result.is_open() );

    std::string line;

    DGtal::Dimension cmsize = vCovarianceMatrix.size();
    for( DGtal::Dimension i = 0; i < cmsize; ++i )
    {
        std::getline( input, line );

        string2Matrix3x3( line, currentMatrix );
        currentMatrix *= dh5;

        evalk1k2( currentMatrix, k1, k2 );

        result << k1 * k2;
        result << '\n';
    }

    result.close();
    input.close();*/
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename OutputIterator >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::evalPrincipalCurvatures
( const ConstIteratorOnCells & itb,
  const ConstIteratorOnCells & ite,
  OutputIterator & result )
{
    myConvolver.evalPrincipalCurvatures( itb, ite, result, gaussFunctor );
}

template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename OutputIterator, typename Shape >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::eval ( const ConstIteratorOnCells & itb,
                                                                                        const ConstIteratorOnCells & ite,
                                                                                        OutputIterator & result,
                                                                                        const Shape & shape )
{
    myConvolver.evalCovarianceMatrix( itb, ite, result, shape, h, gaussFunctor );

    /*std::vector< Quantity > quantities;
    std::back_insert_iterator< std::vector< Quantity > > quantitiesIterator( quantities );
    myConvolver.eval ( itb, ite, filename, shape, h );

    Quantity measure;

    std::ifstream input( filename.c_str() );
    ASSERT( input.is_open() );

    std::ofstream result( file.c_str() );
    ASSERT( result.is_open() );

    std::string line;

    DGtal::Dimension qsize = quantities.size();
    for( DGtal::Dimension i = 0; i < qsize; ++i )
    {
        std::getline( input, line );

        string2Quantity( line, measure );
        measure *= dh2;
        result << d3_r * ( dPI_2 - d1_r2 * measure );
        result << '\n';
    }

    result.close();
    input.close();*/
}


template< typename TKSpace, typename TShapeFunctor >
template< typename ConstIteratorOnCells, typename OutputIterator, typename Shape >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::eval ( const ConstIteratorOnCells & itb,
                                                                                        const ConstIteratorOnCells & ite,
                                                                                        OutputIterator & result,
                                                                                        const Shape & shape )
{
    myConvolver.evalCovarianceMatrix( itb, ite, result, shape, h, gaussFunctor );

    /*Quantity k1,k2;

    std::vector< Matrix3x3 > vCovarianceMatrix;
    std::back_insert_iterator< std::vector< Matrix3x3 > > coMatrixIterator( vCovarianceMatrix );
    myConvolver.evalCovarianceMatrix( itb, ite, filename, shape, h );

    Matrix3x3 currentMatrix;

    std::ifstream input( filename.c_str() );
    ASSERT( input.is_open() );

    std::ofstream result( file.c_str() );
    ASSERT( result.is_open() );

    std::string line;

    DGtal::Dimension cmsize = vCovarianceMatrix.size();
    for( DGtal::Dimension i = 0; i < cmsize; ++i )
    {
        std::getline( input, line );

        string2Matrix3x3( line, currentMatrix );
        currentMatrix *= dh5;

        evalk1k2( currentMatrix, k1, k2 );

        result << k1 * k2;
        result << '\n';
    }

    result.close();
    input.close();*/
}


template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::selfDisplay( std::ostream & out ) const
{
    out << "[IntegralInvariantGaussianCurvatureEstimator_0memory]";
}

template< typename TKSpace, typename TShapeFunctor >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::selfDisplay( std::ostream & out ) const
{
    out << "[IntegralInvariantGaussianCurvatureEstimator_0memory]";
}

template< typename TKSpace, typename TShapeFunctor >
inline
void
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::selfDisplay( std::ostream & out ) const
{
    out << "[IntegralInvariantGaussianCurvatureEstimator_0memory]";
}






template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
inline
bool
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension >::isValid() const
{
    return true;
}

template< typename TKSpace, typename TShapeFunctor >
inline
bool
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 >::isValid() const
{
    return true;
}

template< typename TKSpace, typename TShapeFunctor >
inline
bool
DGtal::IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 >::isValid() const
{
    return true;
}






template< typename TKSpace, typename TShapeFunctor, DGtal::Dimension dimension >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, const IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, dimension > & object )
{
    object.selfDisplay( out );
    return out;
}

template< typename TKSpace, typename TShapeFunctor >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, const IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 2 > & object )
{
    object.selfDisplay( out );
    return out;
}

template< typename TKSpace, typename TShapeFunctor >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, const IntegralInvariantGaussianCurvatureEstimator_0memory< TKSpace, TShapeFunctor, 3 > & object )
{
    object.selfDisplay( out );
    return out;
}
