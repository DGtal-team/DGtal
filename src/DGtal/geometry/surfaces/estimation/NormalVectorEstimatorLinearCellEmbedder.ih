/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file NormalVectorEstimatorLinearCellEmbedder.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/02/14
 *
 * Implementation of inline methods defined in NormalVectorEstimatorLinearCellEmbedder.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template < typename TKSpace, typename TNormalEstimator, typename TEmbedder >
inline
DGtal::NormalVectorEstimatorLinearCellEmbedder<TKSpace, TNormalEstimator, TEmbedder>::
~NormalVectorEstimatorLinearCellEmbedder()
{}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
NormalVectorEstimatorLinearCellEmbedder( ConstAlias<DigitalSurface> aSurface, 
                                         ConstAlias<NormalVectorEstimator> anEstim, 
                                         ConstAlias<Embedder> aEmb )
  : mySurface(aSurface ), 
    myPtrFct( anEstim ), 
    myPtrEmbedder( aEmb )
{}
//-----------------------------------------------------------------------------
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
typename DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::RealPoint
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
embed( const Point & p ) const
{
  //ASSERT( myPtrEmbedder.isValid()  );
  return myPtrEmbedder.embed( p );
}
//-----------------------------------------------------------------------------
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
typename DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::RealPoint
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
embedSurfel( const ConstIterator & surfelIt ) const
{
  ASSERT( this->isValid() );

  // embed first the spel related to the cell.
  Point p1( mySurface.container().space().sCoords( *surfelIt ) );
  RealPoint x1( embed( p1 ) );
  return x1;
}

//-----------------------------------------------------------------------------
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
void
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
embedSurfel( const ConstIterator & surfelIt , RealPoint &p, RealVector &v) const
{
  ASSERT( this->isValid() );
  ASSERT( myPtrFct.isValid() );
  // embed first the spel related to the cell.
  p = embedSurfel( surfelIt );
  v  = myPtrFct.eval(surfelIt);
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
void
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
selfDisplay ( std::ostream & out ) const
{
  out << "[NormalVectorEstimatorLinearCellEmbedder]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
bool
DGtal::NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder>::
isValid() const
{
  return ( mySurface.isValid() ) && ( myPtrFct.isValid() ); 
  //&& ( myPtrEmbedder.isValid() );
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template < typename TDigitalSurface, typename TNormalEstimator, typename TEmbedder >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
                    const NormalVectorEstimatorLinearCellEmbedder<TDigitalSurface, TNormalEstimator, TEmbedder> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


