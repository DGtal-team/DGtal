/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file
 * @author Jocelyn Meyron (\c jocelyn.meyron@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2020/12/07
 *
 * Implementation of inline methods defined in PlaneProbingDigitalSurfaceLocalEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
PlaneProbingDigitalSurfaceLocalEstimator ()
{
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
PlaneProbingDigitalSurfaceLocalEstimator (ConstAlias<Surface> aSurface)
    : mySurface(aSurface), myPredicate(mySurface), myPreEstimationEstimator(mySurface)
{
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
PlaneProbingDigitalSurfaceLocalEstimator(ProbingFactory const& aProbingFactory,
                                         std::unordered_map<Surfel, RealPoint> const& aPreEstimations,
                                         bool aVerbose)
    : myProbingFactory(aProbingFactory), myPreEstimations(aPreEstimations), myVerbose(aVerbose)
{
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
PlaneProbingDigitalSurfaceLocalEstimator(ConstAlias<Surface> aSurface,
                                         ProbingFactory const& aProbingFactory,
                                         std::unordered_map<Surfel, RealPoint> const& aPreEstimations,
                                         bool aVerbose)
    : mySurface(aSurface), myPredicate(mySurface), myPreEstimationEstimator(mySurface),
      myProbingFactory(aProbingFactory), myPreEstimations(aPreEstimations), myVerbose(aVerbose)
{
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
~PlaneProbingDigitalSurfaceLocalEstimator ()
{
    myProbingAlgorithm = nullptr;
}

// ----------------- model of CSurfelLocalEstimator -----------------------

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
template < typename SurfelConstIterator >
inline
void DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
init (Scalar const& h, SurfelConstIterator /* itb */, SurfelConstIterator /* ite */)
{
    myH = h;
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
template < typename SurfelConstIterator >
inline
typename DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::Quantity
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
eval (SurfelConstIterator it)
{
    ASSERT(mySurface != nullptr);
    ASSERT(myProbingFactory);

    // If no pre-estimation is given, we make one using maximal segments
    RealPoint preEstimation = getPreEstimation(it);

    // Compute an initial frame from the surfel
    Surfel s = *it;
    ProbingFrame initialFrame = probingFrameFromSurfel(s);
    // Compute a frame from the initial one using the pre-estimation
    std::pair<bool, ProbingFrame> res =
      probingFrameWithPreEstimation(initialFrame, preEstimation);

    if (res.first) {
      //If we have found a frame, we initialize the plane-probing algorithm
      myProbingAlgorithm = myProbingFactory(res.second, myPredicate);

      // We use slightly different versions depending on the number of zeros
      // in the pre-estimation vector.
      const auto zeros = findZeros(preEstimation);

      Point normal;
      if (zeros.size() == 0)
	{
	  normal = myProbingAlgorithm->compute();
	}
      else if (zeros.size() == 1)
	{
	  int index = zeros[0];
	  normal = myProbingAlgorithm->compute(getProbingRaysOneFlatDirection(index));
	}
      else if (zeros.size() == 2)
	{
	  normal = res.second.normal;
	}

      delete myProbingAlgorithm;
      myProbingAlgorithm = nullptr;

      return normal;
      
    } else {
      // If we have found no way to properly initialize the plane-probing estimator,
      // we return the initial frame normal, i.e. the trivial normal of the surfel.  
      return initialFrame.normal;
    }
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
template < typename SurfelConstIterator, typename OutputIterator >
inline
OutputIterator
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
eval (SurfelConstIterator itb, SurfelConstIterator ite, OutputIterator out)
{
    for (auto it = itb; it != ite; ++it)
    {
        *out++ = eval(it);
    }

    return out;
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
typename DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::Scalar
inline
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
h () const
{
    return myH;
}

// --------------- model of CDigitalSurfaceLocalEstimator ------------------

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
void DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
attach (ConstAlias<Surface> aSurface)
{
    mySurface = aSurface;
    myPredicate = Predicate(mySurface);
    myPreEstimationEstimator = PreEstimation(mySurface);
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
void DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
setParams (ProbingFactory const& aProbingFactory,
           std::unordered_map<Surfel, RealPoint> const& aPreEstimations,
           bool aVerbose)
{
    myProbingFactory = aProbingFactory;
    myPreEstimations = aPreEstimations;
    myVerbose = aVerbose;
}

// ------------------------- Internals ------------------------------------

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
typename DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::ProbingFrame
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
probingFrameFromSurfel (Surfel const& aSurfel) const
{
    ASSERT(mySurface != nullptr);

    KSpace const& K = mySurface->container().space();

    typename KSpace::DirIterator q1 = K.sDirs(aSurfel), q2 = q1;
    ++q2;

    // Incident linels
    Cell surfel = K.unsigns(aSurfel);
    Cell linel1 = K.uIncident(surfel, *q1, false),
         linel2 = K.uIncident(surfel, *q2, false);
    Cell p1_1 = K.uIncident(linel1, *q2, false), p1_2 = K.uIncident(linel1, *q2, true),
         p2_1 = K.uIncident(linel2, *q1, false), p2_2 = K.uIncident(linel2, *q1, true);

    ASSERT(p1_1 == p2_1);

    Point myP  = K.uCoords(p1_1),
          myB1 = K.uCoords(p2_2) - myP,
          myB2 = K.uCoords(p1_2) - myP;

    // Make the normal consistent with the exterior normal
    Point n = myB1.crossProduct(myB2);

    typename KSpace::DirIterator orth = K.sOrthDirs(aSurfel);
    SCell voxel_direct   = K.sDirectIncident(aSurfel, *orth),
          voxel_indirect = K.sIndirectIncident(aSurfel, *orth);
    Point n_interior = K.sCoords(voxel_direct) - K.sCoords(voxel_indirect); // oriented towards the interior (direct) side

    if (n.dot(n_interior) > 0) {
        myP += myB2;
        myB2 = -myB2;
    }

    Point myNormal = myB1.crossProduct(myB2);
    ASSERT(myNormal.dot(n_interior) < 0);

    return { myP, myB1, myB2, myNormal };
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
std::pair<bool, typename DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::ProbingFrame >
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
probingFrameWithPreEstimation (ProbingFrame const& aInitialFrame, RealPoint const& aPreEstimation) const
{
    ProbingFrame frame = aInitialFrame;

    for (int i = 0; i < 4; ++i)
    {
        Point shift = frame.shift();
	// We search for a frame whose shift point is outside...
        if (! myPredicate(frame.p + shift))
        {
	    //... and that matches the pre-estimation
            int signs = 0;
            signs += int(signComponent(shift[0]) == signComponent(aPreEstimation[0]));
            signs += int(signComponent(shift[1]) == signComponent(aPreEstimation[1]));
            signs += int(signComponent(shift[2]) == signComponent(aPreEstimation[2]));

            if (signs == 3)
            {
	        return std::make_pair(true, frame);
            }
        }

        frame = frame.rotatedCopy();
    }

    // No frame that matches the pre-estimation found,
    return std::make_pair(false, aInitialFrame); 
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
void
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::selfDisplay ( std::ostream & out ) const
{
  out << "[PlaneProbingDigitalSurfaceLocalEstimator]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename TSurface, typename TInternalProbingAlgorithm >
inline
bool
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::isValid() const
{
    return true;
}

// ------------------------------------------------------------------------
template < typename TSurface, typename TInternalProbingAlgorithm >
template < typename SurfelConstIterator >
typename DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::RealPoint
DGtal::PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm>::
getPreEstimation (SurfelConstIterator it) const
{
    Surfel const& s = *it;

    if (myPreEstimations.count(s))
    {
        return myPreEstimations.at(s);
    }
    else
    {
        RealPoint preEstimation = myPreEstimationEstimator.eval(it);
        myPreEstimations[s] = preEstimation; // cache the value for future calls
        return preEstimation;
    }
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template < typename TSurface, typename TInternalProbingAlgorithm >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const PlaneProbingDigitalSurfaceLocalEstimator<TSurface, TInternalProbingAlgorithm> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


