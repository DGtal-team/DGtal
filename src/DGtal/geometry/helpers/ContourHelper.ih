/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ContourHelper.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/05/02
 *
 * Implementation of inline methods defined in ContourHelper.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/geometry/curves/FreemanChain.h"
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //



template <typename TPoint>
inline
DGtal::PointVector<TPoint::dimension, double>
DGtal::ContourHelper::getBarycenter(const std::vector<TPoint> & aSet)
{
  DGtal::PointVector<TPoint::dimension, double> ptMean;
  for(unsigned int i =0; i<aSet.size(); i++)
    {
      for(typename TPoint::Dimension j=0; j < TPoint::dimension; j++)
        {
          ptMean[j] +=  static_cast<double>(aSet.at(i)[j]);
        }
    }
  for(unsigned int j=0; j < TPoint::dimension; j++)
    {
      ptMean[j] /= aSet.size();
    }
  return ptMean;
}






template <typename TIterator, typename TOutputIterator>
inline
void
DGtal::ContourHelper::pixels2pixels8C(const TIterator &itb, const TIterator &ite,
                                      TOutputIterator out)
{
  TIterator it = itb;
  *out++ = *it;
  auto size = std::distance(itb, ite);
  decltype(size) i = 0;
  while(i+2<size)
    {

      short code = FreemanChain<int>::freemanCode4C((*(it+1))[0]-(*it)[0],(*(it+1))[1]-(*it)[1]);
      short codeNext = FreemanChain<int>::freemanCode4C((*(it+2))[0]-(*(it+1))[0],(*(it+2))[1]-(*(it+1))[1]);
      if((code != 8 && codeNext != 8) &&  (((4+(int)codeNext-(int)code)%4)==1 || ((4+(int)codeNext-(int)code)%4)==3))
        {
          it++;
          i++;
        }
      it++;
      *out++ = *it;
      i++;
    }
}




template <typename TPoint>
inline
bool
DGtal::ContourHelper::isCounterClockWise(const std::vector<TPoint> & aCurve)
{
  double sum=0.0;
  TPoint p0 = *(aCurve.begin());
  typename std::vector<TPoint>::const_iterator itContour = aCurve.begin();
  itContour++;
  TPoint p=*itContour;
  itContour++;
  for( ; itContour!=aCurve.end(); itContour++)
    {
      TPoint pSuiv = *itContour;
      typename TPoint::Coordinate v1x = p[0] - p0[0];
      typename TPoint::Coordinate v1y = p[1] - p0[1];
      typename TPoint::Coordinate v2x = pSuiv[0] - p[0];
      typename TPoint::Coordinate v2y = pSuiv[1] - p[1];
      sum+=(v1x*v2y)-(v2x*v1y);
      p=pSuiv;
    }
  return (sum>0.0);
}





///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ContourHelper'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ContourHelper' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const ContourHelper & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
