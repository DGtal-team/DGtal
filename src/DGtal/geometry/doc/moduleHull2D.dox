/**
 * @file moduleHull2D.dox
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/12/19
 *
 * Documentation file for feature moduleHull2D
 *
 * This file is part of the DGtal library.
 */

/*
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page moduleHull2D Convex hull and alpha-shape in the plane
@writers Tristan Roussillon, Bertrand Kerautret
[TOC]

In this part of the manual, we describe how to compute 
well-known geometric structures such as the convex hull 
or the alpha-shape of a 2D point set.  The proposed 
implementations provide exact results as long as the underlying
geometric predicates are robust (see @ref moduleGeometricPredicates 
for more details about geometric predicates).

Related examples are exampleConvexHull2D.cpp and exampleAlphaShape.cpp. 

\section sectmoduleHull2D1 Convex hull

Let us recall that a polygon is a weakly externally visible polygon (WEVP)
 if for every point on it, there exists an infinite half-line beginning at 
this point, which does not intersect the polygon at anywhere else. 

The two basic procedures functions::Hull2D::buildHullWithStack
(the object having a stack interface is passed by reference) 
and functions::Hull2D::buildHullWithAdaptedStack (the object having a stack 
interface is passed by copy) retrieve the extremal vertices of a WEVP 
in linear-time. This is an implementation of a well-known method, 
called Sklansky's scan, Graham's scan or 3-coins algorithm, 
which has been proven to correctly retrieve the convex hull
of any WEVP [Toussaint and Avis, 1982: \cite ToussaintAvis1982].  

Three convex hull algorithms use this basic procedure:  
- functions::Hull2D::andrewConvexHullAlgorithm [Andrew, 1979: \cite Andrew1979]
- functions::Hull2D::grahamConvexHullAlgorithm [Graham, 1972: \cite Graham1972]
- functions::Hull2D::melkmanConvexHullAlgorithm [Melkman, 1987: \cite Melkman1987]

Before calling these algoritms, you must use the functions::Hull2D namespace
defined in the file Hull2DHelpers.h. 
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Include
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Namespace

Moreover, you need to create an orientation functor...   
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Functor
... and, if required, a predicate
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-StrictPredicateCCW

See @ref moduleGeometricPredicates for more details about geometric predicates. 

@note The above functor returns: 
- 0 for aligned points
- a strictly positive value for counter-clockwise oriented points
- a strictly negative value for clockwise oriented points

@note In this example, the predicate is an object that adapts the functor in 
order to return 'true' for striclty positive values. The last two template 
arguments means that neither the strictly negative values, nor the null values 
are accepted. 

\subsection subsectmoduleHull2D11 Andrew's algorithm

The more versatile algorithm is Andrew's one [Andrew, 1979: \cite Andrew1979],
 also known to be the monotone-chain algorithm. First, points are sorted along 
the horizontal axis. Then, the lower and upper convex hulls are computed by a 
simple Graham scan from left to right and from right to left. The resulting 
algorithm is correct because sorting points by increasing x-coordinates (and
increasing y-coordinates for a same x-coordinate) produces a WEVP. 
The overall time complexity is \f$ O(n\log{(n)}) \f$ for a 2D point set of size \f$ n \f$. 
 
@image html AndrewWEVP.png "Sorting step of Andrew's algorithm produces a WEVP"
@image latex AndrewWEVP.png "Sorting step of Andrew's algorithm produces a WEVP" width=5cm
Note that the starting point is depicted in red and that the arrows show the point order. 

In order to retrieve the extremal points of a range of points, 
you may call the procedure andrewConvexHullAlgorithm as follows:  
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-AndrewAlgo
Note that in this example the extremal points are pushed to a back insertion sequence called 'res'.

@image html ConvexHullCCW.png "Convex hull of the digitization of a disk"
@image latex ConvexHullCCW.png "Convex hull of the digitization of a disk" width=5cm

You can however change the predicate to accept aligned points and therefore all
points lying on the boundary of the convex hull.  
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-LargePredicateCCW

@image html ConvexHullCCWWithPointsOnEdges.png "All points lying on the boundary of the convex hull of the digitization of a disk"
@image latex ConvexHullCCWWithPointsOnEdges.png "All points lying on the boundary of the convex hull of the digitization of a disk" width=5cm

You can also change the predicate so that the resulting list of vertices
is clockwise-oriented. 
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-StrictPredicateCW

@image html ConvexHullCW.png "Clockwise-oriented list of extremal points of the digitization of a disk"
@image latex ConvexHullCW.png "Clockwise-oriented list of extremal points of the digitization of a disk" width=5cm


\subsection subsectmoduleHull2D12 Graham's algorithm

Graham's algorithm is another well-known algorithm to compute the convex hull of 
a 2D point set of size \f$ n \f$ in \f$ O(n\log{(n)}) \f$ [Graham, 1972: \cite Graham1972]. 
The method can be coarsely described as follows: 
- choose a pole and sort the points by increasing angle about the pole
- apply a simple Graham's scan on the sorted list of points. 

We have chosen the point of maximal x-coordinate (and maximal y-coordinate) to be the pole. 
Hence, the algorithm is correct since sorting the points by increasing angle about 
such a pole produces again a WEVP. 
 
@image html GrahamWEVP.png "Sorting step of Graham's algorithm produces a WEVP"
@image latex GrahamWEVP.png "Sorting step of Graham's algorithm produces a WEVP" width=5cm

The main advantage of Graham's algorithm over Andrew's one is that only one scan is required 
instead of two to retrieve the whole convex hull. 

You may call the procedure grahamConvexHullAlgorithm as follows:  
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-GrahamAlgo

@warning You must choose a predicate returning 'true' for counter-clockwise oriented 3-point sets, 
because the sorting step is done with a counter-clockwise orientation.  

\subsection subsectmoduleHull2D13 Melkman's algorithm

The two previous algorithms are off-line and compute the convex hull of any set
of \f$ n \f$ 2D points in \f$ O(n\log{(n)}) \f$.  
Melkman's algorithm is on-line and computes the convex hull of a simple polygonal line, 
ie. without self-intersection, in linear-time (amortized constant time per update). 

Note that Graham's scan, used by the two previous algorithms, runs in linear-time 
on weakly externally visible polygons, which is a subset of simple polygonal lines.
As a consequence, Graham's scan may fail for simple polygonal lines that are not 
weakly externally visible.    

In exampleConvexHull2D.cpp, you may find a minimal example: 

@image html SimplePolygonalLine.png "A simple polygonal line that is not weakly externally visible"
@image latex SimplePolygonalLine.png "A simple polygonal line that is not weakly externally visible" width=5cm

On such example, Graham's scan fails because the polygonal line is not weakly externally visible. 
However, Melkman's algorithm produces the right output: 

@image html SimplePolygonalLineMelkman.png "Output for Melkman's algorithm "
@image latex SimplePolygonalLineMelkman.png "Output for Melkman's algorithm " width=5cm

Melkman's algorithm works fine because it is based on a double ended queue and it  
assumes that the input points form a simple polygonal line. Due to this assumption, 
any new point cannot be located in the cone formed by the first and last edge of the 
current convex hull (in red in the figure below). As a consequence, it is enough to 
update the convex hull by a Graham's scan from the front and/or from the back of the 
deque and it is never required to remove/insert points in the middle of the deque.  
 
@image html MelkmanHowTo.png "Consequence of the no self-intersection hypothesis"
@image latex MelkmanHowTo.png "Consequence of the no self-intersection hypothesis" width=5cm

You may use MelkmanConvexHull class as follows: 
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-OnLineMelkmanAlgo

The class MelkmanConvexHull provides an on-line way of computing the convex hull of a 
sequence of points, which form a simple polygonal line: each time a point is added, 
the current convex hull is updated accordingly. However, if you are not interested in 
the on-line feature, you may call the off-line procedure melkmanConvexHullAlgorithm as follows:  
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-OffLineMelkmanAlgo

@warning The behavior is undefined if the input points do not form a simple polygonal line. 

\subsubsection subsectmoduleHull2D131 Constructing a Melkman convex hull from both sides.

If you want to construction a convex hull by considering the front and
back of a contour you will need to use the @ref MelkmanConvexHull::reverse() method. For
instance, to recover the convex hull of the point P0 of the following
figure, you will need to do as follows:

 
@code
typedef InHalfPlaneBySimple3x3Matrix<Z2i::RealPoint, double> Functor;
typedef MelkmanConvexHull<Z2i::RealPoint, Functor> MelkmanCV;
MelkmanCV ch;
ch.add(P0);
ch.add(P1);
ch.add(P2);
ch.reverse();
ch.add(P3);
ch.reverse();
ch.add(P4);
ch.reverse();
ch.add(P5);
ch.reverse();
ch.add(P6);
@endcode

Such sequence will produce the correct result given on the image (2) of the following figure.

@image html convexHullReverse.png "Illustration of the convex hull result starting from the point P0 and adding alternately the points Pi. (1) shows wrong convex hull obtained without the convex hull reverse, (2) is the correct convex hull obtained by using the reverse() method after each addition of points."
@image latex convexHullReverse.png "Illustration of the convex hull result starting from the point P0 and adding alternately the points Pi. (1) shows wrong convex hull obtained without the convex hull reverse, (2) is the correct convex hull obtained by using the reverse() method after each addition of points" width=5cm



\subsection subsectmoduleHull2D14 Convex hull thickness

From a convex hull it can be useful to compute its associated
thickness. We propose the implementation of the well known rotating
caliper algorithm allowing to compute all the antipodal pairs in
linear time [Shamos , 1978: \cite Shamos1978]. 

Two definitions of thickness can be computed from an iterator on the
convex hull. The first one is the vertical/horizontal thickness
obtained by projection on the main x-y axis from antipodal pairs. The
second one is given from the normal projection on the edge of the same
antipodal pairs. The two definitions are illustrated on the following figures:


@image html exampleConvexHullHV.png  "Example of the definitiion of horizontal/vertical thickness defined from the convex hull antipodal pair ((P,Q), S)."
@image latex MelkmanHowTo.png "Example of the definitiion of horizontal/vertical thickness defined from the convex hull antipodal pair ((P,Q), S)."

@image html exampleConvexHullEucl.png  "Example of the definitiion of Euclidean thickness defined from the convex hull antipodal pair ((P,Q), S)."
@image latex MelkmanHowTo.png "Example of the definitiion of horizontal/vertical thickness defined from the convex hull antipodal pair ((P,Q), S)"


To compute the thickness of a convex hull you have simply to call the computeHullThickness procedure:

@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Caliper-computeBasic


To recover the antipodal pairs for which the thickness is minimal you
can also use the same method with an antipodal pair:

@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Caliper-computeAnti

And display the result:
@snippet geometry/tools/exampleConvexHull2D.cpp Hull2D-Caliper-display


By using the sequence of points of the first example, you will obtain a thickness of 12 with the following antipodal pair:


@image html ConvexHullCCWAntiPodal.png  "Example of antipodal pair obtained from the computation of the horizontal/vertical thickness. The edge (P, Q) of the antipodal pair is represented in blue and its vertex R  is given in red."
@image latex ConvexHullCCWAntiPodal.png "Example of antipodal pair obtained from the computation of the horizontal/vertical thickness. The edge (P, Q) of the antipodal pair is represented in blue and its vertex R  is given in red."


@warning The convex hull should be oriented in counter clockwise else it will return wrong result.











\section sectmoduleHull2D2 Alpha-shape

The alpha-shape of a finite set of points has been introduced in 
[Edelsbrunner et. al., 1983: \cite Edelsbrunner1983]. This geometric
structure is based on the following concept of generalized disk.  
For an arbitrary real \f$ \alpha \f$, a @e generalized @e disk of radius \f$ 1/\alpha \f$
is defined as 
- a disk of radius \f$ 1/\alpha \f$ if \f$ \alpha > 0 \f$
- a complement of the disk of radius \f$ -1/\alpha \f$ if \f$ \alpha < 0 \f$
- a half-plane if \f$ \alpha = 0 \f$

We also define the @e direct (resp. @e indirect) generalized disk of radius \f$ 1/\alpha \f$ passing by
two points \f$ P \f$ and \f$ Q \f$ as the unique generalized disk of radius \f$ 1/\alpha \f$ 
with \f$ P, Q \f$ on its boundary and such that \f$ P, Q \f$ and its center are counter-clockwise 
oriented (resp. clockwise oriented).

The @e \f$\alpha\f$-hull of a point set is the intersection of all closed generalized disks
of radius \f$ 1/\alpha \f$ that contains the point set. 
A point \f$ P \f$ of this point set is @a \f$\alpha\f$-extreme if there exists a closed 
generalized disk of radius \f$ 1/\alpha \f$ such that \f$ P \f$ lies on its boundary 
and which contains all the other points.  
The @e \f$\alpha\f$-shape is the straight-line graph whose vertices are the 
\f$\alpha\f$-extreme points and whose edges connect any two \f$\alpha\f$-extreme points 
such that there exists a closed generalized disk of radius \f$ 1/\alpha \f$ with both
points on its boundary and which contains all the other points.  

Any \f$\alpha\f$-shape of a set of points is a subgraph of either the closest point or the farthest point
Delaunay triangulation. Moreover, the set of \f$\alpha_1\f$-extreme points is a subset of the set of 
\f$\alpha_2\f$-extreme points if \f$\alpha_1 \geq \alpha_2 \f$.   

Various \f$\alpha\f$-shapes of the digitization of a disk
 are depicted below for \f$ \alpha \in \{ -1, -1/\sqrt{5}, -1/5, 0, 1/9, 1/8  \} \f$. 

@image html AlphaShapeM1.png " alpha = -1 (8-connected boundary)"
@image latex AlphaShapeM1.png " alpha = -1 (8-connected boundary) " width=5cm

@image html AlphaShapeMSqrt5.png " alpha = -0.4472 "
@image latex AlphaShapeMSqrt5.png " alpha = -0.4472 " width=5cm

@image html AlphaShapeM5.png " alpha = -0.2 (points lying on the boundary of the convex hull)"
@image latex AlphaShapeM5.png " alpha = -0.2 (points lying on the boundary of the convex hull)" width=5cm

@image html AlphaShape0.png " alpha = 0 (convex hull)"
@image latex AlphaShape0.png " alpha = 0 (convex hull)" width=5cm

@image html AlphaShapeP9.png " alpha = 0.1111 "
@image latex AlphaShapeP9.png " alpha = 0.1111 " width=5cm

@image html AlphaShapeP8.png " alpha = 0.125 (points lying on the smallest enclosing circle)"
@image latex AlphaShapeP8.png " alpha = 0.125 (points lying on the smallest enclosing circle)" width=5cm

You may observe that: 
- if \f$ \alpha = -1 \f$, we retrieve the 8-connected boundary
- if \f$ \alpha = -\epsilon \f$ for an arbitrary small \f$ \epsilon \f$, we retrieve
all the points lying on the boundary of the convex hull
- if \f$ \alpha = 0 \f$, we retrieve the convex hull vertices. 
- if the radius of the smallest enclosing circle is denoted by \f$ R_{min} \f$, 
we retrieve all the points lying on the smallest enclosing circle
if \f$ \alpha = 1/R_{min}-\epsilon \f$ for an arbitrary small \f$ \epsilon \f$. 

Even if the convex hull of a set of points is its \f$0\f$-shape, 
the following properties are not true for general \f$\alpha\f$-shapes, 
\f$ \alpha \neq 0 \f$: 
- The \f$\alpha\f$-shape of 3 points always exists and is always connected, 
- For any 3-point set \f$ P, Q, R \f$ in the plane,   
if \f$ R \f$ belongs to the direct generalized disk of radius \f$ 1/\alpha \f$ passing by \f$ P \f$ and \f$ Q \f$
then \f$ P \f$ belongs to the direct generalized disk of radius \f$ 1/\alpha \f$ passing by \f$ Q \f$ and \f$ R \f$
and \f$ Q \f$ belongs to the direct generalized disk of radius \f$ 1/\alpha \f$ passing by \f$ R \f$ and \f$ P \f$. 

As a consequence, the current implementation cannot compute the alpha-shape of an arbitrary set of points.
Such an algorithm would have required to compute the closest point and farthest point Delaunay triangulation. 
Though, we provide procedures, based on the 3-coins algorithm, which compute in linear-time the alpha-shape 
of specific polygons, for which the two above properties remain true: 
closedGrahamScanFromVertex (the starting point is expected to be extremal) 
and closedGrahamScanFromAnyPoint (no assumption about the starting point is required). 

This class of polygons is the set of simple polygons such that: 
- The distance between any two consecutive vertices is smaller than \f$ 2/\alpha \f$ if 
\f$ \alpha > 0 \f$ or greater than \f$ -2/\alpha \f$ if \f$ \alpha < 0 \f$. 
This guarantees that the \f$\alpha\f$-shape of three consecutive vertices always exists 
(if \f$ \alpha > 0 \f$) and is always connected (if \f$ \alpha < 0 \f$). 
- For every set of three consecutive vertices \f$ P, Q, R \f$ of the polygon, 
\f$ PR \f$ is the longest side of the triangle \f$ P, Q, R \f$. 

Let us consider a connected and convex digital object such that its 4-connected (resp. 8-connected) 
boundary is simply 4-connected (resp. 8-connected). It is clear that its 4-connected (resp. 8-connected) 
boundary belongs to the above class of polygons provided that \f$ -1 \leq \alpha < 1/R_{min} \f$
(resp. \f$ -\sqrt{2}/2 \leq \alpha < 1/R_{min} \f$). We can therefore compute any alpha-shape
of the digitization of a compact and convex set by a linear-time scan of the points of its boundary. 

In such cases, you can perform the computation in two steps. 
First, you must define a predicate from an instance of InGeneralizedDiskOfGivenRadius as follows: 
@snippet geometry/tools/exampleAlphaShape.cpp Hull2D-RadiusPredicateInf

Then, you can call the procedure closedGrahamScanFromAnyPoint as follows: 
@snippet geometry/tools/exampleAlphaShape.cpp Hull2D-ClosedGrahamScan

In order to create an instance of InGeneralizedDiskOfGivenRadius, you must provide the value of \f$ 1/\alpha \f$ by three arguments: 
- a boolean to set the sign of \f$ \alpha \f$ ('true' if \f$ \alpha \geq 0 \f$, 'false' if \f$ \alpha < 0 \f$),
- the squared numerator of \f$ 1/\alpha \f$ 
- the squared denominator of \f$ 1/\alpha \f$. As shown above, \f$ \alpha = 0 \f$ if this third argument is zero.  

For example, the following line set \f$ \alpha \f$ to \f$ 1/9 \f$.
@snippet geometry/tools/exampleAlphaShape.cpp Hull2D-RadiusPredicateP9
  
The above illustrations are generated by the program written in exampleAlphaShape.cpp. 
*/

/**
Computation of the convex hull of a planar point set by different algorithms: 
- functions::Hull2D::andrewConvexHullAlgorithm \cite Andrew1979
- functions::Hull2D::grahamConvexHullAlgorithm \cite Graham1972
- functions::Hull2D::melkmanConvexHullAlgorithm \cite Melkman1987

@see \ref moduleHull2D


\example geometry/tools/exampleConvexHull2D.cpp
*/

/**
Computation of the alpha shape of the border of a digital shape. 

@see \ref moduleHull2D


\example geometry/tools/exampleAlphaShape.cpp
*/


}
