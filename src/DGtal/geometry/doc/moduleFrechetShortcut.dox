/**
 * @file moduleFrechetShortcut.dox
 * @author Isabelle Sivignon (\c isabelle.sivignon@gipsa-lab.grenoble-inp.fr )
 * gipsa-lab Grenoble Images Parole Signal Automatique (CNRS, UMR 5216), CNRS, France
 *
 * @date 2012/11/15
 *
 * Documentation file for feature moduleFrechetShortcut
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page moduleFrechetShortcut Fréchet Shortcuts 
@writers Isabelle Sivignon

[TOC]

\section FS_sectOverview Overview


The algorithm implemented in the class FrechetShortcut is the one
presented in the article @cite sivignon2011.  
We present here the basic ideas of the algorithm and at the end, give
pointers to the relative structures used in the implementation.    

Given a polygonal curve, the curve simplification problem consists in
computing another polygonal curve that (i) approximates the original
curve, (ii) satisfies a given error criterion, (iii) with as few
vertices as possible. This problem arises in a wide range of
applications, such as geographic information systems (GIS), computer
graphics or computer vision, where the management of the level of
details is of crucial importance to save memory space or to speed-up
analysis algorithms. 

Given a 4- or 8-connected digital curve and a maximum error, we propose an algorithm that
computes a simplification of the curve (a polygonal curve) such that the Fréchet distance
between the original and the simplified curve is less than the
error. The Fréchet distance is known to nicely measure the similarity
between two curves. It can be intuitively defined considering a man
walking his dog. Each protagonist walks along a path, and controls its
speed independently, but cannot go backwards. The Fréchet distance
between the two pathes is the minimal length of the leash required. 
 
The algorithm implemented uses an approximation of the Fréchet distance,
but a guarantee over the quality of the simplification is
proved. Moreover, even if the theoretical complexity of the algorithm is
in O(n log(n)), experiments show a linear behaviour in practice. 

\subsection subsectFrechet Fréchet distance

Given two curves @f$ f @f$ and @f$ g @f$ specified by functions @f$ f:[0,1] \rightarrow
\mathbb{R}^2  @f$ and  @f$g:[0,1] \rightarrow \mathbb{R}^2 @f$, and two       
non-decreasing continuous functions @f$ \alpha:[0,1] \rightarrow [0,1] @f$ and 
@f$ \beta:[0,1] \rightarrow [0,1] @f$ with
@f$ \alpha(0)=0,\alpha(1)=1,\beta(0)=0,\beta(1)=1 @f$, the **Fréchet distance**
@f$ \delta_F(f,g) @f$ between two curves f and g is defined as 

@f$ \delta_F(f,g)=\inf_{\alpha,\beta} \max_{0\leq t \leq 1}
d(f(\alpha(t)),g(\beta(t))) @f$

As illustrated in the figure below, contrary to the Hausdorff distance
denoted by @f$ \delta_H(f,g) @f$,
the Fréchet distance takes into account the course of the curves. 


@image html hausdorff.png "Difference between the Fréchet distance and the Hausdorff distance" 
@image latex hausdorff.png "Difference between the Fréchet distance and the Hausdorff distance" width=5cm


\subsection subsectCurve Curve simplification problem 

Given a polygonal curve @f$ P=\langle p_1,\dots p_n\rangle @f$, A curve
@f$ P'=\langle p_{i_1},\dots p_{i_k}\rangle @f$  with @f$ 1=i_1 < \dots < i_k=n @f$
is said to @b simplify the curve @f$ P @f$. @f$ P(i,j) @f$ denotes the subpath
from @f$ p_i @f$ to @f$ p_j @f$. 

Given a pair of indices @f$ 1 \leq i \leq j
\leq n @f$, @f$ \delta_F(p_ip_j,P) @f$ denotes the Fréchet
distance between the segment
@f$ p_ip_j @f$ and the
part @f$ P(i,j) @f$ of the curve. For the sake of clarity, the simplified notation
@f$ error(i,j) =  \delta_F(p_ip_j,P) @f$ will sometimes be used. We also
say that @f$ p_ip_j @f$ is a @b shortcut.  

In other words, the vertices of @f$ P' @f$ form a subset
of the vertices of @f$ P @f$, and the computation of @f$ P' @f$ comes down to the
selection of "shortcuts" @f$ p_ip_j @f$. 

@image html curve_simplification.png "The red curve P' is a simplification of the blue curve P" 
@image latex curve_simplification.png "The red curve P' is a simplification of the blue curve P" width=5cm


All in all, to <b>find @f$ P' @f$ an @f$ \varepsilon @f$-simplification of</b> @f$ P @f$ we
have to:

-# <b>Find shortcuts @f$ p_ip_j @f$ such that @f$ error(i,j) = \delta_F(p_ip_j,P) \leq \varepsilon @f$</b>
-# <b>Minimize the number of vertices of @f$ P' @f$</b>.
   

The following nice local property of the Fréchet distance proved in
@cite DBLP:journals/algorithmica/AgarwalHMW05 will be very useful to
prove a guarantee on the quality of the result produced by our
algorithm (see illustration below): 

Let @f$ P=\{p_1, p_2, \dots , p_n\} @f$ be a polygonal curve. \\ For all @f$ i, j, l, r, 1 \leq i\leq l \leq r \leq j \leq
n @f$, @f$ error(l,r) \leq 2 error(i,j) @f$. 

In other words, the shortcuts of any @f$ \frac{\varepsilon}{2} @f$-simplification cannot strictly enclose the
shortcuts of a @f$ \varepsilon @f$-simplification.  

@image html local.png "Illustration of the local property." 
@image latex local.png "Illustration of the local property." width=5cm


\section FS_sectAlgo Guaranteed algorithm using an approximated distance 

\subsection FS_subsectDef Definitions and overall algorithm

Using the exact Fréchet distance appears to be too expensive to design an
efficient algorithm. Instead, we use an approximation of the
Fréchet distance proposed in @cite Abam1247103. More precisely, they show that
@f$error(i,j)@f$ can be upper and lower bounded by functions of two values
namely @f$\omega(i,j)@f$ and @f$b(i,j)@f$. @f$\omega(i,j)@f$ is the width of the points of
@f$P(i,j)@f$ in the direction @f$\overrightarrow{p_ip_j}@f$. @f$b(i,j)@f$ is the length of the
longest backpath in the direction @f$\overrightarrow{p_ip_j}@f$. 


@image html def_width_backpath.png "Illustration of the definition of the width and the backpath length."
@image latex def_width_backpath.png "Illustration of the definition of the width and the backpath length."

@image html def_width_backpath_2.png "When a new point is considered, the width and backpath lengths may totally change."
@image latex def_width_backpath_2.png "When a new point is considered, the width and backpath lengths may totally change."

We have the following property from @cite Abam1247103 : 

The Fréchet error of a shortcut @f$p_ip_j@f$ satisfies:

@image html approx_distance.png ""
@image latex approx_distance.png ""

Using this Fréchet distance approximation to greedily compute a shortcut requires a fast update of the quantities 
@f$\omega(i,j)@f$ and @f$b(i,j)@f$ when a new point is taken into account. This is not an easy task since these values can change drastically as illustrated above.  

\subsection subsectWidth Updating the width efficiently

Instead of updating @f$\omega(i,j)@f$, it is enough to consider the maximal
distance between any point of @f$P(i,j)@f$ and the vector
@f$\overrightarrow{p_ip_j}@f$. This is done using the algorithm of Chan
and Chin @cite Chan687965 illustrated below: 

Given an origin point @f$p_i"@f$ and a set of points @f$P(i,j)@f$ we 
construct the set @f$S_{ij}@f$ of straight lines @f$l@f$ going through @f$p_i@f$ such that @f$\max_{p \in P(i,j)}d(p,l) \leq r@f$. As a
result, deciding whether @f$d_{max}(i,j)@f$ is lower than @f$r@f$ or not is equivalent to checking whether the straight line @f$(p_i,p_j)@f$ belongs to 
@f$S_{ij}@f$ or not.  

All in all, the update of the cone and the decision are both done in
constant time. 

@image html update_width.png "The cone (dark gray) is computed incrementally as the intersection of the light gray cones."
@image latex update_width.png "The cone (dark gray) is computed incrementally as the intersection of the light gray cones."


\subsection subsectBackpath Updating the backpath length efficiently

This update is trickier. When a new point @f$p_{j+1}@f$ is considered, we want to
ckeck if there exists a backpath longer than a threshold in the direction
@f$\overrightarrow{p_ip_j}@f$. 
Let us first give some definitions: 

@image html definition1.png ""
@image latex definition1.png ""


To do so, we consider a set of points named
*occulters* which are the furthest points for a given direction:  

@image html definition_occulter.png ""
@image latex definition_occulter.png ""


We can prove easily (see @cite sivignon2011) that the
origin of the longest backpath is an occulter.

@image html occulters.png "Occulters for the direction @e d in red. Green arrows represent backpathes: the length of the plain arrows is to be checked, whereas we know that the backpathes represented by dashed arrows are not the longest ones."
@image latex occulters.png "Occulters for the direction @e d in red. Green arrows represent backpathes: the length of the plain arrows is to be checked, whereas we know that the backpathes represented by dashed arrows are not the longest ones."


Considering whether the last movement @f$\overrightarrow{p_jp_{j+1}}@f$ is forward or backward in the direction @f$\overrightarrow{p_ip_j}@f$, we can decide if there is a new backpath possibly
longer than the threshold or not. This is done according to Algorithm 2
below. 

@image html algo2.png ""
@image latex algo2.png ""


According to Algorithm 1 we see that Algorithm 2 must be applied for any
possible direction for a given curve @f$P@f$, which is computationally
expensive. However, the computation of backpathes can be mutualized in
the case of digital curves. Indeed for a digital curve, the set of
elementary shifts @f$\overrightarrow{p_jp_{j+1}}@f$ is well defined and it is actually possible to
cluster the set of directions such that given an elementary shift @f$e@f$,
this shift is either forward (positive) or backward (negative) for all the directions of the
cluster. 


@image html clusters.png "Left: The directions of the plane are clustered into 8 octants. For instance, direction
@e d is in octant 0. Right: Illustration of the positive (or forward) elementary shifts for each octant."
@image latex clusters.png "Left: The directions of the plane are clustered into 8 octants. For instance, direction @e d is in octant 0. Right: Illustration of the positive (or forward) elementary shifts for each octant."


If we now go back to Algorithm 2, we see that the result of the test lines 2-3 is
the same for all the directions of a given octant. This test can thus be
done jointly for all the directions of an octant.  
 Nevertheless, to
determine if a new point @f$p_k@f$ is the new active occulter (the furthest 
point for the direction studied), the projection of the current active
occulter and the point @f$p_k@f$ on a direction are compared: the furthest  
of the two points is the active occulter. There, for any two points
@f$p_k@f$ and @f$q@f$ the result of this
comparison is not the same for 
all the directions of a given octant. This fact is illustrated in the
figures below for the octant @f$0@f$: 

* for any point @f$q@f$
  in the grey area, and for any direction in octant 
  @f$0@f$, @f$q@f$ is after @f$p@f$. 

* for any point @f$q@f$
  in the dashed area, and for any direction in octant 
  @f$0@f$, @f$p@f$ is after @f$q@f$. 

* in the white area, the order changes, as illustrated below. 
  
@image html zones.png ""
@image latex zones.png ""

@image html ordre_projections.png "For two points @e p and @e q and a direction @e &alpha;: on  the left, @e q is @e after @e p, and is the active occulter for direction @e &alpha;, whereas on the right, @e p is after @e q and is the active occulter."
@image latex ordre_projections.png "For two points @e p and @e q and a direction @e &alpha;: on  the left, @e q is @e after @e p, and is the active occulter for direction @e &alpha;, whereas on the right, @e p is after @e q and is the active occulter."

Algorithm 3 below puts together these observations to update the list of
active occulters for one octant. 

@image html algo3.png ""
@image latex algo3.png ""




\subsection subsectDirections Memorizing the directions for which there exists a too long backpath

From Algorithm 1, we see that the length of the
longest backpath is tested for each new point, which defines a new
direction. Moreover, we see from Algorithm 2 line
6 that for each negative shift, we can have as many backpathes as
active occulters. All in all, testing individually all the possible
backpathes when a new point is added is too expensive. 
To solve this problem, we propose to maintain a ``set'' of the directions
for which there exists a backpath of length greater than the error
@f$\varepsilon@f$. 

This set actually consists in a list of intervals: for a given backpath
of length *l* and a given error @f$\varepsilon@f$, the interval of
directions for which the projection of the backpath is longer than
@f$\varepsilon@f$ is computed easily. The union of all these intervals is
stored.  


\section sectQuality Quality of the result and complexity analysis

\subsection subsectGuarantee A guaranteed algorithm

An important issue when designing an algorithm that is known not to be
optimal is to prove that the result of this algorithm is not so
far from the optimal. 
In this work, the optimal solution is to compute the
@f$\varepsilon@f$-simplification of a digital curve P according to the
Fréchet distance with a minimum number of vertices. 
The algorithm we propose here is not optimal for
two reasons:

* it is greedy: the simplification is computed from a given starting
  point, in a given scanning order.

* the distance used is an approximation of the Fréchet distance. 

However, we prove that the number of vertices of the simplified curve
computed by our algorithm is upper bounded by a function of the optimal
solution: 

@image html lemma3.png ""
@image latex lemma3.png ""

For more details about this proof, please refer to @cite sivignon2011.

\subsection subsectComplexity Complexity

The theoretical complexity of this algorithm is
@f$\mathcal{O}(n\log(n_i))@f$, for a digital curve of @f$n@f$ points.
@f$n_i@f$ is the number of intervals used to store the directions for which
there exist a backpath of length greater than the error.  @f$n_i@f$ is upper
bounded by @f$n@f$. Nevertheless, experiments on noisy shapes show that the
general behaviour of the algorithm in linear in time. 


\section FS_sectImplementation Implementation in DGtal


In DGtal, the FrechetShortcut should be used with a Curve object, using its PointsRange, as in the example below: 
   
@snippet geometry/curves/exampleFrechetShortcut.cpp FrechetShortcutUsage


The function FrechetShortcut::extendFront() is called when a new point is added to the current shortcut. It calls FrechetShortcut::updateWidth() and FrechetShortcut::updateBackpath(). 

The function FrechetShortcut::updateWidth() implements the update of the width @f$\omega(i,j)@f$ and uses the subclass 
FrechetShortcut::Cone for the cone definition and manipulation.  

The length of the longest backpath is managed in the function FrechetShortcut::updateBackpath(). It updates a vector of $8$ backpaths, one per each octant. The subclass FrechetShortcut::Backpath contains all the necessary structures
- FrechetShortcut::Backpath::myQuad is the octant number
- FrechetShortcut::Backpath::myOcculters is the list of occulters
- FrechetShortcut::Backpath::addPositivePoint() is called when the next elementary move is forward for the octant
- FrechetShortcut::Backpath::addNegativePoint() is called when the next elementary move is backward for the octant: it implements Algorithm 2 and calls updateOcculters()
- FrechetShortcut::Backpath::updateOcculters() implements Algorithm 3
- the list of interval used to memorize the directions for which there exist a too long backpath is implemented through FrechetShortcut::Backpath::myForbiddenIntervals using the Boost Interval Container Library (http://www.boost.org/doc/libs/1_52_0/libs/icl). It is updated with the function FrechetShortcut::Backpath::updateIntervals().

An output using the Board mecanism is provided (see example above to output an eps file).

*/


/**
   This snippet segments a digital curve into Frechet shortcuts.  

@see \ref moduleFrechetShortcut and \ref moduleGridCurveAnalysis

\example geometry/curves/exampleFrechetShortcut.cpp
*/

}
