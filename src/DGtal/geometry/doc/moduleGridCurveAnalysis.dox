/**
 * @file moduleGridCurveAnalysis.dox
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/03/28
 * 
 * Documentation file for GridCurve analysis module
 *
 * This file is part of the DGtal library.
 */
namespace DGtal {

//----------------------------------------
/*!


@page moduleGridCurveAnalysis Analysis of one-dimensional discrete structures
@authors Tristan Roussillon

@date 2011/08/31


 This part of the manual describes how to extract 
patterns from one-dimensional discrete structures
(basically digital curves).

[TOC]

 \section geometryIntro One-dimensional discrete structures

The goal is to provide tools that help in analysing any one-dimensional 
discrete structures in a generic framework. These structures are assumed 
to be constant, not mutable. This is a (not exhaustive) 
list of such structures used in digital geometry: 

- digital curves
    - 2d, 3d, nd
    - 4-connected, 8-connected, disconnected
    - interpixels, pixels
    - open, closed

- chaincodes

\subsection geometryBasicConcepts Iterators/Circulators and Ranges.


Since these structures are one-dimensional and discrete, 
they can be viewed as a locally ordered set of elements, like a string of pearls. 
Two notions are thus important: 
the one of <em>element</em> and the one of <em>local order</em>, which means 
that all the elements (except maybe at the ends) have a previous and next element.  
The concept of <em>iterator</em> is heavily used in our framework because it 
encompasses these two notions at the same time: like a pointer, 
it provides a way of moving along the structure (operator++, operator--) 
and provides a way of getting the elements (operator*).   

In the following, iterators are assumed to be constant (because the structures
are assumed to be constant) and to be at least bidirectionnal (ie. they are
either bidirectionnal iterators or random access iterators). You can read 
the STL documentation about iterators: http://www.sgi.com/tech/stl/Iterators.html
to learn more about the different kind of iterators. 

The notion of <em>reachability</em> is very important. An iterator j is reachable from an iterator i
if and only if i can be made equal to j with finitely many applications of the operator++.
If j is reachable from i, one can iterate over the <em>range</em> of elements 
bounded by i and j, from the one pointed to by i and up to but not including 
the one pointed to by j. Such a range is valid and is denoted by [i,j). 

Let i and j be two iterators that point to two elements of a same structure. 
For open (or linear) structures, [i,j) is not always a valid range (ie. j is not always
reachable from i) because if j has not been reached and if i points to the last element,
 one application of the operator++ makes i to be equal to the <em>past-the-end</em> value, 
ie. an iterator value that points past the last element (just as a regular pointer to an 
array guarantees that there is a pointer value pointing past the last element of the array). 
If i turns out to be equal to the past-the-end value, then j cannot be reached from i.  
If an iterator denoted by begin points to the first element of a given structure and 
an iterator denoted by end is the past-the-end value, iterating over the range [begin,end)
 is a way of iterating over all the elements of the underlying structure. If the underlying
 structure is empty, it only has a past-the-end value. As a consequence, a range [i, i) 
denotes an empty range.    
A range of a linear structure is illustrated below (normal values are depicted with 
a small straight segment, whereas the past-the-end value is depicted with a cross).
In this example, [i,j) is not a valid range because j cannot be reached from i
and the whole range may be denoted by [begin,end). 

 @image html linearRange.png  "Linear range"
 @image latex linearRange.png  "Linear range"


However, for closed (or circular) structures, [i,j) should always be a valid range 
(ie. j should always be reachable from i) and there should be no past-the-end value.
As a consequence, iterating over all the elements or dealing with empty ranges is 
different. The chosen solution is the same as the one used in 
<a href="http://www.cgal.org/Manual/3.3/doc_html/cgal_manual/Circulator/Chapter_main.html">CGAL</a>.
Circular iterators (or <em>circulators</em> for short) are used instead of classic iterators. 
They behave like classic iterators but they have a specific state in the empty range case. 
As long as i != j, the range [i,j) behaves like a classic iterator range 
and could be used in STL algorithms. The range [i,i) is used to iterate over
 all the elements in DGtal algorithms (each element is visited only once). 
Such a range is however considered as empty in STL algorithms. 
A range of a circular structure is illustrated below. In this example, [i,j) is a valid range.  

 @image html circularRange.png  "Circular range"
 @image latex circularRange.png  "Circular range"


Either an iterator or a circulator may have a reverse counterpart, ie. 
an adaptor that enables a backward scanning. The operator++ of the adaptor 
calls the operator-- of the underlying (circular)iterator and conversely. 
You can use the STL reverse iterator for that:
http://www.sgi.com/tech/stl/ReverseIterator.html 


\subsection geometryGridCurve GridCurve and FreemanChain.

Two objects are provided in DGtal to deal with digital curves:
GridCurve and FreemanChain.  
 
GridCurve describes, in a cellular space of dimension n, 
a closed or open sequence of signed d-cells (or d-scells), 
d being either equal to 1 or (n-1). 

For instance, the topological boundary of a simply connected 
digital set is a closed sequence of 1-scells in 2d. 

It stores a list of d-scells,
 but provides many ranges to iterate over different kinds of elements:  

- SCellsRange to iterate over the d-scells
- PointsRange to iterate over the digital coordinates of the 0-scells
that are directly incident to the d-scells
- MidPointsRange to iterate over the real coordinates of the d-scells
- ArrowsRange to iterate over the arrows coding the 1-scells.
Note that an arrow is a pair point-vector:
the point codes the digital coordinates of the 1-scell, 
the vector gives the topology and sign of the 1-scell. 
- InnerPointsRange to iterate over the digital coordinates of the n-scells
that are @e directly incident to the (n-1)-scells.  
- OuterPointsRange to iterate over the digital coordinates of the n-scells
that are @e indirectly incident to the (n-1)-scells.
- IncidentPointsRange to iterate over the pairs of inner and outer points
(defined as above)
- CodesRange to iterate over the codes {0,1,2,3} of the 1-scells 
(only available if n = 2)


You can get an access to these eight ranges through the following methods: 

- getSCellsRange()
- getPointsRange()
- getMidPointsRange()
- getArrowsRange()
- getInnerPointsRange()
- getOuterPointsRange()
- getIncidentPointsRange()
- getCodesRange()


The different ranges for a grid curve whose chain code is 1110002223333
are depicted below. 

 @image html 1cellsRange.png  "Range of 1-cells"
 @image latex 1cellsRange.png  "Range of 1-cells"
 @image html PointsRange.png  "Points of integer coordinates associated to 0-cells"
 @image latex PointsRange.png  "Points of integer coordinates associated to 0-cells"
 @image html MidPointsRange.png  "Points of half-integer coordinates accociated to 1-cells"
 @image latex MidPointsRange.png  "Points of half-integer coordinates accociated to 1-cells"
 @image html InnerPointsRange.png "Points of integer coordinates associated to the 2-cells directly incident to the 1-cells"
 @image latex InnerPointsRange.png "Points of integer coordinates associated to the 2-cells directly incident to the 1-cells"
 @image html OuterPointsRange.png "Points of integer coordinates associated to the 2-cells indirectly incident to the 1-cells"
 @image latex OuterPointsRange.png "Points of integer coordinates associated to the 2-cells indirectly incident to the 1-cells"
 @image html IncidentPointsRange.png "Points of integer coordinates associated to the 2-cells incident to the 1-cells"
 @image latex IncidentPointsRange.png "Points of integer coordinates associated to the 2-cells incident to the 1-cells"

 

FreemanChain is a 2-dimensional and 4-connected digital curve
stored as a string of codes {0,1,2,3} as follows: 

- 0 for a horizontal step to the right 
- 1 for a vertical step to the up
- 2 for a horizontal step to the left
- 3 for a vertical step to the bottom

As GridCurve, it provides a CodesRange. 

Each range has the following inner types: 

- ConstIterator
- ConstReverseIterator
- ConstCirculator
- ConstReverseCirculator


And each range provides these (circular)iterator services: 

- begin() : begin ConstIterator
- end() : end ConstIterator
- rbegin() : begin ConstReverseIterator
- rend() : end ConstReverseIterator
- c() : ConstCirculator
- rc() : ConstReverseCirculator


You can use these services to iterate over the elements of a given range
as follows:
 
@snippet geometry/curves/exampleGridCurve2d.cpp GridCurveRangeIterators

Since GridCurve and FreemanChain have both a method isClosed(), 
you can decide to use a classic iterator or a circulator at 
running time as follows: 

 @code 
    //c is a grid curve, r is an instance of Range
    //doSomething is a template function where 
    //the range r is processed through (circular)iterators
    if ( c.isClosed() )
      doSomething( r.c(), r.c() ); 
    else
      doSomething( r.begin(), r.end() ); 
 @endcode





 \section geometrySegments Segments and on-line detection of segments. 


In this section, we focus on parts of one-dimensional structures, 
called <em>segment</em>.
More precisely, a segment is a valid and not empty range. 

The concept CSegment refines boost::DefaultConstructible, 
boost::CopyConstructible, boost::Assignable, boost::EqualityComparable, 
and the one of constant range. 
It thus have the following inner types: 

 - ConstIterator : a model of bidirectional iterator

and the following methods: 

 - begin() : begin iterator

 - end() : end iterator

Note that since a segment is a not empty range, 
we have the following invariant: 
begin() != end(). 


A class of segments @f$ \Sigma_P @f$ is a set of segments 
such that for each segment of the set, 
a given predicate P is true: 
@f$ \forall s \in \Sigma_P @f$,  P(s) = true.

Segment computers are segments that can 
1. construct instances of their own type (or derived type)
2. check whether a predicate (possibly not explicit) is true or not

CSegmentFactory is a refinement of CSegment and should define in addition 
the following nested types:

 - Self (its own type)

 - Reverse (like Self but based on reverse iterators) 

Reverse is a type that behaves like Self but based on 
std::reverse_iterator<ConstIterator> instead of ConstIterator. 
Moreover, in order to build an instance of Self (resp. Reverse) from 
a segment computer, the following methods should be defined:   

 - Self getSelf() : returns an instance of Self

 - Reverse getReverse() : returns an instance of Reverse

The returned objects may not be full copies of this, 
may not have the same internal state as this, but 
must be constructed from the same input parameters
so that they can detect segments of the same class. 

These methods are useful in segmentation algorithms when 
new segment computers must be created. An independant factory 
is not required since a segment computer is a factory 
for instances of its own type.  

A segment computer is not a single concept, 
but actually several concepts that form a hierarchy. 
The five concepts that are used in segmentation algorithms are 
CIncrementalSegmentComputer, CForwardSegmentComputer, CBidirectionalSegmentComputer, 
CDynamicSegmentComputer and CDynamicBidirectionalSegmentComputer. 

@dot
digraph SegmentComputerHierarchy   {
  rankdir=BT;
  
  subgraph cluster_concepts_1 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
               
    CSegment [ URL="\ref CSegment" ];
    CBidirectionalSegmentComputer  [ URL="\ref CBidirectionalSegmentComputer" ];
    CIncrementalSegmentComputer [ URL="\ref CIncrementalSegmentComputer" ];
    CForwardSegmentComputer [ URL="\ref CForwardSegmentComputer" ];
    CSegmentFactory [ URL="\ref CSegmentFactory" ];
    CDynamicBidirectionalSegmentComputer [ URL="\ref CDynamicBidirectionalSegmentComputer" ];
    CDynamicSegmentComputer [ URL="\ref CDynamicSegmentComputer" ];

    CBidirectionalSegmentComputer -> CForwardSegmentComputer -> CIncrementalSegmentComputer -> CSegmentFactory -> CSegment; 
    CDynamicSegmentComputer-> CForwardSegmentComputer ;
    CDynamicBidirectionalSegmentComputer->          CDynamicSegmentComputer  ;

    CDynamicBidirectionalSegmentComputer->          CBidirectionalSegmentComputer;

    label="geometry/curves (main concepts)";
  }
 
 }
@enddot


Incremental segment computers provides a way of @a incrementally detecting 
a segment belonging to a known class, ie. checking if P is true. 

Note that the incremental constraint implies a constraint on P:
for each iterator it from begin() to end(), P must be true for 
the range [begin(), it), so that a incremental segment computer 
can be initialized at a starting element and then can be extended 
forward to the neighbor elements while P remains true. 
  
CIncrementalSegmentComputer is a refinement of CSegmentFactory and should provide
in addition the following methods: 

 - void init ( const Iterator& it ) : set the segment to the element pointed to by it.

 - bool extendForward () : return 'true' and extend the segment to the element pointed to by end() if it is possible, return 'false' and does not extend the segment otherwise. 

 - bool isExtendableForward () : return 'true' if the segment can be extended to the element pointed to by end() and 'false' otherwise (no extension is performed).

Detecting a segment in a range looks like this: 

 @code 
    //s is a segment computer
    //[begin,end) is a range
		s.init( begin );
    while ( (s.end() != end) && (s.extendForward()) ) {} 
 @endcode

If the underlying structure is closed, 
infinite loops are avoided as follows: 
 
 @code 
    //s is a segment computer
    //c is a circulator
		s.init( c );
    while ( (s.end() != s.begin()) && (s.extendForward()) ) {} 
 @endcode
 
Like any model of CIncrementalSegmentComputer, a model of 
CForwardSegmentComputer can control its own extension 
so that P remains true. However, contrary to models 
of CIncrementalSegmentComputer, it garantees that 
for each iterator it from begin() to end(), P must be true for 
the range [it, end()). This last constraint, together with 
the previous contraint on the range [begin(), it), implies 
that P is true for any subrange. 
This property is necessary to be able to incrementally check
 whether a segment is maximal (not included in a greater segment)
or not.     

As the name suggests, forward segment computers can only extend themselves in the forward
direction, but this direction is relative to the direction of the underlying iterators
(the direction given by operator++ for instances of Self, 
but the direction given by operator-- for instances of Reverse). 
They cannot extend themselves in two directions at the same time around an element 
contrary to bidirectional segment computers. 

Any model of CBidirectionalSegmentComputer, which is a refinement of CForwardSegmentComputer, 
should define the following methods:

 - bool extendBackward () : return 'true' and extend the segment to the element pointed to by --begin() if it is possible, return 'false' and does not extend the segment otherwise.

 - bool isExtendableBackward () : return 'true' if the segment can be extended to the element pointed to by --begin() and 'false' otherwise (no extension is performed).

GeometricalDSS and GeometricalDCA are both models of CBidirectionalSegmentComputer. 

The concept CDynamicSegmentComputer is another refinement of CForwardSegmentComputer. 
Any model of this concept should define the following method: 

 - bool retractForward () : return 'true' and move the beginning of the segment to ++begin() if ++begin() != end(), return 'false' otherwise. 

Finally, the concept CDynamicBidirectionalSegmentComputer is a refinement of both 
CBidirectionalSegmentComputer and CDynamicSegmentComputer and should define this extra method:
 
 - bool retractBackward () : return 'true' and move the end of the segment to --end() if begin() != --end(), return 'false' otherwise. 


A model of CDynamicBidirectionalSegmentComputer is ArithmeticalDSS, 
devoted to the dynamic recognition of DSSs, 
 defined as a sequence of connected points @f$ (x,y) @f$
 such that @f$ \mu \leq ax - by < \mu + \omega  @f$ 
 (see Debled and Reveilles, 1995).

 Here is a short example of how to use this class in the 4-connected case:

 @snippet geometry/curves/ArithmeticalDSS.cpp ArithmeticalDSS4Usage

 Here is a short example of how to use this class in the 8-connected case:

 @snippet geometry/curves/ArithmeticalDSS.cpp ArithmeticalDSS8Usage

 These snippets are drawn from ArithmeticalDSS.cpp. 
 
 The resulting DSSs of the two previous pieces of code are drawing below:

 @image html DSS8.png  "8-connected DSS drawn with the paving mode" 
 @image latex DSS8.png  "8-connected DSS drawn with the paving mode" width=5cm

 @image html DSS4.png  "4-connected DSS drawn with the grid mode"
 @image latex DSS4.png  "4-connected DSS in the grid drawing mode" width=5cm

See @ref dgtal_dgtalboard for the drawing mechanism. 


As seen above, the code can be different if an iterator or a circulator is used 
as the nested ConstIterator type. Moreover, some tasks can be made faster for a 
given kind of segment computer than for another kind of segment computer. 
That's why many generic functions are provided in @ref SegmentComputerUtils.h:

- maximalExtension, oppositeEndMaximalExtension, maximalSymmetricExtension, 
- maximalRetraction, oppositeEndMaximalRetraction,  
- longestSegment, 
- firstMaximalSegment, lastMaximalSegment, mostCenteredMaximalSegment,
- previousMaximalSegment, nextMaximalSegment,

These functions are used in the segmentation algorithms introduced below. 

 \section geometrySegmentsExtraction Segments Extraction.

A given range contains a finite set of segments verifying a given 
predicate P.  
A @e segmentation< is a subset of the whole set of segments, 
such that:
  
i. each element of the range belongs to a segment of the subset and 

ii.  no segment contains another segment of the subset. 

Due to (ii), the segments of a segmentation can be ordered without ambiguity
(according to the position of their first element for instance). 

Segmentation algorithms should verify the concept CSegmentation. 
A CSegmentation model should define the following nested type:

 - SegmentComputerIterator: a model of the concept CSegmentComputerIterator
 
It should also define a constructor taking as input parameters: 

 - begin/end iterators of the range to be segmented. 

 - an instance of a model of CSegmentComputer.

Note that a model of CSegmentComputerIterator should define the following methods :

 - default and copy constructors

 - dereference operator: return an instance of a model of CSegmentComputer.

 - intersectPrevious(), intersectNext(): return 'true' if the current segment intersects, respectively, the previous and the next one (when they exist), 'false' otherwise. 

	\subsection geometryGreedyDecomposition Greedy segmentation

The first and simplest segmentation is the greedy one: 
from a starting element, extend a segment while it is possible, 
get the last element of the resulting segment and iterate.
This segmentation algorithm is implemented in the class @href GreedySegmentation.   

   * In the short example below, a digital curve stored in a STL vector
   * is decomposed into 8-connected DSSs whose parameters are sent to 
   * the standard output.
   * @code 
   
  //types definition
  typedef PointVector<2,int> Point;
  typedef std::vector<Point> Range;
  typedef Range::const_iterator ConstIterator;
  typedef ArithmeticalDSS<ConstIterator,int,8> SegmentComputer;
	typedef GreedySegmentation<SegmentComputer> Segmentation;

	//input points
	Range curve;
	curve.push_back(Point(1,1));
	curve.push_back(Point(2,1));
	curve.push_back(Point(3,2));
	curve.push_back(Point(4,2));
	curve.push_back(Point(5,2));
	curve.push_back(Point(6,2));
	curve.push_back(Point(7,2));
	curve.push_back(Point(8,1));
	curve.push_back(Point(9,1));

  //Segmentation
	SegmentComputer recognitionAlgorithm;
  Segmentation theSegmentation(curve.begin(), curve.end(), recognitionAlgorithm);
				 
  Segmentation::SegmentComputerIterator i = theSegmentation.begin();
  Segmentation::SegmentComputerIterator end = theSegmentation.end();
  for ( ; i != end; ++i) {
		SegmentComputer current(*i);
		trace.info() << current << std::endl;	//standard output
  } 

   * @endcode
   *
   * If you want to get the DSSs segmentation of the digital curve
   * when it is scanned in the reverse way, you can use the reverse
   * iterator of the STL vector:   
   * @code 
...
	typedef Range::const_reverse_iterator ConstReverseIterator;
...
  Segmentation theSegmentation(curve.rbegin(), curve.rend(), recognitionAlgorithm);
...
   * @endcode
   *

The resulting segmentations are shown in the figures below:


 @image html left_right.png  "segmented from left to right" 
 @image latex left_right.png  "segmented from left to right" width=5cm


 @image html right_left.png  "segmented from right to left"
 @image latex right_left.png  "segmented from right to left" width=5cm


   * If you want to get the DSSs segmentation of a part of the 
   * digital curve (not the whole digital curve), you can give 
   * the range to process as a pair of iterators when calling 
   * the setSubRange() method as follow: 
   * @code 
  theSegmentation.setSubRange(beginIt, endIt);
   * @endcode   
   *
   * Obviously, [beginIt, endIt) has to be a valid range included
   * in the wider range [curve.begin(), curve.end()). 
   *
   * Moreover, a part of a digital curve may be processed either
   * as an independant (open) digital curve or as a part whose 
   * segmentation at the ends depends of the underlying digital 
   * curve. That's why 3 processing modes are available:
   * - "Truncate" (default), the extension of the last segment 
   *  (and the segmentation) stops just before endIt.
   * - "Truncate+1", the last segment is extended to endIt too
   * if it is possible, provided that endIt != curve.end(). 
   * - "DoNotTruncate", the last segment is extended as far as 
   * possible, provided that curve.end() is not reached. 
   *
   * In order to set a mode (before getting a SegmentComputerIterator),
   * use the setMode() method as follow: 
   * @code 
  theSegmentation.setMode("DoNotTruncate");
   * @endcode  
   * Note that the default mode will be used for any unknown modes.  
   *


The complexity of the greedy segmentation algorithm relies on the 
complexity of the extendForward() method of the segment computer. If it
runs in (possibly amortized) constant time, then the complexity 
of the segmentation is linear in the length of the range. 


\subsection geometryUniqueDecomposition Saturated segmentation.


A unique and richer segmentation, called saturated segmentation,
 is the whole set of <em>maximal segments</em>
(a maximal segment is a segment that cannot be contained in a greater segment). 
This segmentation algorithm is implemented in the class \ref SaturatedSegmentation. 

In the previous segmentation code, instead of the line: 
@code 
	typedef GreedySegmentation<SegmentComputer> Segmentation;
@endcode
it is enough to write the following line:
@code 
	typedef SaturatedSegmentation<SegmentComputer> Segmentation;
@endcode

to get the following figure:
 @image html maxseg.png  "maximal segments"
 @image latex maxseg.png  "maximal segments" width=2.5cm


See @href convex-and-concave-parts.cpp
for an example of how to use maximal DSSs to decompose a digital curve
 into convex and concave parts. 

  * If you want to get the saturated segmentation of a part of the 
   * digital curve (not the whole digital curve), you can give 
   * the range to process as a pair of iterators when calling 
   * the setSubRange() method as follow: 
   * @code 
  theSegmentation.setSubRange(beginIt, endIt);
   * @endcode   
   *
   * Obviously, [beginIt, endIt) has to be a valid range included
   * in the wider range [curve.begin(), curve.end()). 
   *
   * Moreover, the segmentation at the ends depends of the 
   * underlying digital curve. Among the whole set of  
   * maximal segments that pass through the first (resp. last) 
   * element of the range, one maximal segment must be chosen
   * as the first (resp. last) retrieved maximal segments. 
   * Several processing modes are therefore available: 
   * - "First", 
   * - "MostCentered" (default), 
   * - "Last",
   * 
   * The mode i indicates that the segmentation begins with 
   * the i-th maximal segment passing through the first element
   * and ends with the i maximal segment passing through the 
   * last element. 
   * 
   * In order to set a mode (before getting a SegmentComputerIterator),
   * use the setMode() method as follow: 
   * @code 
  theSegmentation.setMode("First");
   * @endcode  
   * Note that the default mode will be used for any unknown modes.  
   

The complexity of the saturated segmentation algorithm relies on the 
complexity of the functions available for computing maximal segments 
(firstMaximalSegment, lastMaximalSegment, mostCenteredMaximalSegment,
previousMaximalSegment and nextMaximalSegment), which are specialized 
according to the type of segment computer (forward, bidirectional and dynamic). 

Let @f$ l @f$ be the length of the range and 
@f$ n @f$ the number of maximal segments. 
Let @f$ L_i @f$ be the length of the i-th maximal segments. 
During the segmentation, the current segment is extended: 

 - at most @f$ 2.\Sigma_{1 \leq i \leq n} L_i @f$ times in the forward case.

 - exactly @f$ \Sigma_{1 \leq i \leq n} L_i @f$ times in the bidirectional case.

 - @f$ l @f$ times in the dynamic case. (But in this case, the current segment is 
also retracted @f$ l @f$ times). 

Moreover, note that @f$ \Sigma_{1 \leq i \leq n} L_i @f$ may be equal to 
@f$ O(l) @f$ (for instance for DSSs). 



*/

}



