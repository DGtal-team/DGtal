/**
 * @file moduleParametricCurves.dox
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2018/08/15
 * 
 * Documentation file for 3D parametric curves module
 *
 * This file is part of the DGtal library.
 */
namespace DGtal {

//----------------------------------------
/*!


@page moduleParametricCurves Digitization of 3D parametric curves
@authors Kacper Pluta

@date 2018/08/15


This part of the manual describes how to digitize 3D parametric curves using a simple semi-automatic
method.

[TOC]

\section paramCurves 3D Parametric Curves

Here we consider curves defined by parametric equations i.e., a group of functions of one variable, and hereafter
called parametric curves.  Each coordinate of a parametric curve, for a given parameter \f$ t \f$, is given
by a corresponding function e.g., a parametric equation of a circle is given as \f$ \gamma : t
\mapsto ( cos (t), sin(t) ) \f$.  This module is related to digitization of 3D parametric curves.

In DGtal, each 3D parametric curve must be a model of C3DParametricCurve to be digitized.

\subsection digitHelix Digitization - The algorithm

In this section we describe how to digitize 3D parametric curves using naive digitization
method. Note that, the name of the method reflects the fact that this is a very naive method, which
simply samples a curve with a given step parameter, and it is a numerical method that does not have any
solid theoretical basis rooted in digital geometry. But in comparison to other known methods, that generate
26-connected digital curves, it does not require the coordinates' functions to be re-parametrized by
each other, which often would involve existence of inverses of such functions. Such inverses even when they exist can
be difficult to find.

In short the algorithm implemented in NaiveParametricCurveDigitizer3D.h is as follows.

<b>Input:</b> a 3D parametric curve \f$ \gamma \f$ (model of C3DParametricCurve), sampling step \f$
t \f$, and a sampling interval \f$ [t_{min}, t_{max}] \f$ such that \f$ t \in [t_{min}, t_{max}]
\f$. Optionally, the user may provide a search parameter \f$ K_{NEXT} > 0 \f$ that controls how
26-adjacent neighbors are found.  By default \f$ K_{NEXT} = 5 \f$.

<b>Output:</b> A sequence of integer points, which connectivity, in some places, may depends on \f$ K_{NEXT}, t \f$ and
the relation between the curve's curvature and the digital grid (see some examples below).

<B>Simplified pseudo-code:</B><br>
>  <I>Create a raw digitization</I><br>
> <B>while</B> \f$ t \in [t_{min}, t_{tmax}] \f$ <B>do</B>
>> point = [\f$ \gamma(t) \f$]       <i>// [.] stands for a rounding function </i> <br>
>> weights[point] = weights[point] + 1<br>
>> <B>if not</B> buffer.hasElement(point) <B>then</B>
>>> buffer.push_back(point)<br>
>> t = t + step<br>
>  digital_curve.push_back(buffer[0])<br>
>  <I>Refine the digitization by keeping only the most meaningful points i.e., points of high coverage of
>  \f$ \gamma \f$.</I><br>
>  <B>for</B> \f$i = 1\f$ <B>while</B> \f$ i <\f$ size(buffer) <B>do</B>
>>  <B>for</B> \f$ j = i + 1 \f$ <B>and</B> \f$ k = 0 \f$ <B>while</B>  \f$ j <\f$ size(buffer) <B>and</B> \f$ k < K_{NEXT} \f$ <B>do</B>
>>>  <B>if</B> is26Connected(digital_curve.back(), buffer[j]) <B>and</B> weights[buffer[j]] \f$ > \f$ weights[buffer[i]] <B>then</B><br>
>>>>  \f$ i = j \f$ <br>
>>>>  \f$k = 0 \f$ <br>
>>>  else
>>>>  \f$ k = k + 1 \f$
>>>  \f$ j = j + 1 \f$
>>  digital_curve.push_back(buffer[i])<br>
>>  \f$ i = i + 1 \f$
>  <I>Due to the weights fluctuations or curve behaviour we can still have points that should be removed to ensure 26-connectivity.</I><br>
>  <B>for</B> \f$ i = 0 \f$ <B>while</B> \f$ i <\f$ size(buffer) <B>do</B>
>>  \f$ tmp = i + 1 \f$ <br>
>>  <B>for</B> \f$ j = i + 1 \f$ <B>and</B> \f$ k = 0 \f$ <B>while</B>  \f$ j <\f$ size(buffer) <B>and</B> \f$ k < K_{NEXT} \f$ <B>do</B>
>>>  <B>if</B> is26Connected(digital_curve[i], digital_curve[j]) <B>then</B><br>
>>>>  \f$ tmp = j \f$ <br>
>>>>  \f$ k = 0 \f$ <br>
>>>  else
>>>>  \f$ k = k + 1 \f$
>>>  \f$ j = j + 1 \f$
>>  digital_curve.erase(i + 1, tmp)<br>
>>  \f$ i = tmp + 1 \f$

In the implemented version the buffer has size three times the value of \f$ K_{NEXT} \f$, and each
time the buffer is flushed a part of the digital curve is created (see the two first nested loops in the code
above). Also, the implemented version can treat closed curves and collect useful metadata.

\subsection metData Additional Information

The digitization implemented in NaiveParametricCurveDigitizer3D can collect, for each point of
the output digital curve, information like

- weights i.e., the point importance
- time - a time value that minimize the distance between the integer point and \f$ \gamma \f$ for a given time step.

Note that, the time information is not computed by default therefore if not needed the user should
avoid calling <B>NaiveParametricCurveDigitizer3D::digitize(back_inserter_iterator,
back_inserter_iterator)</B>, and use
<B>NaiveParametricCurveDigitizer3D::digitize(back_inserter_iterator)</B>, instead.

\section digiExample Examples

Example below shows how to digitize an elliptic helix (see EllipticHelix.h).

Before using NaiveParametricCurveDigitizer3D, you must include the following headers:

@snippet geometry/curves/exampleParamCurve3dDigitization.cpp DigiHelixHeader

Note that, EllipticHelix.h should be replaced with the desirable curve.
The list of 3D parametric curves is given below. <B>Note that</B>, EllipticHelix is the only
curve that implements inverse functions (see EllipticHelix.h) for more information.

Then, you can construct the needed types as follows:
@snippet geometry/curves/exampleParamCurve3dDigitization.cpp DigiHelixConstr

Also, we can state instances of the digitizer and the curve:
@snippet geometry/curves/exampleParamCurve3dDigitization.cpp DigiHelixInit

Finally, we can compute a digitization together with the meta information by calling:
@snippet geometry/curves/exampleParamCurve3dDigitization.cpp DigiHelixComp

The meta information can be then used, for example, to find main axis:
@snippet geometry/curves/exampleParamCurve3dDigitization.cpp DigiHelixMetadata

See exampleParamCurve3dDigitization.cpp and exampleTrofoliKnot.cpp

\subsection implCurves Implemented Curves

* Elliptic Helix (see EllipticHelix.h)
\image html elliptic_helix_main_axis.png
\image latex elliptic_helix_main_axis.png

Knot \f$ 3_1 \f$ (see Knot_3_1.h)
\image html knot_3_1.png
\image latex knot_3_1.png

Knot \f$ 3_2 \f$ (see Knot_3_2.h)
\image html knot_3_2.png
\image latex knot_3_2.png

Knot \f$ 4_1 \f$ (see Knot_4_1.h)
\image html knot_4_1.png
\image latex knot_4_1.png

Knot \f$ 4_3 \f$ (see Knot_4_3.h)
\image html knot_4_3.png
\image latex knot_4_3.png

Knot \f$ 5_1 \f$ (see Knot_5_1.h)
\image html knot_5_1.png
\image latex knot_5_1.png

Knot \f$ 5_2 \f$ (see Knot_5_2.h)
\image html knot_5_2.png
\image latex knot_5_2.png

Knot \f$ 6_2 \f$ (see Knot_6_2.h)
\image html knot_6_2.png
\image latex knot_6_2.png

Knot \f$ 7_4 \f$ (see Knot_7_4.h)
\image html knot_7_4.png
\image latex knot_7_4.png

For more information about parametrized knots see  <a
href="https://www.maa.org/sites/default/files/images/upload_library/23/stemkoski/knots/page1.html">https://www.maa.org/sites/default/files/images/upload_library/23/stemkoski/knots/page1.html</a>
by Lee Stemkoski of Adelphi University.

\section transCurves Geometric Transformations of 3D Parametric Curves

It is possible to rotate a 3D parametric curve around an arbitrary origin and an axis by using
DecoratorParametricCurveTransformation.

Example below shows how to digitize an elliptic helix (see EllipticHelix.h) rotated by \f$
\frac{\pi}{3} \f$ around \f$ \omega = (\frac{1}{\sqrt{2}}, 0, \frac{1}{\sqrt{2}}) \f$.

Before using DecoratorParametricCurveTransformation, you must include the following headers:

@snippet geometry/curves/exampleParamCurve3dDigitizationTransformationDecorator.cpp DigiRotHelixHeader

Then, you can construct the needed types as follows:
@snippet geometry/curves/exampleParamCurve3dDigitizationTransformationDecorator.cpp DigiRotHelixConstr

Also, we can state an instance of the curve i.e., elliptic helix of radii 30, 20 and distance
between each period equal 1:
@snippet geometry/curves/exampleParamCurve3dDigitizationTransformationDecorator.cpp DigiRotHelixConstrCurve

and we then state an instance of the decorator:
@snippet geometry/curves/exampleParamCurve3dDigitizationTransformationDecorator.cpp DigiRotHelixConstrRot

Finally, we can compute a digitization together with the meta information by calling:
@snippet geometry/curves/exampleParamCurve3dDigitizationTransformationDecorator.cpp DigiRotHelixDigitize

See exampleParamCurve3dDigitizationTransformationDecorator.cpp.

\section handProb Handling Problems

In this section we discuss how to deal with problems such as curves that do not lead to a
26-connected digitization with the default parameters (\f$ K_{NEXT}, t_{step} \f$).

\subsection stepProblems Step values

High step values can lead to disconnections in the digitization. For example, knot $3_1$ with
scaling factors all equal 10 for a step 0.03 leads to

\image html knot_3_1_low_step_value.png
\image latex knot_3_1_low_step_value.png

In order, to solve the above issue it is necessary to lower the step value e.g., to 0.003.

A high step value can also lead to wrong weights which can impact quality of the digitization.

\subsection connectProblems Connectivity Problems

By trying to digitize a curve with a high, with respect to the grid, curvature we can arrive at a
connectivity problems.  For instance, if we consider an elliptic helix of radii 20, 1 and period
distance 1, and \f$ K_{NEXT} = 2 \f$, we can observe connectivity issues i.e., there are at least
three points such that they are 26-connected to each other and therefore the curve is not
26-connected in such a place.


In order to resolve the issue it is necessary to increase the value of \f$ K_{NEXT} \f$.

List of related examples: exampleParamCurve3dDigitization.cpp,
exampleParamCurve3dDigitizationTransformationDecorator.cpp, exampleTrofoliKnot.cpp
*/

}



