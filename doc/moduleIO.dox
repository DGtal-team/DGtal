
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/*!
@page image_io Image and digital object import/export
@authors David Coeurjolly and Bertrand Kerautret

This part of the manual describes how to import and export images
in various formats. This document is dedicated both to DGtal users and
developers.

[TOC]

\section usage Overall usage

TODO
\subsection colormaps Colormaps
Image::ValueType to RGB color conversion.

TODO


\section fileformat File formats

\subsection io2D Image formats in 2-D

 - PNM/NetPBM formats: PNMReader and PNMWriter
   - PPM: RGB values (ASCII mode)
   - PGM: grayscale values (ASCII mode)
 - All image formats handled by ImageMagick: MagickReader and MagickWriter

\subsection io3D Image formats in 3-D

 - Variants of PNM/NetPBM formats in 3D: PNMReader and PNMWriter
   - PPM3D: RGB values (ASCII mode)
   - PGM3D: grayscale values (ASCII mode)
 - Vol format (Simplevol project, http://liris.cnrs.fr/david.coeurjolly): VolReader
and VolWriter

\subsection nDio Image formats in n-D

- Raw formats (binary file with raw values using the
  HyperRectDomain::Iterator order): RawReader and RawWriter
    - Raw8: import/export on raw 8bits


\subsection pointListnD Point list format in n-D

The static class \c PointListReader allows to read discrete
points represented in simple file where each line represent a
single point. 



\subsection mesh3D 3D Surface Mesh
The static class \c MeshReader allows to import MeshFromPoints from OFF or OFS file format.
Actually this class can import surface mesh (MeshFromPoints) where faces are potentially represented by triangles, quadrilaters and polygons. Notes that MeshFromPoints can be directly displayed with Viewer3D.

The mesh importation can be done automatically from the extension file name by using the "<<" operator. For instance (see. \ref importMesh3D ):


@snippet io/meshFromOFF.cpp ImportOFFfile

You can also export a MeshFromPoints object by using the operator
(">>"). Notes that the class Display3D permits also to generate a
MeshFromPoints which can be exported (see. \ref exportMesh3D).


	

\section io_examples Example

\subsection importDigitalSet Importing a 3D digital set from volume file:

Importing and visualizing a digital set from a vol file can be done in
few code lines. (see. file <a href="digitalSetFromVol_8cpp-example.html"> digitalSetFromVol.cpp</a>). 

First we select the Image type with \c int:

@code
#include "DGtal/io/readers/VolReader.h"
#include "DGtal/images/ImageSelector.h"
#include "DGtal/images/imagesSetsUtils/SetFromImage.h"
#include "DGtal/helpers/StdDefs.h"
...
typedef ImageSelector < Z3i::Domain, int>::Type Image;
@endcode

Then the initial image is imported:
@code
 typedef ImageSelector < Z3i::Domain, int>::Type Image;
 Image image = VolReader<Image>::importVol(inputFilename);
@endcode

Afterwards the set is thresholded in ]0,255[: 

@code
  Z3i::DigitalSet set3d (image.domain());
  SetFromImage<Z3i::DigitalSet>::append<Image>(set3d, image, 0,255);
  Viewer3D viewer;
  viewer.show(); 
  viewer << SetMode3D(image.domain().className(), "BoundingBox");
  viewer << set3d << image.domain()  << Viewer3D::updateDisplay;
@endcode


Then you will obtain the following visualisation:

\image html visuDigitalSet3D.png "3D digital with Viewer3D" 
\image latex visuDigitalSet3D.png "3D digital with Viewer3D" width=5cm


\subsection importPointList Import 3D point list from file

The example <a href="digitalSetFromPointList_8cpp-example.html" >  digitalSetFromPointList.cpp </a> shows a simple example of 3d set importation:

@code
vector<Z3i::Point> vectPoints=  PointListReader<Z3i::Point>::getPointsFromFile(inputFilename); 
  for(unsigned int i=0; i<vectPoints.size();i++){
    viewer << vectPoints.at(i);
  }
@endcode
We can change the way to select the coordinate field:

@code
 vector<unsigned int> vPos;
  vPos.push_back(0);
  vPos.push_back(2);
  vPos.push_back(1);
  vectPoints=  PointListReader<Z3i::Point>::getPointsFromFile(inputFilename, vPos); 
  viewer<< CustomColors3D(QColor(255,0,0), QColor(255,0,0)); 
  for(unsigned int i=0; i<vectPoints.size();i++){
    viewer << vectPoints.at(i);
  }
 viewer   << Viewer3D::updateDisplay;
@endcode

You may obtain the following visualisation:

\image html visuPointList.png "Visualisation of 3d imported point list " 
\image latex visuPointList.png "Visualisation of 3d imported point list" width=5cm

\subsection importMesh3D Import 3D mesh from OFF file

The following example (<a href="io_2meshFromOFF_8cpp-example.html"> meshFromOFF.cpp
</a>) shows in few lines how to import and display an OFF 3D mesh.
Add the following headers to access to OFF reader and  Viewer3D:


@snippet io/meshFromOFF.cpp includeImportOFF

then import an example  ".off" file from the example/sample directory:

@snippet io/meshFromOFF.cpp ImportOFFfile

Display the result:

@snippet io/meshFromOFF.cpp displayOFFfile


You may obtain the following visualisation:

\image html  visuTrefExample.png   "Visualisation of 3d imported Mesh "  width=5cm
\image latex  visuTrefExample.png  "Visualisation of 3d imported Mesh" width=5cm

You can also import large scale mesh, like the one of classic Angel scan ( available here: \href http://www.cc.gatech.edu/projects/large_models/ )

\image html visuImportOFF.png  "Visualisation of the 3d angel "  width=5cm
\image latex visuImportOFF.png  "Visualisation of the 3d  angel" width=5cm





\subsection exportMesh3D Export 3D mesh in OFF and OBJ format

The following example (<a href="io_2display3DToOFF_8cpp-example.html"> display3DToOFF.cpp </a>  shows in few lines how to export in OFF format a
MeshFromPoints object. This object will be exported from a Display3D
object (see. display3DToOFF). 



@snippet io/display3DToOFF.cpp ExampleDisplay3DToOFF




Notes that the export can also be done in two steps:


@code 
// The parameter true is used to specify that we store the face colors.
MeshFromPoints aMesh(true);
viewer >> aMesh;
aMesh >> "exporMeshToOFF.off"
@endcode


The resulting mesh can be visualized for instance by using meshlab;


\image html  visuDisplay3DToOFF.png  "Visualization of the exported mesh "  width=5cm
\image latex visuDisplay3DToOFF.png  "Visualization of the exported mesh" width=5cm




This code can be useful if you want to generate illustrations in the
U3D format. For instance by using the U3D/PDF export from MeshLab or
JReality (\href www3.math.tu-berlin.de/jreality/). You can for
instance generate some exports in pdf like this example:


\image html  visu3dKSSurfaceExtractionExportPDF.png  "Visualization in PDF of an exported Digital object." width=5cm
\image latex visu3dKSSurfaceExtractionExportPDF.png  "Visualization in PDF of an exported Digital object." width=5cm





(see this pdf file: \href https://liris.cnrs.fr/dgtal/wordpress/wp-content/uploads/2010/10/3dKSSurfaceExtractionExport.pdf )


*/

}

/**
* \example io/digitalSetFromVol.cpp
**/

/**
* \example io/digitalSetFromPointList.cpp
**/


/**
*  Example of OFF file importation and display.

   @see \ref importMesh3D

   @image html visuTrefExample.png   "Visualisation of the sample/tref.off file"

* \example io/meshFromOFF.cpp
**/



/**
*  Example of OFF generation from a Display3D object.

   @see \ref exportMesh3D

   @image html visuDisplay3DToOFF.png   "Visualisation of the Display3D mesh export using MeshLab software (\ref http://meshlab.sourceforge.net). "

* \example io/display3DToOFF.cpp
**/
