
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/*!
@page image_io Image and digital object import/export
@authors David Coeurjolly

This part of the manual describes how to import and export images
in various formats. This document is dedicated both to DGtal users and
developers.

[TOC]

\section usage Overall usage

TODO
\subsection colormaps Colormaps
Image::ValueType to RGB color conversion.

TODO


\section fileformat File formats

\subsection io2D Image formats in 2-D

 - PNM/NetPBM formats: PNMReader and PNMWriter
   - PPM: RGB values (ASCII mode)
   - PGM: grayscale values (ASCII mode)
 - All image formats handled by ImageMagick: MagickReader and MagickWriter

\subsection io3D Image formats in 3-D

 - Variants of PNM/NetPBM formats in 3D: PNMReader and PNMWriter
   - PPM3D: RGB values (ASCII mode)
   - PGM3D: grayscale values (ASCII mode)
 - Vol format (Simplevol project, http://liris.cnrs.fr/david.coeurjolly): VolReader
and VolWriter

\subsection nDio Image formats in n-D

- Raw formats (binary file with raw values using the
  HyperRectDomain::Iterator order): RawReader and RawWriter
    - Raw8: import/export on raw 8bits


\subsection pointListnD Point list format in n-D

The static class \c PointListReader allows to read discrete
points represented in simple file where each line represent a
single point. 
	
	

\section io_examples Example

\subsection importDigitalSet Importing a 3D digital set from volume file:

Importing and visualizing a digital set from a vol file can be done in
few code lines. (see. file <a href="digitalSetFromVol_8cpp-example.html"> digitalSetFromVol.cpp</a>). 

First we select the Image type with \c int:

@code
#include "DGtal/io/readers/VolReader.h"
#include "DGtal/images/ImageSelector.h"
#include "DGtal/images/imagesSetsUtils/SetFromImage.h"
#include "DGtal/helpers/StdDefs.h"
...
typedef ImageSelector < Z3i::Domain, int>::Type Image;
@endcode

Then the initial image is imported:
@code
 typedef ImageSelector < Z3i::Domain, int>::Type Image;
 Image image = VolReader<Image>::importVol(inputFilename);
@endcode

Afterwards the set is thresholded in ]0,255[: 

@code
  Z3i::DigitalSet set3d (image.domain());
  SetFromImage<Z3i::DigitalSet>::append<Image>(set3d, image, 0,255);
  Viewer3D viewer;
  viewer.show(); 
  viewer << SetMode3D(image.domain().className(), "BoundingBox");
  viewer << set3d << image.domain()  << Viewer3D::updateDisplay;
@endcode


Then you will obtain the following visualisation:

\image html visuDigitalSet3D.png "3D digital with Viewer3D" 
\image latex visuDigitalSet3D.png "3D digital with Viewer3D" width=5cm


\subsection importPointList Import 3D point list from file

The example <a href="digitalSetFromPointList_8cpp-example.html" >  digitalSetFromPointList.cpp </a> shows a simple example of 3d set importation:

@code
vector<Z3i::Point> vectPoints=  PointListReader<Z3i::Point>::getPointsFromFile(inputFilename); 
  for(unsigned int i=0; i<vectPoints.size();i++){
    viewer << vectPoints.at(i);
  }
@endcode
We can change the way to select the coordinate field:

@code
 vector<unsigned int> vPos;
  vPos.push_back(0);
  vPos.push_back(2);
  vPos.push_back(1);
  vectPoints=  PointListReader<Z3i::Point>::getPointsFromFile(inputFilename, vPos); 
  viewer<< CustomColors3D(QColor(255,0,0), QColor(255,0,0)); 
  for(unsigned int i=0; i<vectPoints.size();i++){
    viewer << vectPoints.at(i);
  }
 viewer   << Viewer3D::updateDisplay;
@endcode

You may obtain the following visualisation:

\image html visuPointList.png "Visualisation of 3d imported point list " 
\image latex visuPointList.png "Visualisation of 3d imported point list" width=5cm




*/

}

/**
* \example io/digitalSetFromVol.cpp
**/

/**
* \example io/digitalSetFromPointList.cpp
**/
