/**
 * @file HowToUseDGtal.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/05/25
 *
 * Documentation file for feature HowToUseDGtal
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page HowToUseDGtal How to use DGtal in your own project
@author David Coeurjolly


Once you have installed the DGtal library, this documentation
describes the ways to link your project and the installed DGtal libs
and making sure that the dependencies are correct.

Let us consider the following helloworld project with the C++ file
\em helloworld.cpp :

@code
#include <DGtal/base/Common.h>

int main(int argc, char** argv)
{
  
  DGtal::trace.info() << "Helloworld from DGtal ";
  DGtal::trace.emphase() << "(version "<< DGTAL_VERSION << ")"<< std::endl;
  
  return 0;
}
@endcode

This simple example just use the "trace" mechanism in DGtal but it
requires @em helloworld.cpp to be linked to DGtal.

To compile this file with cmake, you have a CMakeLists.txt file that
looks like:
@code
PROJECT(Helloworld)

ADD_EXECUTABLE(helloworld helloworld)

@endcode

When you have installed DGtal, cmake has created all the configuration
files that you need to import DGtal setting in your project in the  "${CMAKE_INSTALL_PREFIX}/share/DGtal/CMake/"
folder. On linux, standard installation will create configuration
files in /usr/local/share/DGtal/CMake/".

The most important file in this folder is @em DGtalConfig.cmake which
contains everything you need. Just copy (or better link) this file in
your project source directory. Then, to link helloworld to DGtal, you have to update the
CMakeLists.txt such that: 

@code
PROJECT(Helloworld)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

FIND_PACKAGE(DGtal REQUIRED)

INCLUDE_DIRECTORIES(${DGTAL_INCLUDE_DIRS})
LINK_DIRECTORIES(${DGTAL_LIBRARY_DIRS})

ADD_EXECUTABLE(helloworld helloworld)
TARGET_LINK_LIBRARIES(helloworld ${DGTAL_LIBRARIES})
@endcode

Additionally, you can control the version of the DGtal library with
for example :
@code
FIND_PACKAGE(DGtal 0.3.1 REQUIRED)
@endcode
that will produce an error if your DGtal installed library is an
older version than 0.3.1.
*/

}
