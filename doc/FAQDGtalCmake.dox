/**
 * @file FAQDGtalCmake.dox
 * @authors David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr ) - Martial Tola (\c martial.tola@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/05/04
 * 
 * Documentation file for feature FAQDGtalCmake
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page FAQDGtalCmake How to build DGtal (with cmake)
@authors David Coeurjolly - Martial Tola


This part of the manual describes how to build DGtal on Linux, Mac OS X and Windows. 

[TOC]

\section intro Introduction and first build

The DGtal library uses <a href="http://www.cmake.org">cmake</a> to
manage the project build on various systems.

\subsection linux Build on Linux-based distributions

To build DGtal in is minimal configuration, you need at least these dependencies:

- \e cmake (optionally cmake-gui),
- \e g++,
- \e doxygen >= 1.8.0,
- \e graphviz,
- \e boost >= 1.42.0 and boost-program-options.

To build DGtal in is full configuration, you need these dependencies too:

- \e gmp,
- \e cairo,
- \e qglviewer,
- \e graphicsmagick,
- \e insighttoolkit,
- \e gdcm.

For example, from a clean Ubuntu installation, you just need to do that to install all the dependencies:
@code
sudo apt-get install cmake g++ doxygen graphviz libboost-dev libboost-program-options-dev
sudo apt-get install libgmp-dev libcairo2-dev libqglviewer-qt4-dev libgraphicsmagick++1-dev libinsighttoolkit3-dev libgdcm2-dev
@endcode

An important feature of cmake is the "out-of-source" build
process. Let us suppose that DGtal sources are in the DGTALSOURCES
folder. Hence, in a terminal you can create a build folder:
@code
cd DGTALSOURCES
mkdir build
cd build
@endcode

Next, use the cmake command to generate your Unix Makefile project
(default generator on Unix/Linux) like below for the minimal DGtal configuration:
@code
cmake ..
@endcode

For the full DGtal configuration, you have to set these options with cmake:
@code
cmake .. -DWITH_GMP=true -DWITH_ITK=true -DWITH_CAIRO=true -DWITH_QGLVIEWER=true -DWITH_MAGICK=true
@endcode

If no error occurs, you can build the DGtal lib and install it:
@code
make 
sudo make install
@endcode


\subsection macos Build on Mac OS X

First of all,

- \e download and install Xcode : <a href="https://developer.apple.com/xcode/">https://developer.apple.com/xcode/</a>
- \e with recent version of Xcode (for example 4.3.x) you need then to install the 'Command Line Tools' for Xcode. You can install them from inside Xcode's Download preferences. Finally, you also need to do that command:
@code
sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
@endcode
- \e download and install <a href="http://mxcl.github.com/homebrew/">Homebrew</a> and then update it:
@code
/usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
brew update
@endcode

To build DGtal in is minimal configuration, you need at least these dependencies:

- \e cmake (optionally cmake-gui),
- \e doxygen >= 1.8.0,
- \e graphviz,
- \e boost >= 1.42.0 and boost-program-options.

To build DGtal in is full configuration, you need these dependencies too:

- \e gmp,
- \e cairo,
- \e libqglviewer,
- \e graphicsmagick,
- \e insighttoolkit.

For example, from a clean Mac OS X Lion (10.7) installation, you first need to do that to install all the dependencies:
@code
brew install cmake doxygen graphviz boost
brew install gmp cairo libqglviewer graphicsmagick
sudo ln -s "/usr/local/Cellar/libqglviewer/2.3.15/QGLViewer.framework" "/Library/Frameworks/QGLViewer.framework"
@endcode
\b here \b 2.3.15 is an example but you may need to adjust the version number...

Finally, for now, ITK is not available via Homebrew so you have to download <a href="http://www.itk.org/ITK/resources/software.html">this package</a> and then do:
@code
tar zxvf InsightToolkit-4.1.0.tar.gz
cd InsightToolkit-4.1.0
mkdir build
cd build
cmake ..
make
sudo make install
@endcode
\b here \b 4.1.0 is an example but you may need to adjust the version number...

Then, since recent Mac OS systems are unix-like operating systems, the
easiest way to compile DGtal with cmake/make is to follow Linux-based instructions.


\subsection win Build on Windows / Visual Studio

@todo Describe the process to compile or install dependencies (boost, gmp-mpir, cairo, qglviewer, qt, ...) for x86 (vs2008) and x64 (vs2010)

Use the cmake Windows interface (cmake-gui) to generate your Visual Studio
project. Again, a good practise is to specify a different folder in
which cmake and Visual Studio will put their build results.

On windows, there is no specific locations on the folder
tree where cmake could find the include files and DLLs shared libraries of the DGtal
dependencies. Hence, you will have to \b manually set the paths
to find the dependencies.

For example, with cmake-gui,
  - \e the \b boost dependency must be set with a new \b BOOST_ROOT \b path option (with "+ Add Entry" button)
  - \e the \b gmp-mpir dependency must be set with \b GMPXX_LIBRARIES (mpir.lib \b and \b not mpirxx.lib, important!) and \b GMP_LIBRARIES (mpir.lib too) \b file options and \b GMP_INCLUDE_DIR \b path option
  - \e the \b cairo dependency must be set with \b CAIRO_LIBRAIRIES (cairo.lib \b and \b not cairo-static.lib, important!) \b file option and \b CAIRO_INCLUDE_DIRS \b path option
  - \e the \b qglviewer dependency must be set with \b QGLVIEWER_LIBRARY_DEBUG (QGLViewerd2.lib) and \b QGLVIEWER_LIBRARY_RELEASE (QGLViewer2.lib) \b file options and \b QGLVIEWER_INCLUDE_DIR \b path option

Important:
- \e \b BUILD_SHARED_LIBS (ON/OFF) must be \b OFF actually on \b Windows!

Once the Visual Studio project as been  created, you just have to simply open it
with VS and compile it (but for the moment there are still compilation errors on Windows with some modules...).


\section cmakeDGtal DGtal cmake options

In DGtal CMakeLists.txt, several options can be specified to custom the
library build. First, cmake has predefined build options (\e CMAKE_BUILD_TYPE) such as:
  - \e CMAKE_BUILD_TYPE
     - \b Debug: debug mode (e.g. C++ debug flags, DEBUG variable, ...)
     - \b Release: release build (e.g. optimized C++ compiler options, NDEBUG variable, ...)
  - \e CMAKE_INSTALL_PREFIX: a string containing the DGtal install path
  (e.g. by default on some linux: "/usr/local/").

Beside these options, user can also specify these options:

- \e BUILD_EXAMPLES (ON/OFF): to build DGtal examples (default: ON)
- \e BUILD_TESTING (ON/OFF): to build the test suite (default: ON)

- \e DEBUG_VERBOSE (ON/OFF): to define the \e DEBUG_VERBOSE variable
 (default: OFF). If set to ON and in \b Debug build type, verbose
debug messages are traced out.

- \e \b BUILD_SHARED_LIBS (ON/OFF): to build the lib as a shared library (default: ON) but \b must be \b OFF actually on \b Windows!
*/

}
