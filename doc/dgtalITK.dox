/**
 * @file dgtalITK.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/03/25
 *
 * Documentation file for feature dgtalITK
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page dgtalITK Interactions between ITK and DGtal using ITKImage 
@author David Coeurjolly
[TOC]

This part of the manual describe the interactions between DGTal and
InsightToolkit ITK library (http://www.itk.org).

@image html itk-logo.png
@image latex itk-logo.png "Insight Toolkit" width=5cm

@see testITKImage.cpp


@note The features  detailed below require to have built DGtal with
the ITK dependency.  Furthermore, since it is on-going work, the
features has been declared in the DGtal::experimental namespace.

The junction point between DGtal and ITK is implemented via a specific
image container: experimental::ImageContainterByITKImage.

For short, if you create an instance of this image type (using StdDefs
shortcuts): 

@code 
typedef experimental::ImageContainerByITKImage<Z2i::Domain, Z2i::Integer> Image;

Z2i::Point a ( 0,0 );
Z2i::Point b ( 128, 128 );

Image myImage ( a, b );
@endcode

Since @ref ImageContainerByITKImage is a model of the CImageContainer
concept, all DGtal tools working on valid image containers are also
compatible with the ITK container.

@section itkindgal ITK pipeline in DGtal

In the following example, we use ITK methods and ITK pipeline to
process an image within DGtal (simple image thresholding):

@code
//We construct a simple ITK pipeline
typedef itk::BinaryThresholdImageFilter< Image::ITKImage, Image::ITKImage> Filter;
Filter::Pointer filter = Filter::New();

filter->SetInput( myImage.getImagePointer() );
filter->SetOutsideValue( 0 );
filter->SetInsideValue( 10 );
filter->SetLowerThreshold( 34 );;
filter->SetUpperThreshold( 400 );;
filter->Update();

//We create a DGtal::Image from a pointer to the pipeline output
Image::ITKImagePointer handleOut = filter->GetOutput();
Image myImageOut ( a, b, handleOut );
@endcode

Based on this example, we can see that:
 - ITK built-in image type associated to the DGtal image Image is
specified in the type @ref Image::ITKImage
 - the method getImagePointer() is used to return an handle on the ITK
 image datastructure
 - to store the result of the pipeline execution, can have a specific
 constructor for Image object that will copy the internal ITK data. 



@section dgalinitk DGtal methods in ITK

Using a similar approach, DGtal methods can be used in a ITK pipeline
with the help of a kind of wrapper filter. Indeed, ITK is based on a
pipeline with filters connected by SetInput() and GetOutput()
methods. 

DGtal is not based on the same @e stream process. Hence, if you would
like to use DGtal data and methods in ITK, you will have to create a
simple ITK filter satisfying the @e stream mechanism API and whose
internal computation method will instantiate DGtal objects and use
DGtal methods.







*/}
