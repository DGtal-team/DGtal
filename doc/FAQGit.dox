/**
 * @file FAQGit.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/05/14
 *
 * Documentation file for feature FAQGit
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page FAQGit Git/Github source code management in DGtal
@author David Coeurjolly

This part of the manual describes how the DGtal Git repository is used on github
and gives a couple of details on the git system.


Table of contents:
 -# \ref sectGIT1
   -# \ref subsectGIT11
   -# \ref subsectGIT12
   -# \ref subsectGIT13
 -# \ref sectGIT2  
   -# \ref ss21
   -# \ref ss22

\section sectGIT1 Setting up your account and working copy

\subsection subsectGIT11 Create an account on github.com

  - go to github.com, then Signup -> Free account for opensource projects.
  - choose login/password and it's done
  - once it's ok, you're transferred to your "dashboard" with three
options "Set up Git", "Create a Repo", "Fork a Repo" and "Be Social"
  - Select the first one.

\subsection subsectGIT12 Set up git

Github documentation is quite straightforward. The goal to to
activate your account with a SSH key to be able to "push" changes to
github servers. If you do not activate the SSH access, you'll be able to
push your edits via the HTTP protocol but we  prefer the first variant.

In the meantime, you can also update your account settings
(https://github.com/account)

\subsection subsectGIT13 Fork DGtal

Before going into details on git and git-commands, let's fork the initial DGtal repository. 
So, once you're logged in on github

  - go to  https://github.com/dcoeurjo/DGtal
  - click on the "Fork" button.
  - once the fork is finished, you'll have your own copy of DGtal
(trunk) with the following path: https://github.com/yourlogin/DGtal
  - At this URL, you're able to browse the sources, see the commit log,
report issues, view/edit wiki pages,..


\section sectGIT2 Basic comparison SVN/GIT

\subsection ss21 Clone == Checkout
@code
 	svn checkout https://liris.cnrs.fr/dgtal/trunk
	<==>
	git clone git@github.com:dcoeurjo/DGtal
or
	git clone https://dcoeurjo@github.com/dcoeurjo/DGtal
@endcode
the clone will "clone" the repository with all its branches (default one
"master" <==> "trunk" in SVN)

\subsection ss22 Update, Edit, add, commit, push

  - Fetch the changes from the server
@code
	svn update <==> git pull
@endcode

  - add a file into the VC system:
@code
	svn add file <==> git add file
@endcode

  - See the current status of your working copy
@code
	svn status <==> git status
@endcode

  - commit locally your changes (git only)
@code
	git commit (commit the added files)
	git commit -a (commit the added files and the modified files)
@endcode

  - push the modifications to the server (in the git case, you'll push
all your local commits)
@code
	svn commit <==> git push
@endcode

  - create a branch
@code
	svn copy URL URL (server side branch, you need to be online)
	<==>
	git branch toto (offline local branch)
@endcode

  - Jump to another branch
@code
	svn switch URL (server-side branch...)
	<==>	
	git checkout toto (offline branch)
@endcode

  - merge branches
@code
	svn merge URL (assuming your WC is trunk)
	svn commit...
	<==>
	git checkout master (we go back to the "trunk")
	git merge toto (merger toto->trunk)	
	git commit -a ...
@endcode

For further details, there exist plenty of git tutorials on the web. I
strongly encourage you to have a look to the progit.org one
(http://progit.org/book/).

GitRef is also very nice: http://gitref.org/index.html

Important things:
	- git branches are local (but we can publish a branch too)
	- easy merge
	- except pull/push, everything else can be done offline (with a
consistent history).



*/

}
