/**
 * @file freemanChainFromImage.dox
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/05/02
 *
 * Documentation file for Extracting level set boundary from Image
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page freemanChainFromImage Extracting level set boundary from Image
@author Bertrand Kerautret

This part of the manual describes a simple way to extract a level set
boundary as a FreemanChain contour from an gray level image. The first
step is to extract the thresholed Digital set from the image (see. <a
href="structDGtal_1_1SetFromImage.html"> DGtal::SetFromImage </a>) and
then to track its boundary (see. <a href="classDGtal_1_1Surfaces.html">
DGtal::Surfaces</a>). An example can also be found in the example <a
href="freemanChainFromImage_8cpp-example.html" >freemanChainFromImage.cpp</a> .


Table of contents:
 -# \ref step1 
 -# \ref step2 
 -# \ref step3 
 -# \ref FCfromImageTools


\section step1 DigitalSet from thresholded image 

The digitalSet can be obtained after thresholding a given image. As
described in the section \ref image_io a image can simply be imported
with readers as for instance in PNMReader: 


@code
#include "DGtal/kernel/images/ImageSelector.h"
#include "DGtal/io/readers/PNMReader.h"
...
 typedef ImageSelector < Z2i::Domain, int>::Type Image;
 Image image = PNMReader<Image>::importPGMImage( examplesPath + "samples/circleR10modif.pgm" ); 
@endcode


From the imported image you can extract a DigitalSet by using thresholds:
@code 
Z2i::DigitalSet set2d (image.domain());
SetFromImage<Z2i::DigitalSet>::append<Image>(set2d, image, 0, 255);
@endcode
 
You can display the thresholded set:
@code 
DGtalBoard aBoard;
aBoard << set2d;
aBoard << image.domain();  
@endcode

  @image html fcExtraction0.png  

A KhalimskySpaceND is also needed to extract the region boundary, you can
simply use the domain of the imported image to initialise a KhalimskySpaceND:

@code 
Z2i::KSpace ks;
bool space_ok = ks.init( image.domain().lowerBound(), image.domain().upperBound(), true );
@endcode


Another important element is to define the SurfelAdjacency used to
track the DigitalSet boundary:

@code
SurfelAdjacency<2> sAdj( true );
@endcode



\section step2 Contour extraction

Afterwards the set of all 4-connected contours can be extracted by
using the function extractAllPointContours4C from DGtal::Surfaces:


@code
std::vector< std::vector< Z2i::Point >  >  vectContoursBdryPointels;
Surfaces<Z2i::KSpace>::extractAllPointContours4C( vectContoursBdryPointels,
                                                  ks, set2d, sAdj );  
@endcode



\section step3 Freemanchain construction and display

From the previous vector containing the contour points, we can
construct and display its associated FreemanChain.

@code
for(int i=0; i<vectContoursBdryPointels.size(); i++)
   FreemanChain<Z2i::Integer> fc (vectContoursBdryPointels.at(i), true);
@endcode

Since the reconstructed freemanchain represents the inter pixels
boundary of the digital set we can specify it by using the mode "InterGrid" as follows:
@code
aBoard << SetMode( fc.styleName(), "InterGrid" );
aBoard<< CustomStyle( fc.styleName(), 
    			  new CustomColors(  cmap_grad(i),  DGtalBoard::Color::None ) );    
@endcode

By using the display color defining in the example <a
href="freemanChainFromImage_8cpp-example.html"
>freemanChainFromImage.cpp</a> you may obtain the following result
where each contour are represented with a specific color:


  @image html fcExtraction.png 


Note that if you change the SurfelAdjacency used in the contour extraction:

@code
SurfelAdjacency<2> sAdj( false );
@endcode


you will obtain the followings contours:


 @image html fcExtraction2.png 





\section  FCfromImageTools Extracting and displaying contours 


The directory Tools/2dContourTools contains command line program "pgm2freeman" 
allowing to simply extract level set contours from an pgm image:

@code
./tools/2dContourTools/pgm2freeman --image ../examples/samples/church.pgm 
--minSize 300 --contourSelect 129 526 300 --thresholdRange 100 5 220 > contours.fc ;
@endcode
 

This example will load the pgm source file "church.pgm" and applies
successive thresholds [100,105], [105, 110]....  [215, 220] and selects
all the boundary contours with a minimal size equals to 300 and with
a distance between its barycenter and point (129 526) less than 300.


The resulting file "contours.fc" contains a freemanchain on each line
and can be displayed with the command line program "displayContours":


@code 
./tools/2dContourTools/displayContours --FreemanChain contours.fc --backgroundImage ../examples/samples/church.png
 --outputEPS levelSetImage.eps --outputPDF levelSetImage.pdf 
@endcode



You will obtain the following result in eps and pdf format (if cairo
is installed on your system) (left image). By adding the obption @code
--alphaBG 0.5 @endcode the backgroundImage will be rendered with
transparency (right image).
<center>
<table>
<TR align=CENTER>
<TD> @image html churchLevelSets.png </TD>
<TD> @image html churchLevelSetsTransp.png </TD>
</TR>
</table>
</center>


*/




/**
\example freemanChainFromImage.cpp
* A simple example to show how to extract the set of boundary contours obtained from the image level set.
* This programm outputs this image: 
*   @image html fcExtraction.png 
*
*/
}





