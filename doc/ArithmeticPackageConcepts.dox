
/**
 * @file ArithmeticPackageConcepts.dox
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/03/16
 *
 * Documentation file for feature ArithmeticPackageConcepts
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page pageArithmeticPackageConcepts Arithmetic Concepts and Models
@writers Jacques-Olivier Lachaud

 @dot   
digraph GARITHMETIC {
    rankdir= BT

    subgraph cluster_ext {
	rank = same;
        style=invis;
        subgraph cluster_base {
                 style=filled;
                 color="#eeeeff";
                 node [style=filled,color=white];
                 label="base";

                 CBackInsertable [ label="CBackInsertable" URL="\ref CBackInsertable" ];
                 CConstSinglePassRange [ label="CConstSinglePassRange" URL="\ref CConstSinglePassRange" ];
        }
        subgraph cluster_kernel {
                 style=filled;
                 color="#ddddee";
                 node [style=filled,color=white];
                 label="kernel";

                 CInteger [ label="CInteger" URL="\ref CInteger" ];
                 CSignedInteger [ label="CSignedInteger" URL="\ref CSignedInteger" ];
                 CUnsignedInteger [ label="CUnsignedInteger" URL="\ref CUnsignedInteger" ];
                 CSpace [ label="CSpace" URL="\ref CSpace" ];
        }
        subgraph cluster_io {
                 style=filled;
                 color="#e4e4ff";
                 node [style=filled,color=white];
                 label="io";

                 CDrawableWithBoard2D [ label="CDrawableWithBoard2D" URL="\ref CDrawableWithBoard2D" ];
        }
        subgraph cluster_boost {
                 style=filled;
                 color=white;
                 node [style=filled,color=orange];
                 label="boost";

                 boost_CopyConstructible;
                 boost_DefaultConstructible;
                 boost_Assignable;
                 boost_Sequence;
        }
    }
  
    subgraph cluster_concepts {
        style=filled;
        color=lightgrey;
        node [style=filled,color=white];
        label="arithmetic (main concepts)";

        CPositiveIrreducibleFraction [ label="CPositiveIrreducibleFraction" URL="\ref CPositiveIrreducibleFraction" ] ;
    }
    CPositiveIrreducibleFraction -> CBackInsertable;
    CPositiveIrreducibleFraction -> CConstSinglePassRange;
    CPositiveIrreducibleFraction -> boost_DefaultConstructible;
    CPositiveIrreducibleFraction -> boost_CopyConstructible;
    CPositiveIrreducibleFraction -> boost_Assignable;
    CPositiveIrreducibleFraction -> CInteger [label="use",style=dashed];
    CPositiveIrreducibleFraction -> CSignedInteger [label="use",style=dashed];
  
    subgraph cluster_models {
        style=filled;
        color="#ccffcc";
        node [style=filled,color=white];
        label="arithmetic (main models)";

        SternBrocot_Fraction [ label="SternBrocot::Fraction" URL="\ref SternBrocot::Fraction" ] ;
        LightSternBrocot_Fraction [ label="LightSternBrocot::Fraction" URL="\ref LightSternBrocot::Fraction" ] ;
        LighterSternBrocot_Fraction [ label="LighterSternBrocot::Fraction" URL="\ref LighterSternBrocot::Fraction" ] ;
        IntegerComputer [ label="IntegerComputer" URL="\ref IntegerComputer" ] ;
        LatticePolytope2D [ label="LatticePolytope2D" URL="\ref LatticePolytope2D" ] ;
        ClosedIntegerHalfPlane [ label="ClosedIntegerHalfPlane" URL="\ref ClosedIntegerHalfPlane" ] ;
    }

    SternBrocot_Fraction -> CPositiveIrreducibleFraction;
    LightSternBrocot_Fraction -> CPositiveIrreducibleFraction;
    LighterSternBrocot_Fraction -> CPositiveIrreducibleFraction;
    IntegerComputer -> boost_DefaultConstructible;
    IntegerComputer -> boost_CopyConstructible;
    IntegerComputer -> boost_Assignable;
    IntegerComputer -> CInteger [label="use",style=dashed];
    IntegerComputer -> CUnsignedInteger [label="use",style=dashed];
    LatticePolytope2D -> CSpace [label="use",style=dashed];
    LatticePolytope2D -> CDrawableWithBoard2D
    LatticePolytope2D -> boost_DefaultConstructible;
    LatticePolytope2D -> boost_CopyConstructible;
    LatticePolytope2D -> boost_Assignable;
    LatticePolytope2D -> boost_Sequence;
    ClosedIntegerHalfPlane -> CSpace [label="use",style=dashed];
}
@enddot

*/

}
