/**
 * @file FAQDGtalSVN.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systèmes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/01/30
 * Documentation file for feature FAQDGtalSVN
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 * 
 */
/*!
@page FAQDGtalSVN Subversion  source code management in DGtal (SVN) [DEPRECATED, use GIT INSTEAD]
@author David Coeurjolly

This part of the manual describes how the DGtal SVN repository is used
and gives a couple of details on the SVN management.

Table of contents:
 -# \ref sect1
 -# \ref sect2  
 
\section sect1 SVN repository structure

For DGtal, we have set up a classical SVN repository model to handle releases, branches and development streams. Here you have the main structure of DGtal’s SVN repository

 - \b trunk/: the main development version of the library (the write access to this folder is limited).
 - \b tags/: for each main release, a new tag is created. If you want to checkout an old DGtal version, you can do for instance:
@code  
svn checkout https://svn.liris.cnrs.fr/dgtal/tags/0.2
@endcode
    Only DGtal admins can create/update a new tag.

 - \b branches/: each sub-folder contains a clone of the trunk (at a
   given moment) and implements  modifications done by a group of
   users for a given in-progress feature. When the new feature is
   stable, admins will merge the associated branch into the trunk for
   the next release.


\section sect2 Brief SVN command FAQ

 - creating a new branch:
@code   
svn copy https://svn.liris.cnrs.fr/dgtal/trunk https://svn.liris.cnrs.fr/dgtal/branches/new-killing-feature
@endcode

    Then you can checkout this new branch and start working

 - updating your branch: use Subversion's merge feature to merge trunk to your branch within your working copy (we suppose that your current working copy is an up-to-date copy of the branch “new-killing-feature”)
@code
svn merge https://svn.liris.cnrs.fr/dgtal/trunk
{... resolve the conflicts if necessary ...}
svn commit
@endcode

 - closing a branch: use Subversion's Merge feature to merge changes from your branch to trunk  (we suppose that all changes are committed to the branch “new-killing-feature” and that all recent changes on the trunk are commited/merged to the branch “new-killing-feature”)
@code
svn merge https://svn.liris.cnrs.fr/dgtal/branches/new-killing-feature
{... resolve the conflicts if necessary, 
because you may have tree conflicts 
(local addition or suppression of files): 
use svn status and svn resolved "name of the file
 that has been added or removed in the trunk" }
svn commit
@endcode

- deleting a branch (but it will still been tracked in the SVN repository):
@code
svn delete https://svn.liris.cnrs.fr/dgtal/branches/new-killing-feature
@endcode

*/

}
